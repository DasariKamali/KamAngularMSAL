{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nclass ScopeSet {\n  constructor(inputScopes) {\n    // Filter empty string and null/undefined array items\n    const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n    const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(scope => this.scopes.add(scope));\n  }\n  /**\n   * Factory method to create ScopeSet from space-delimited string\n   * @param inputScopeString\n   * @param appClientId\n   * @param scopesRequired\n   */\n  static fromString(inputScopeString) {\n    const scopeString = inputScopeString || Constants.EMPTY_STRING;\n    const inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  }\n  /**\n   * Creates the set of scopes to search for in cache lookups\n   * @param inputScopeString\n   * @returns\n   */\n  static createSearchScopes(inputScopeString) {\n    const scopeSet = new ScopeSet(inputScopeString);\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n    return scopeSet;\n  }\n  /**\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   */\n  validateInputScopes(inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  }\n  /**\n   * Check if a given scope is present in this set of scopes.\n   * @param scope\n   */\n  containsScope(scope) {\n    const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  }\n  /**\n   * Check if a set of scopes is present in this set of scopes.\n   * @param scopeSet\n   */\n  containsScopeSet(scopeSet) {\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope));\n  }\n  /**\n   * Check if set of scopes contains only the defaults\n   */\n  containsOnlyOIDCScopes() {\n    let defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(defaultScope => {\n      if (this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  }\n  /**\n   * Appends single scope if passed\n   * @param newScope\n   */\n  appendScope(newScope) {\n    if (newScope) {\n      this.scopes.add(newScope.trim());\n    }\n  }\n  /**\n   * Appends multiple scopes if passed\n   * @param newScopes\n   */\n  appendScopes(newScopes) {\n    try {\n      newScopes.forEach(newScope => this.appendScope(newScope));\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  }\n  /**\n   * Removes element from set of scopes.\n   * @param scope\n   */\n  removeScope(scope) {\n    if (!scope) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  }\n  /**\n   * Removes default scopes from set of scopes\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\n   */\n  removeOIDCScopes() {\n    OIDC_SCOPES.forEach(defaultScope => {\n      this.scopes.delete(defaultScope);\n    });\n  }\n  /**\n   * Combines an array of scopes with the current set of scopes.\n   * @param otherScopes\n   */\n  unionScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    return unionScopes;\n  }\n  /**\n   * Check if scopes intersect between this set and another.\n   * @param otherScopes\n   */\n  intersectingScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    const unionScopes = this.unionScopeSets(otherScopes);\n    const sizeOtherScopes = otherScopes.getScopeCount();\n    const sizeThisScopes = this.getScopeCount();\n    const sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  }\n  /**\n   * Returns size of set of scopes.\n   */\n  getScopeCount() {\n    return this.scopes.size;\n  }\n  /**\n   * Returns the scopes as an array of string values\n   */\n  asArray() {\n    const array = [];\n    this.scopes.forEach(val => array.push(val));\n    return array;\n  }\n  /**\n   * Prints scopes into a space-delimited string\n   */\n  printScopes() {\n    if (this.scopes) {\n      const scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Prints scopes into a space-delimited lower-case string (used for caching)\n   */\n  printScopesLowerCase() {\n    return this.printScopes().toLowerCase();\n  }\n}\nexport { ScopeSet };","map":{"version":3,"names":["ClientConfigurationError","StringUtils","ClientAuthError","Constants","OIDC_SCOPES","ScopeSet","constructor","inputScopes","scopeArr","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","EMPTY_STRING","split","createSearchScopes","scopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","length","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","has","toLowerCase","containsScopeSet","size","asArray","every","defaultScopeCount","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","createAppendScopeSetError","createRemoveEmptyScopeFromSetError","delete","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/request/ScopeSet.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nclass ScopeSet {\n    constructor(inputScopes) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes\n            ? StringUtils.trimArrayEntries([...inputScopes])\n            : [];\n        const filteredInput = scopeArr\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\n            : [];\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope) => this.scopes.add(scope));\n    }\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString) {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n    /**\n     * Creates the set of scopes to search for in cache lookups\n     * @param inputScopeString\n     * @returns\n     */\n    static createSearchScopes(inputScopeString) {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        }\n        else {\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return scopeSet;\n    }\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    validateInputScopes(inputScopes) {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope) {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\n            : false;\n    }\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet) {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n        return (this.scopes.size >= scopeSet.scopes.size &&\n            scopeSet.asArray().every((scope) => this.containsScope(scope)));\n    }\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes() {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n        return this.scopes.size === defaultScopeCount;\n    }\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope) {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes) {\n        try {\n            newScopes.forEach((newScope) => this.appendScope(newScope));\n        }\n        catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope) {\n        if (!scope) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes() {\n        OIDC_SCOPES.forEach((defaultScope) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount() {\n        return this.scopes.size;\n    }\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray() {\n        const array = [];\n        this.scopes.forEach((val) => array.push(val));\n        return array;\n    }\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes() {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase() {\n        return this.printScopes().toLowerCase();\n    }\n}\n\nexport { ScopeSet };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}