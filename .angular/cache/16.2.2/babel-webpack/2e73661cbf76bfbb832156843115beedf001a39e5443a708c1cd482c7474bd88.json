{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nclass StringUtils {\n  /**\n   * Check if stringified object is empty\n   * @param strObj\n   */\n  static isEmptyObj(strObj) {\n    if (strObj) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\n   * Parses string into an object.\n   *\n   * @param query\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\n   * Trims entries in an array.\n   *\n   * @param arr\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\n   * Removes empty strings from array\n   * @param arr\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !!entry;\n    });\n  }\n  /**\n   * Attempts to parse a string into JSON\n   * @param str\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n   * @param input String to match against\n   */\n  static matchPattern(pattern, input) {\n    /**\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };","map":{"version":3,"names":["StringUtils","isEmptyObj","strObj","obj","JSON","parse","Object","keys","length","e","startsWith","str","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/utils/StringUtils.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nclass StringUtils {\n    /**\n     * Check if stringified object is empty\n     * @param strObj\n     */\n    static isEmptyObj(strObj) {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            }\n            catch (e) { }\n        }\n        return true;\n    }\n    static startsWith(str, search) {\n        return str.indexOf(search) === 0;\n    }\n    static endsWith(str, search) {\n        return (str.length >= search.length &&\n            str.lastIndexOf(search) === str.length - search.length);\n    }\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject(query) {\n        const obj = {};\n        const params = query.split(\"&\");\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj;\n    }\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr) {\n        return arr.map((entry) => entry.trim());\n    }\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr) {\n        return arr.filter((entry) => {\n            return !!entry;\n        });\n    }\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper(str) {\n        try {\n            return JSON.parse(str);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern, input) {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex = new RegExp(pattern\n            .replace(/\\\\/g, \"\\\\\\\\\")\n            .replace(/\\*/g, \"[^ ]*\")\n            .replace(/\\?/g, \"\\\\?\"));\n        return regex.test(input);\n    }\n}\n\nexport { StringUtils };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,CAAC;EACd;AACJ;AACA;AACA;EACI,OAAOC,UAAUA,CAACC,MAAM,EAAE;IACtB,IAAIA,MAAM,EAAE;MACR,IAAI;QACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;QAC9B,OAAOI,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAACK,MAAM,KAAK,CAAC;MACxC,CAAC,CACD,OAAOC,CAAC,EAAE,CAAE;IAChB;IACA,OAAO,IAAI;EACf;EACA,OAAOC,UAAUA,CAACC,GAAG,EAAEC,MAAM,EAAE;IAC3B,OAAOD,GAAG,CAACE,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC;EACpC;EACA,OAAOE,QAAQA,CAACH,GAAG,EAAEC,MAAM,EAAE;IACzB,OAAQD,GAAG,CAACH,MAAM,IAAII,MAAM,CAACJ,MAAM,IAC/BG,GAAG,CAACI,WAAW,CAACH,MAAM,CAAC,KAAKD,GAAG,CAACH,MAAM,GAAGI,MAAM,CAACJ,MAAM;EAC9D;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOQ,mBAAmBA,CAACC,KAAK,EAAE;IAC9B,MAAMd,GAAG,GAAG,CAAC,CAAC;IACd,MAAMe,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAC/B,MAAMC,MAAM,GAAIC,CAAC,IAAKC,kBAAkB,CAACD,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC/DL,MAAM,CAACM,OAAO,CAAEC,IAAI,IAAK;MACrB,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;QACb,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,IAAI,CAACN,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAIQ,GAAG,IAAIC,KAAK,EAAE;UACdzB,GAAG,CAACiB,MAAM,CAACO,GAAG,CAAC,CAAC,GAAGP,MAAM,CAACQ,KAAK,CAAC;QACpC;MACJ;IACJ,CAAC,CAAC;IACF,OAAOzB,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO0B,gBAAgBA,CAACC,GAAG,EAAE;IACzB,OAAOA,GAAG,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACN,IAAI,CAAC,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;AACA;EACI,OAAOO,2BAA2BA,CAACH,GAAG,EAAE;IACpC,OAAOA,GAAG,CAACI,MAAM,CAAEF,KAAK,IAAK;MACzB,OAAO,CAAC,CAACA,KAAK;IAClB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI,OAAOG,eAAeA,CAACxB,GAAG,EAAE;IACxB,IAAI;MACA,OAAOP,IAAI,CAACC,KAAK,CAACM,GAAG,CAAC;IAC1B,CAAC,CACD,OAAOF,CAAC,EAAE;MACN,OAAO,IAAI;IACf;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO2B,YAAYA,CAACC,OAAO,EAAEC,KAAK,EAAE;IAChC;AACR;AACA;AACA;IACQ;IACA,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACH,OAAO,CAC3Bd,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtBA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACvBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3B,OAAOgB,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;EAC5B;AACJ;AAEA,SAAStC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}