{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StubPerformanceMeasurement {\n  startMeasurement() {\n    return;\n  }\n  endMeasurement() {\n    return;\n  }\n  flushMeasurement() {\n    return null;\n  }\n}\nclass StubPerformanceClient {\n  generateId() {\n    return \"callback-id\";\n  }\n  startMeasurement(measureName, correlationId) {\n    return {\n      end: () => null,\n      discard: () => {},\n      add: () => {},\n      increment: () => {},\n      event: {\n        eventId: this.generateId(),\n        status: PerformanceEventStatus.InProgress,\n        authority: \"\",\n        libraryName: \"\",\n        libraryVersion: \"\",\n        clientId: \"\",\n        name: measureName,\n        startTimeMs: Date.now(),\n        correlationId: correlationId || \"\"\n      },\n      measurement: new StubPerformanceMeasurement()\n    };\n  }\n  startPerformanceMeasurement() {\n    return new StubPerformanceMeasurement();\n  }\n  calculateQueuedTime() {\n    return 0;\n  }\n  addQueueMeasurement() {\n    return;\n  }\n  setPreQueueTime() {\n    return;\n  }\n  endMeasurement() {\n    return null;\n  }\n  discardMeasurements() {\n    return;\n  }\n  removePerformanceCallback() {\n    return true;\n  }\n  addPerformanceCallback() {\n    return \"\";\n  }\n  emitEvents() {\n    return;\n  }\n  addFields() {\n    return;\n  }\n  incrementFields() {\n    return;\n  }\n  cacheEventByCorrelationId() {\n    return;\n  }\n}\nexport { StubPerformanceClient, StubPerformanceMeasurement };","map":{"version":3,"names":["PerformanceEventStatus","StubPerformanceMeasurement","startMeasurement","endMeasurement","flushMeasurement","StubPerformanceClient","generateId","measureName","correlationId","end","discard","add","increment","event","eventId","status","InProgress","authority","libraryName","libraryVersion","clientId","name","startTimeMs","Date","now","measurement","startPerformanceMeasurement","calculateQueuedTime","addQueueMeasurement","setPreQueueTime","discardMeasurements","removePerformanceCallback","addPerformanceCallback","emitEvents","addFields","incrementFields","cacheEventByCorrelationId"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StubPerformanceMeasurement {\n    startMeasurement() {\n        return;\n    }\n    endMeasurement() {\n        return;\n    }\n    flushMeasurement() {\n        return null;\n    }\n}\nclass StubPerformanceClient {\n    generateId() {\n        return \"callback-id\";\n    }\n    startMeasurement(measureName, correlationId) {\n        return {\n            end: () => null,\n            discard: () => { },\n            add: () => { },\n            increment: () => { },\n            event: {\n                eventId: this.generateId(),\n                status: PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\",\n            },\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n    startPerformanceMeasurement() {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime() {\n        return 0;\n    }\n    addQueueMeasurement() {\n        return;\n    }\n    setPreQueueTime() {\n        return;\n    }\n    endMeasurement() {\n        return null;\n    }\n    discardMeasurements() {\n        return;\n    }\n    removePerformanceCallback() {\n        return true;\n    }\n    addPerformanceCallback() {\n        return \"\";\n    }\n    emitEvents() {\n        return;\n    }\n    addFields() {\n        return;\n    }\n    incrementFields() {\n        return;\n    }\n    cacheEventByCorrelationId() {\n        return;\n    }\n}\n\nexport { StubPerformanceClient, StubPerformanceMeasurement };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,sBAAsB,QAAQ,wBAAwB;;AAE/D;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,CAAC;EAC7BC,gBAAgBA,CAAA,EAAG;IACf;EACJ;EACAC,cAAcA,CAAA,EAAG;IACb;EACJ;EACAC,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI;EACf;AACJ;AACA,MAAMC,qBAAqB,CAAC;EACxBC,UAAUA,CAAA,EAAG;IACT,OAAO,aAAa;EACxB;EACAJ,gBAAgBA,CAACK,WAAW,EAAEC,aAAa,EAAE;IACzC,OAAO;MACHC,GAAG,EAAEA,CAAA,KAAM,IAAI;MACfC,OAAO,EAAEA,CAAA,KAAM,CAAE,CAAC;MAClBC,GAAG,EAAEA,CAAA,KAAM,CAAE,CAAC;MACdC,SAAS,EAAEA,CAAA,KAAM,CAAE,CAAC;MACpBC,KAAK,EAAE;QACHC,OAAO,EAAE,IAAI,CAACR,UAAU,CAAC,CAAC;QAC1BS,MAAM,EAAEf,sBAAsB,CAACgB,UAAU;QACzCC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,EAAE;QAClBC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAEd,WAAW;QACjBe,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACvBhB,aAAa,EAAEA,aAAa,IAAI;MACpC,CAAC;MACDiB,WAAW,EAAE,IAAIxB,0BAA0B,CAAC;IAChD,CAAC;EACL;EACAyB,2BAA2BA,CAAA,EAAG;IAC1B,OAAO,IAAIzB,0BAA0B,CAAC,CAAC;EAC3C;EACA0B,mBAAmBA,CAAA,EAAG;IAClB,OAAO,CAAC;EACZ;EACAC,mBAAmBA,CAAA,EAAG;IAClB;EACJ;EACAC,eAAeA,CAAA,EAAG;IACd;EACJ;EACA1B,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI;EACf;EACA2B,mBAAmBA,CAAA,EAAG;IAClB;EACJ;EACAC,yBAAyBA,CAAA,EAAG;IACxB,OAAO,IAAI;EACf;EACAC,sBAAsBA,CAAA,EAAG;IACrB,OAAO,EAAE;EACb;EACAC,UAAUA,CAAA,EAAG;IACT;EACJ;EACAC,SAASA,CAAA,EAAG;IACR;EACJ;EACAC,eAAeA,CAAA,EAAG;IACd;EACJ;EACAC,yBAAyBA,CAAA,EAAG;IACxB;EACJ;AACJ;AAEA,SAAS/B,qBAAqB,EAAEJ,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}