{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  sendGetRequestAsync() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  sendPostRequestAsync() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    ...authOptions\n  };\n}\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };","map":{"version":3,"names":["_asyncToGenerator","DEFAULT_CRYPTO_IMPLEMENTATION","AuthError","Logger","LogLevel","Constants","version","AzureCloudInstance","DefaultStorageClass","ProtocolMode","DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","DEFAULT_SYSTEM_OPTIONS","tokenRenewalOffsetSeconds","preventCorsPreflight","DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","Info","correlationId","EMPTY_STRING","DEFAULT_CACHE_OPTIONS","claimsBasedCachingEnabled","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","notImplErr","createUnexpectedError","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","buildClientConfiguration","authOptions","userAuthOptions","systemOptions","userSystemOptions","loggerOptions","userLoggerOption","cacheOptions","userCacheOptions","storageInterface","storageImplementation","networkInterface","networkImplementation","cryptoInterface","cryptoImplementation","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","buildAuthOptions","clientId","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache","isOidcProtocolMode","config","authority","options","protocolMode","OIDC"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING,\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false,\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n    async sendGetRequestAsync() {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async sendPostRequestAsync() {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n};\nconst DEFAULT_LIBRARY_INFO = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING,\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined,\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: \"\",\n        appVersion: \"\",\n    },\n};\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nfunction buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache, }) {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption,\n    };\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\n        storageInterface: storageImplementation ||\n            new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,\n    };\n}\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions) {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        ...authOptions,\n    };\n}\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nfunction isOidcProtocolMode(config) {\n    return (config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC);\n}\n\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,6BAA6B,QAAQ,uBAAuB;AACrE,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,MAAM,EAAEC,QAAQ,QAAQ,sBAAsB;AACvD,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,kBAAkB,QAAQ,mCAAmC;AACtE,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,YAAY,QAAQ,+BAA+B;;AAE5D;AACA;AACA;AACA;AACA;AACA,MAAMC,gCAAgC,GAAG,GAAG;AAC5C,MAAMC,sBAAsB,GAAG;EAC3BC,yBAAyB,EAAEF,gCAAgC;EAC3DG,oBAAoB,EAAE;AAC1B,CAAC;AACD,MAAMC,6BAA6B,GAAG;EAClCC,cAAc,EAAEA,CAAA,KAAM;IAClB;EAAA,CACH;EACDC,iBAAiB,EAAE,KAAK;EACxBC,QAAQ,EAAEb,QAAQ,CAACc,IAAI;EACvBC,aAAa,EAAEd,SAAS,CAACe;AAC7B,CAAC;AACD,MAAMC,qBAAqB,GAAG;EAC1BC,yBAAyB,EAAE;AAC/B,CAAC;AACD,MAAMC,8BAA8B,GAAG;EAC7BC,mBAAmBA,CAAA,EAAG;IAAA,OAAAxB,iBAAA;MACxB,MAAMyB,UAAU,GAAG,oEAAoE;MACvF,MAAMvB,SAAS,CAACwB,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKE,oBAAoBA,CAAA,EAAG;IAAA,OAAA3B,iBAAA;MACzB,MAAMyB,UAAU,GAAG,qEAAqE;MACxF,MAAMvB,SAAS,CAACwB,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD;AACJ,CAAC;AACD,MAAMG,oBAAoB,GAAG;EACzBC,GAAG,EAAExB,SAAS,CAACyB,GAAG;EAClBxB,OAAO,EAAEA,OAAO;EAChByB,GAAG,EAAE1B,SAAS,CAACe,YAAY;EAC3BY,EAAE,EAAE3B,SAAS,CAACe;AAClB,CAAC;AACD,MAAMa,0BAA0B,GAAG;EAC/BC,YAAY,EAAE7B,SAAS,CAACe,YAAY;EACpCe,eAAe,EAAEC;AACrB,CAAC;AACD,MAAMC,2BAA2B,GAAG;EAChCC,kBAAkB,EAAE/B,kBAAkB,CAACgC,IAAI;EAC3CC,MAAM,EAAG,GAAEnC,SAAS,CAACoC,qBAAsB;AAC/C,CAAC;AACD,MAAMC,yBAAyB,GAAG;EAC9BC,WAAW,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE;EAChB;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAAC;EAAEC,WAAW,EAAEC,eAAe;EAAEC,aAAa,EAAEC,iBAAiB;EAAEC,aAAa,EAAEC,gBAAgB;EAAEC,YAAY,EAAEC,gBAAgB;EAAEC,gBAAgB,EAAEC,qBAAqB;EAAEC,gBAAgB,EAAEC,qBAAqB;EAAEC,eAAe,EAAEC,oBAAoB;EAAEC,iBAAiB,EAAEA,iBAAiB;EAAEC,WAAW,EAAEA,WAAW;EAAEC,SAAS,EAAEA,SAAS;EAAEC,sBAAsB,EAAEA,sBAAsB;EAAEC,iBAAiB,EAAEA,iBAAiB;EAAEC,iBAAiB,EAAEA;AAAmB,CAAC,EAAE;EAC/e,MAAMf,aAAa,GAAG;IAClB,GAAGrC,6BAA6B;IAChC,GAAGsC;EACP,CAAC;EACD,OAAO;IACHL,WAAW,EAAEoB,gBAAgB,CAACnB,eAAe,CAAC;IAC9CC,aAAa,EAAE;MAAE,GAAGtC,sBAAsB;MAAE,GAAGuC;IAAkB,CAAC;IAClEC,aAAa,EAAEA,aAAa;IAC5BE,YAAY,EAAE;MAAE,GAAGhC,qBAAqB;MAAE,GAAGiC;IAAiB,CAAC;IAC/DC,gBAAgB,EAAEC,qBAAqB,IACnC,IAAIhD,mBAAmB,CAACwC,eAAe,CAACoB,QAAQ,EAAEnE,6BAA6B,EAAE,IAAIE,MAAM,CAACgD,aAAa,CAAC,CAAC;IAC/GM,gBAAgB,EAAEC,qBAAqB,IAAInC,8BAA8B;IACzEoC,eAAe,EAAEC,oBAAoB,IAAI3D,6BAA6B;IACtE4D,iBAAiB,EAAEA,iBAAiB,IAAI5B,0BAA0B;IAClE6B,WAAW,EAAE;MAAE,GAAGlC,oBAAoB;MAAE,GAAGkC;IAAY,CAAC;IACxDC,SAAS,EAAE;MAAE,GAAGrB,yBAAyB;MAAE,GAAGqB;IAAU,CAAC;IACzDC,sBAAsB,EAAEA,sBAAsB,IAAI,IAAI;IACtDC,iBAAiB,EAAEA,iBAAiB,IAAI,IAAI;IAC5CC,iBAAiB,EAAEA,iBAAiB,IAAI;EAC5C,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACpB,WAAW,EAAE;EACnC,OAAO;IACHsB,kBAAkB,EAAE,EAAE;IACtBC,iBAAiB,EAAEjC,2BAA2B;IAC9CkC,0BAA0B,EAAE,KAAK;IACjC,GAAGxB;EACP,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,SAASyB,kBAAkBA,CAACC,MAAM,EAAE;EAChC,OAAQA,MAAM,CAAC1B,WAAW,CAAC2B,SAAS,CAACC,OAAO,CAACC,YAAY,KAAKnE,YAAY,CAACoE,IAAI;AACnF;AAEA,SAASlE,sBAAsB,EAAEmC,wBAAwB,EAAE0B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}