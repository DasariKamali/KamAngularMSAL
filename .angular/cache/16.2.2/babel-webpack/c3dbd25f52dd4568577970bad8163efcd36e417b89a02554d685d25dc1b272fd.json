{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, Component, NgModule } from '@angular/core';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, ReplaySubject, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport * as i4 from '@angular/router';\n\n/* eslint-disable header/header */\nconst name = '@azure/msal-angular';\nconst version = '3.0.4';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst MSAL_INSTANCE = new InjectionToken('MSAL_INSTANCE');\nconst MSAL_GUARD_CONFIG = new InjectionToken('MSAL_GUARD_CONFIG');\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken('MSAL_INTERCEPTOR_CONFIG');\nconst MSAL_BROADCAST_CONFIG = new InjectionToken('MSAL_BROADCAST_CONFIG');\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalService {\n  constructor(instance, location) {\n    this.instance = instance;\n    this.location = location;\n    const hash = this.location.path(true).split('#').pop();\n    if (hash) {\n      this.redirectHash = `#${hash}`;\n    }\n    this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n  }\n  initialize() {\n    return from(this.instance.initialize());\n  }\n  acquireTokenPopup(request) {\n    return from(this.instance.acquireTokenPopup(request));\n  }\n  acquireTokenRedirect(request) {\n    return from(this.instance.acquireTokenRedirect(request));\n  }\n  acquireTokenSilent(silentRequest) {\n    return from(this.instance.acquireTokenSilent(silentRequest));\n  }\n  handleRedirectObservable(hash) {\n    return from(this.instance.initialize().then(() => this.instance.handleRedirectPromise(hash || this.redirectHash)));\n  }\n  loginPopup(request) {\n    return from(this.instance.loginPopup(request));\n  }\n  loginRedirect(request) {\n    return from(this.instance.loginRedirect(request));\n  }\n  logout(logoutRequest) {\n    return from(this.instance.logout(logoutRequest));\n  }\n  logoutRedirect(logoutRequest) {\n    return from(this.instance.logoutRedirect(logoutRequest));\n  }\n  logoutPopup(logoutRequest) {\n    return from(this.instance.logoutPopup(logoutRequest));\n  }\n  ssoSilent(request) {\n    return from(this.instance.ssoSilent(request));\n  }\n  /**\r\n   * Gets logger for msal-angular.\r\n   * If no logger set, returns logger instance created with same options as msal-browser\r\n   */\n  getLogger() {\n    if (!this.logger) {\n      this.logger = this.instance.getLogger().clone(name, version);\n    }\n    return this.logger;\n  }\n  // Create a logger instance for msal-angular with the same options as msal-browser\n  setLogger(logger) {\n    this.logger = logger.clone(name, version);\n    this.instance.setLogger(logger);\n  }\n}\nMsalService.ɵfac = function MsalService_Factory(t) {\n  return new (t || MsalService)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(i3.Location));\n};\nMsalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalService,\n  factory: MsalService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: i3.Location\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalBroadcastService {\n  constructor(msalInstance, authService, msalBroadcastConfig) {\n    this.msalInstance = msalInstance;\n    this.authService = authService;\n    this.msalBroadcastConfig = msalBroadcastConfig;\n    // Make _msalSubject a ReplaySubject if configured to replay past events\n    if (this.msalBroadcastConfig && this.msalBroadcastConfig.eventsToReplay > 0) {\n      this.authService.getLogger().verbose(`BroadcastService - eventsToReplay set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\n      this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\n    } else {\n      // Defaults to _msalSubject being a Subject\n      this._msalSubject = new Subject();\n    }\n    this.msalSubject$ = this._msalSubject.asObservable();\n    // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n    this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n    this.inProgress$ = this._inProgress.asObservable();\n    this.msalInstance.addEventCallback(message => {\n      this._msalSubject.next(message);\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\n      if (status !== null) {\n        this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\n        this._inProgress.next(status);\n      }\n    });\n  }\n}\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) {\n  return new (t || MsalBroadcastService)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(MsalService), i0.ɵɵinject(MSAL_BROADCAST_CONFIG, 8));\n};\nMsalBroadcastService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalBroadcastService,\n  factory: MsalBroadcastService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalBroadcastService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MSAL_BROADCAST_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalGuard {\n  constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\n    this.msalGuardConfig = msalGuardConfig;\n    this.msalBroadcastService = msalBroadcastService;\n    this.authService = authService;\n    this.location = location;\n    this.router = router;\n    // Subscribing so events in MsalGuard will set inProgress$ observable\n    this.msalBroadcastService.inProgress$.subscribe();\n  }\n  /**\r\n   * Parses url string to UrlTree\r\n   * @param url\r\n   */\n  parseUrl(url) {\n    return this.router.parseUrl(url);\n  }\n  /**\r\n   * Builds the absolute url for the destination page\r\n   * @param path Relative path of requested page\r\n   * @returns Full destination url\r\n   */\n  getDestinationUrl(path) {\n    this.authService.getLogger().verbose('Guard - getting destination url');\n    // Absolute base url for the application (default to origin if base element not present)\n    const baseElements = document.getElementsByTagName('base');\n    const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\n    // Path of page (including hash, if using hash routing)\n    const pathUrl = this.location.prepareExternalUrl(path);\n    // Hash location strategy\n    if (pathUrl.startsWith('#')) {\n      this.authService.getLogger().verbose('Guard - destination by hash routing');\n      return `${baseUrl}/${pathUrl}`;\n    }\n    /*\r\n     * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n     * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n     */\n    return `${baseUrl}${path}`;\n  }\n  /**\r\n   * Interactively prompt the user to login\r\n   * @param url Path of the requested page\r\n   */\n  loginInteractively(state) {\n    const authRequest = typeof this.msalGuardConfig.authRequest === 'function' ? this.msalGuardConfig.authRequest(this.authService, state) : {\n      ...this.msalGuardConfig.authRequest\n    };\n    if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose('Guard - logging in by popup');\n      return this.authService.loginPopup(authRequest).pipe(map(response => {\n        this.authService.getLogger().verbose('Guard - login by popup successful, can activate, setting active account');\n        this.authService.instance.setActiveAccount(response.account);\n        return true;\n      }));\n    }\n    this.authService.getLogger().verbose('Guard - logging in by redirect');\n    const redirectStartPage = this.getDestinationUrl(state.url);\n    return this.authService.loginRedirect({\n      redirectStartPage,\n      ...authRequest\n    }).pipe(map(() => false));\n  }\n  /**\r\n   * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable\r\n   * @param state\r\n   */\n  activateHelper(state) {\n    if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError('invalid_interaction_type', 'Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration');\n    }\n    this.authService.getLogger().verbose('MSAL Guard activated');\n    /*\r\n     * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n     * short-circuit to prevent redirecting or popups.\r\n     */\n    if (typeof window !== 'undefined') {\n      if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe() && !this.authService.instance.getConfiguration().system.allowRedirectInIframe) {\n        this.authService.getLogger().warning('Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.');\n        return of(false);\n      }\n    } else {\n      this.authService.getLogger().info('Guard - window is undefined, MSAL does not support server-side token acquisition');\n      return of(true);\n    }\n    /**\r\n     * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n     */\n    if (this.msalGuardConfig.loginFailedRoute) {\n      this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n    }\n    // Capture current path before it gets changed by handleRedirectObservable\n    const currentPath = this.location.path(true);\n    return this.authService.initialize().pipe(concatMap(() => {\n      return this.authService.handleRedirectObservable();\n    }), concatMap(() => {\n      if (!this.authService.instance.getAllAccounts().length) {\n        if (state) {\n          this.authService.getLogger().verbose('Guard - no accounts retrieved, log in required to activate');\n          return this.loginInteractively(state);\n        }\n        this.authService.getLogger().verbose('Guard - no accounts retrieved, no state, cannot load');\n        return of(false);\n      }\n      this.authService.getLogger().verbose('Guard - at least 1 account exists, can activate or load');\n      // Prevent navigating the app to /#code= or /code=\n      if (state) {\n        /*\r\n         * Path routing:\r\n         * state.url: /#code=...\r\n         * state.root.fragment: code=...\r\n         */\n        /*\r\n         * Hash routing:\r\n         * state.url: /code\r\n         * state.root.fragment: null\r\n         */\n        const urlContainsCode = this.includesCode(state.url);\n        const fragmentContainsCode = !!state.root && !!state.root.fragment && this.includesCode(`#${state.root.fragment}`);\n        const hashRouting = this.location.prepareExternalUrl(state.url).indexOf('#') === 0;\n        // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\n        if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\n          this.authService.getLogger().info('Guard - Hash contains known code response, stopping navigation.');\n          // Path routing (navigate to current path without hash)\n          if (currentPath.indexOf('#') > -1) {\n            return of(this.parseUrl(this.location.path()));\n          }\n          // Hash routing (navigate to root path)\n          return of(this.parseUrl(''));\n        }\n      }\n      return of(true);\n    }), catchError(error => {\n      this.authService.getLogger().error('Guard - error while logging in, unable to activate');\n      this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\n      /**\r\n       * If a loginFailedRoute is set, checks to see if state is passed before returning route\r\n       */\n      if (this.loginFailedRoute && state) {\n        this.authService.getLogger().verbose('Guard - loginFailedRoute set, redirecting');\n        return of(this.loginFailedRoute);\n      }\n      return of(false);\n    }));\n  }\n  includesCode(path) {\n    return path.lastIndexOf('/code') > -1 && path.lastIndexOf('/code') === path.length - '/code'.length ||\n    // path.endsWith(\"/code\")\n    path.indexOf('#code=') > -1 || path.indexOf('&code=') > -1;\n  }\n  canActivate(route, state) {\n    this.authService.getLogger().verbose('Guard - canActivate');\n    return this.activateHelper(state);\n  }\n  canActivateChild(route, state) {\n    this.authService.getLogger().verbose('Guard - canActivateChild');\n    return this.activateHelper(state);\n  }\n  canMatch() {\n    this.authService.getLogger().verbose('Guard - canLoad');\n    return this.activateHelper();\n  }\n}\nMsalGuard.ɵfac = function MsalGuard_Factory(t) {\n  return new (t || MsalGuard)(i0.ɵɵinject(MSAL_GUARD_CONFIG), i0.ɵɵinject(MsalBroadcastService), i0.ɵɵinject(MsalService), i0.ɵɵinject(i3.Location), i0.ɵɵinject(i4.Router));\n};\nMsalGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalGuard,\n  factory: MsalGuard.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalGuard, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_GUARD_CONFIG]\n      }]\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: MsalService\n    }, {\n      type: i3.Location\n    }, {\n      type: i4.Router\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalInterceptor {\n  constructor(msalInterceptorConfig, authService, location, msalBroadcastService,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  document) {\n    this.msalInterceptorConfig = msalInterceptorConfig;\n    this.authService = authService;\n    this.location = location;\n    this.msalBroadcastService = msalBroadcastService;\n    this._document = document;\n  }\n  intercept(req,\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  next\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError('invalid_interaction_type', 'Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration');\n    }\n    this.authService.getLogger().verbose('MSAL Interceptor activated');\n    const scopes = this.getScopesForEndpoint(req.url, req.method);\n    // If no scopes for endpoint, does not acquire token\n    if (!scopes || scopes.length === 0) {\n      this.authService.getLogger().verbose('Interceptor - no scopes for endpoint');\n      return next.handle(req);\n    }\n    // Sets account as active account or first account\n    let account;\n    if (!!this.authService.instance.getActiveAccount()) {\n      this.authService.getLogger().verbose('Interceptor - active account selected');\n      account = this.authService.instance.getActiveAccount();\n    } else {\n      this.authService.getLogger().verbose('Interceptor - no active account, fallback to first account');\n      account = this.authService.instance.getAllAccounts()[0];\n    }\n    const authRequest = typeof this.msalInterceptorConfig.authRequest === 'function' ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n      account: account\n    }) : {\n      ...this.msalInterceptorConfig.authRequest,\n      account\n    };\n    this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n    this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\n    return this.acquireToken(authRequest, scopes, account).pipe(switchMap(result => {\n      this.authService.getLogger().verbose('Interceptor - setting authorization headers');\n      const headers = req.headers.set('Authorization', `Bearer ${result.accessToken}`);\n      const requestClone = req.clone({\n        headers\n      });\n      return next.handle(requestClone);\n    }));\n  }\n  /**\r\n   * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @param account Account\r\n   * @returns Authentication result\r\n   */\n  acquireToken(authRequest, scopes, account) {\n    // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n    return this.authService.acquireTokenSilent({\n      ...authRequest,\n      scopes,\n      account\n    }).pipe(catchError(() => {\n      this.authService.getLogger().error('Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.');\n      return this.msalBroadcastService.inProgress$.pipe(take(1), switchMap(status => {\n        if (status === InteractionStatus.None) {\n          return this.acquireTokenInteractively(authRequest, scopes);\n        }\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\n      }));\n    }), switchMap(result => {\n      if (!result.accessToken) {\n        this.authService.getLogger().error('Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.');\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\n      }\n      return of(result);\n    }));\n  }\n  /**\r\n   * Invoke interaction for the given set of scopes\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @returns Result from the interactive request\r\n   */\n  acquireTokenInteractively(authRequest, scopes) {\n    if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose('Interceptor - error acquiring token silently, acquiring by popup');\n      return this.authService.acquireTokenPopup({\n        ...authRequest,\n        scopes\n      });\n    }\n    this.authService.getLogger().verbose('Interceptor - error acquiring token silently, acquiring by redirect');\n    const redirectStartPage = window.location.href;\n    this.authService.acquireTokenRedirect({\n      ...authRequest,\n      scopes,\n      redirectStartPage\n    });\n    return EMPTY;\n  }\n  /**\r\n   * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n   * @param endpoint Url of the request\r\n   * @param httpMethod Http method of the request\r\n   * @returns Array of scopes, or null if not found\r\n   *\r\n   */\n  getScopesForEndpoint(endpoint, httpMethod) {\n    this.authService.getLogger().verbose('Interceptor - getting scopes for endpoint');\n    // Ensures endpoints and protected resources compared are normalized\n    const normalizedEndpoint = this.location.normalize(endpoint);\n    const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n    const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\n    // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n    if (matchingProtectedResources.absoluteResources.length > 0) {\n      return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\n    } else if (matchingProtectedResources.relativeResources.length > 0) {\n      return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\n    }\n    return null;\n  }\n  /**\r\n   * Finds resource endpoints that match request endpoint\r\n   * @param protectedResourcesEndpoints\r\n   * @param endpoint\r\n   * @returns\r\n   */\n  matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\n    const matchingResources = {\n      absoluteResources: [],\n      relativeResources: []\n    };\n    protectedResourcesEndpoints.forEach(key => {\n      // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n      const normalizedKey = this.location.normalize(key);\n      if (StringUtils.matchPattern(normalizedKey, endpoint)) {\n        matchingResources.absoluteResources.push(key);\n      }\n      // Get url components for relative urls\n      const absoluteKey = this.getAbsoluteUrl(key);\n      const keyComponents = new UrlString(absoluteKey).getUrlComponents();\n      const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n      const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\n      // Normalized key should include query strings if applicable\n      const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\n      // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n      if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== '' && relativeNormalizedKey !== '/*') {\n        matchingResources.relativeResources.push(key);\n      }\n    });\n    return matchingResources;\n  }\n  /**\r\n   * Transforms relative urls to absolute urls\r\n   * @param url\r\n   * @returns\r\n   */\n  getAbsoluteUrl(url) {\n    const link = this._document.createElement('a');\n    link.href = url;\n    return link.href;\n  }\n  /**\r\n   * Finds scopes from first matching endpoint with HTTP method that matches request\r\n   * @param protectedResourceMap Protected resource map\r\n   * @param endpointArray Array of resources that match request endpoint\r\n   * @param httpMethod Http method of the request\r\n   * @returns\r\n   */\n  matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\n    const allMatchedScopes = [];\n    // Check each matched endpoint for matching HttpMethod and scopes\n    endpointArray.forEach(matchedEndpoint => {\n      const scopesForEndpoint = [];\n      const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\n      // Return if resource is unprotected\n      if (methodAndScopesArray === null) {\n        allMatchedScopes.push(null);\n        return;\n      }\n      methodAndScopesArray.forEach(entry => {\n        // Entry is either array of scopes or ProtectedResourceScopes object\n        if (typeof entry === 'string') {\n          scopesForEndpoint.push(entry);\n        } else {\n          // Ensure methods being compared are normalized\n          const normalizedRequestMethod = httpMethod.toLowerCase();\n          const normalizedResourceMethod = entry.httpMethod.toLowerCase();\n          // Method in protectedResourceMap matches request http method\n          if (normalizedResourceMethod === normalizedRequestMethod) {\n            // Validate if scopes comes null to unprotect the resource in a certain http method\n            if (entry.scopes === null) {\n              allMatchedScopes.push(null);\n            } else {\n              entry.scopes.forEach(scope => {\n                scopesForEndpoint.push(scope);\n              });\n            }\n          }\n        }\n      });\n      // Only add to all scopes if scopes for endpoint and method is found\n      if (scopesForEndpoint.length > 0) {\n        allMatchedScopes.push(scopesForEndpoint);\n      }\n    });\n    if (allMatchedScopes.length > 0) {\n      if (allMatchedScopes.length > 1) {\n        this.authService.getLogger().warning('Interceptor - More than 1 matching scopes for endpoint found.');\n      }\n      // Returns scopes for first matching endpoint\n      return allMatchedScopes[0];\n    }\n    return null;\n  }\n}\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) {\n  return new (t || MsalInterceptor)(i0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), i0.ɵɵinject(MsalService), i0.ɵɵinject(i3.Location), i0.ɵɵinject(MsalBroadcastService), i0.ɵɵinject(DOCUMENT));\n};\nMsalInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalInterceptor,\n  factory: MsalInterceptor.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INTERCEPTOR_CONFIG]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: i3.Location\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to\r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\nclass MsalRedirectComponent {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.authService.getLogger().verbose('MsalRedirectComponent activated');\n    this.authService.handleRedirectObservable().subscribe();\n  }\n}\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) {\n  return new (t || MsalRedirectComponent)(i0.ɵɵdirectiveInject(MsalService));\n};\nMsalRedirectComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MsalRedirectComponent,\n  selectors: [[\"app-redirect\"]],\n  decls: 0,\n  vars: 0,\n  template: function MsalRedirectComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalRedirectComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-redirect',\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: MsalService\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalModule {\n  static forRoot(msalInstance, guardConfig, interceptorConfig) {\n    return {\n      ngModule: MsalModule,\n      providers: [{\n        provide: MSAL_INSTANCE,\n        useValue: msalInstance\n      }, {\n        provide: MSAL_GUARD_CONFIG,\n        useValue: guardConfig\n      }, {\n        provide: MSAL_INTERCEPTOR_CONFIG,\n        useValue: interceptorConfig\n      }, MsalService]\n    };\n  }\n}\nMsalModule.ɵfac = function MsalModule_Factory(t) {\n  return new (t || MsalModule)();\n};\nMsalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MsalModule\n});\nMsalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MsalGuard, MsalBroadcastService],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MsalRedirectComponent],\n      imports: [CommonModule],\n      providers: [MsalGuard, MsalBroadcastService]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/performance.md\r\n */\nclass MsalCustomNavigationClient extends NavigationClient {\n  constructor(authService, router, location) {\n    super();\n    this.authService = authService;\n    this.router = router;\n    this.location = location;\n  }\n  navigateInternal(url, options) {\n    var _superprop_getNavigateInternal = () => super.navigateInternal,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      _this.authService.getLogger().trace('MsalCustomNavigationClient called');\n      _this.authService.getLogger().verbose('MsalCustomNavigationClient - navigating');\n      _this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\n      // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n      if (options.noHistory) {\n        return _superprop_getNavigateInternal().call(_this, url, options);\n      } else {\n        // Normalizing newUrl if no query string\n        const urlComponents = new UrlString(url).getUrlComponents();\n        const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : _this.location.normalize(urlComponents.AbsolutePath);\n        yield _this.router.navigateByUrl(newUrl, {\n          replaceUrl: options.noHistory\n        });\n      }\n      return Promise.resolve(options.noHistory);\n    })();\n  }\n}\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) {\n  return new (t || MsalCustomNavigationClient)(i0.ɵɵinject(MsalService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i3.Location));\n};\nMsalCustomNavigationClient.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalCustomNavigationClient,\n  factory: MsalCustomNavigationClient.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MsalService\n    }, {\n      type: i4.Router\n    }, {\n      type: i3.Location\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","Optional","Component","NgModule","WrapperSKU","InteractionStatus","EventMessageUtils","InteractionType","BrowserConfigurationAuthError","UrlString","BrowserUtils","StringUtils","NavigationClient","from","ReplaySubject","Subject","BehaviorSubject","of","EMPTY","i3","DOCUMENT","CommonModule","map","concatMap","catchError","switchMap","take","filter","i4","name","version","MSAL_INSTANCE","MSAL_GUARD_CONFIG","MSAL_INTERCEPTOR_CONFIG","MSAL_BROADCAST_CONFIG","MsalService","constructor","instance","location","hash","path","split","pop","redirectHash","initializeWrapperLibrary","Angular","initialize","acquireTokenPopup","request","acquireTokenRedirect","acquireTokenSilent","silentRequest","handleRedirectObservable","then","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getLogger","logger","clone","setLogger","ɵfac","MsalService_Factory","t","ɵɵinject","Location","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","undefined","decorators","args","MsalBroadcastService","msalInstance","authService","msalBroadcastConfig","eventsToReplay","verbose","_msalSubject","msalSubject$","asObservable","_inProgress","Startup","inProgress$","addEventCallback","message","next","status","getInteractionStatusFromEvent","value","eventType","MsalBroadcastService_Factory","MsalGuard","msalGuardConfig","msalBroadcastService","router","subscribe","parseUrl","url","getDestinationUrl","baseElements","document","getElementsByTagName","baseUrl","normalize","length","href","window","origin","pathUrl","prepareExternalUrl","startsWith","loginInteractively","state","authRequest","interactionType","Popup","pipe","response","setActiveAccount","account","redirectStartPage","activateHelper","Redirect","hashContainsKnownProperties","isInIframe","getConfiguration","system","allowRedirectInIframe","warning","info","loginFailedRoute","currentPath","getAllAccounts","urlContainsCode","includesCode","fragmentContainsCode","root","fragment","hashRouting","indexOf","error","errorPii","lastIndexOf","canActivate","route","canActivateChild","canMatch","MsalGuard_Factory","Router","MsalInterceptor","msalInterceptorConfig","_document","intercept","req","scopes","getScopesForEndpoint","method","handle","getActiveAccount","infoPii","acquireToken","result","headers","set","accessToken","requestClone","None","acquireTokenInteractively","endpoint","httpMethod","normalizedEndpoint","protectedResourcesArray","Array","protectedResourceMap","keys","matchingProtectedResources","matchResourcesToEndpoint","absoluteResources","matchScopesToEndpoint","relativeResources","protectedResourcesEndpoints","matchingResources","forEach","key","normalizedKey","matchPattern","push","absoluteKey","getAbsoluteUrl","keyComponents","getUrlComponents","absoluteEndpoint","endpointComponents","relativeNormalizedKey","QueryString","AbsolutePath","HostNameAndPort","link","createElement","endpointArray","allMatchedScopes","matchedEndpoint","scopesForEndpoint","methodAndScopesArray","get","entry","normalizedRequestMethod","toLowerCase","normalizedResourceMethod","scope","MsalInterceptor_Factory","MsalRedirectComponent","ngOnInit","MsalRedirectComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","MsalRedirectComponent_Template","rf","ctx","encapsulation","selector","MsalModule","forRoot","guardConfig","interceptorConfig","ngModule","providers","provide","useValue","MsalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","MsalCustomNavigationClient","navigateInternal","options","_superprop_getNavigateInternal","_this","_asyncToGenerator","trace","verbosePii","noHistory","call","urlComponents","newUrl","navigateByUrl","replaceUrl","Promise","resolve","MsalCustomNavigationClient_Factory"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-angular/fesm2020/azure-msal-angular.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, Component, NgModule } from '@angular/core';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, ReplaySubject, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport * as i4 from '@angular/router';\n\n/* eslint-disable header/header */\r\nconst name = '@azure/msal-angular';\r\nconst version = '3.0.4';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst MSAL_INSTANCE = new InjectionToken('MSAL_INSTANCE');\r\nconst MSAL_GUARD_CONFIG = new InjectionToken('MSAL_GUARD_CONFIG');\r\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken('MSAL_INTERCEPTOR_CONFIG');\r\nconst MSAL_BROADCAST_CONFIG = new InjectionToken('MSAL_BROADCAST_CONFIG');\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalService {\r\n    constructor(instance, location) {\r\n        this.instance = instance;\r\n        this.location = location;\r\n        const hash = this.location.path(true).split('#').pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n    initialize() {\r\n        return from(this.instance.initialize());\r\n    }\r\n    acquireTokenPopup(request) {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request) {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest) {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash) {\r\n        return from(this.instance\r\n            .initialize()\r\n            .then(() => this.instance.handleRedirectPromise(hash || this.redirectHash)));\r\n    }\r\n    loginPopup(request) {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request) {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest) {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest) {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest) {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request) {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger() {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger) {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n}\r\nMsalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalService, deps: [{ token: MSAL_INSTANCE }, { token: i3.Location }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INSTANCE]\r\n                }] }, { type: i3.Location }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalBroadcastService {\r\n    constructor(msalInstance, authService, msalBroadcastConfig) {\r\n        this.msalInstance = msalInstance;\r\n        this.authService = authService;\r\n        this.msalBroadcastConfig = msalBroadcastConfig;\r\n        // Make _msalSubject a ReplaySubject if configured to replay past events\r\n        if (this.msalBroadcastConfig &&\r\n            this.msalBroadcastConfig.eventsToReplay > 0) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose(`BroadcastService - eventsToReplay set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\r\n            this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\r\n        }\r\n        else {\r\n            // Defaults to _msalSubject being a Subject\r\n            this._msalSubject = new Subject();\r\n        }\r\n        this.msalSubject$ = this._msalSubject.asObservable();\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\r\n            if (status !== null) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\nMsalBroadcastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalBroadcastService, deps: [{ token: MSAL_INSTANCE }, { token: MsalService }, { token: MSAL_BROADCAST_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalBroadcastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalBroadcastService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalBroadcastService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INSTANCE]\r\n                }] }, { type: MsalService }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MSAL_BROADCAST_CONFIG]\r\n                }] }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalGuard {\r\n    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\r\n        this.msalGuardConfig = msalGuardConfig;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.router = router;\r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url\r\n     */\r\n    parseUrl(url) {\r\n        return this.router.parseUrl(url);\r\n    }\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path) {\r\n        this.authService.getLogger().verbose('Guard - getting destination url');\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName('base');\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith('#')) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Guard - destination by hash routing');\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    loginInteractively(state) {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === 'function'\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : { ...this.msalGuardConfig.authRequest };\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose('Guard - logging in by popup');\r\n            return this.authService.loginPopup(authRequest).pipe(map((response) => {\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose('Guard - login by popup successful, can activate, setting active account');\r\n                this.authService.instance.setActiveAccount(response.account);\r\n                return true;\r\n            }));\r\n        }\r\n        this.authService.getLogger().verbose('Guard - logging in by redirect');\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService\r\n            .loginRedirect({\r\n            redirectStartPage,\r\n            ...authRequest,\r\n        })\r\n            .pipe(map(() => false));\r\n    }\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\r\n    activateHelper(state) {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup &&\r\n            this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError('invalid_interaction_type', 'Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration');\r\n        }\r\n        this.authService.getLogger().verbose('MSAL Guard activated');\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         */\r\n        if (typeof window !== 'undefined') {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) &&\r\n                BrowserUtils.isInIframe() &&\r\n                !this.authService.instance.getConfiguration().system\r\n                    .allowRedirectInIframe) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .warning('Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.');\r\n                return of(false);\r\n            }\r\n        }\r\n        else {\r\n            this.authService\r\n                .getLogger()\r\n                .info('Guard - window is undefined, MSAL does not support server-side token acquisition');\r\n            return of(true);\r\n        }\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n        return this.authService.initialize().pipe(concatMap(() => {\r\n            return this.authService.handleRedirectObservable();\r\n        }), concatMap(() => {\r\n            if (!this.authService.instance.getAllAccounts().length) {\r\n                if (state) {\r\n                    this.authService\r\n                        .getLogger()\r\n                        .verbose('Guard - no accounts retrieved, log in required to activate');\r\n                    return this.loginInteractively(state);\r\n                }\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose('Guard - no accounts retrieved, no state, cannot load');\r\n                return of(false);\r\n            }\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Guard - at least 1 account exists, can activate or load');\r\n            // Prevent navigating the app to /#code= or /code=\r\n            if (state) {\r\n                /*\r\n                 * Path routing:\r\n                 * state.url: /#code=...\r\n                 * state.root.fragment: code=...\r\n                 */\r\n                /*\r\n                 * Hash routing:\r\n                 * state.url: /code\r\n                 * state.root.fragment: null\r\n                 */\r\n                const urlContainsCode = this.includesCode(state.url);\r\n                const fragmentContainsCode = !!state.root &&\r\n                    !!state.root.fragment &&\r\n                    this.includesCode(`#${state.root.fragment}`);\r\n                const hashRouting = this.location.prepareExternalUrl(state.url).indexOf('#') === 0;\r\n                // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\r\n                if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\r\n                    this.authService\r\n                        .getLogger()\r\n                        .info('Guard - Hash contains known code response, stopping navigation.');\r\n                    // Path routing (navigate to current path without hash)\r\n                    if (currentPath.indexOf('#') > -1) {\r\n                        return of(this.parseUrl(this.location.path()));\r\n                    }\r\n                    // Hash routing (navigate to root path)\r\n                    return of(this.parseUrl(''));\r\n                }\r\n            }\r\n            return of(true);\r\n        }), catchError((error) => {\r\n            this.authService\r\n                .getLogger()\r\n                .error('Guard - error while logging in, unable to activate');\r\n            this.authService\r\n                .getLogger()\r\n                .errorPii(`Guard - error: ${error.message}`);\r\n            /**\r\n             * If a loginFailedRoute is set, checks to see if state is passed before returning route\r\n             */\r\n            if (this.loginFailedRoute && state) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .verbose('Guard - loginFailedRoute set, redirecting');\r\n                return of(this.loginFailedRoute);\r\n            }\r\n            return of(false);\r\n        }));\r\n    }\r\n    includesCode(path) {\r\n        return ((path.lastIndexOf('/code') > -1 &&\r\n            path.lastIndexOf('/code') === path.length - '/code'.length) || // path.endsWith(\"/code\")\r\n            path.indexOf('#code=') > -1 ||\r\n            path.indexOf('&code=') > -1);\r\n    }\r\n    canActivate(route, state) {\r\n        this.authService.getLogger().verbose('Guard - canActivate');\r\n        return this.activateHelper(state);\r\n    }\r\n    canActivateChild(route, state) {\r\n        this.authService.getLogger().verbose('Guard - canActivateChild');\r\n        return this.activateHelper(state);\r\n    }\r\n    canMatch() {\r\n        this.authService.getLogger().verbose('Guard - canLoad');\r\n        return this.activateHelper();\r\n    }\r\n}\r\nMsalGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalGuard, deps: [{ token: MSAL_GUARD_CONFIG }, { token: MsalBroadcastService }, { token: MsalService }, { token: i3.Location }, { token: i4.Router }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalGuard });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalGuard, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_GUARD_CONFIG]\r\n                }] }, { type: MsalBroadcastService }, { type: MsalService }, { type: i3.Location }, { type: i4.Router }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalInterceptor {\r\n    constructor(msalInterceptorConfig, authService, location, msalBroadcastService, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    document) {\r\n        this.msalInterceptorConfig = msalInterceptorConfig;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this._document = document;\r\n    }\r\n    intercept(req, // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    next\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup &&\r\n            this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError('invalid_interaction_type', 'Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration');\r\n        }\r\n        this.authService.getLogger().verbose('MSAL Interceptor activated');\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Interceptor - no scopes for endpoint');\r\n            return next.handle(req);\r\n        }\r\n        // Sets account as active account or first account\r\n        let account;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Interceptor - active account selected');\r\n            account = this.authService.instance.getActiveAccount();\r\n        }\r\n        else {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Interceptor - no active account, fallback to first account');\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === 'function'\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, {\r\n                account: account,\r\n            })\r\n            : { ...this.msalInterceptorConfig.authRequest, account };\r\n        this.authService\r\n            .getLogger()\r\n            .info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService\r\n            .getLogger()\r\n            .infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n        return this.acquireToken(authRequest, scopes, account).pipe(switchMap((result) => {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Interceptor - setting authorization headers');\r\n            const headers = req.headers.set('Authorization', `Bearer ${result.accessToken}`);\r\n            const requestClone = req.clone({ headers });\r\n            return next.handle(requestClone);\r\n        }));\r\n    }\r\n    /**\r\n     * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @param account Account\r\n     * @returns Authentication result\r\n     */\r\n    acquireToken(authRequest, scopes, account) {\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService\r\n            .acquireTokenSilent({ ...authRequest, scopes, account })\r\n            .pipe(catchError(() => {\r\n            this.authService\r\n                .getLogger()\r\n                .error('Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.');\r\n            return this.msalBroadcastService.inProgress$.pipe(take(1), switchMap((status) => {\r\n                if (status === InteractionStatus.None) {\r\n                    return this.acquireTokenInteractively(authRequest, scopes);\r\n                }\r\n                return this.msalBroadcastService.inProgress$.pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\r\n            }));\r\n        }), switchMap((result) => {\r\n            if (!result.accessToken) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .error('Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.');\r\n                return this.msalBroadcastService.inProgress$.pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\r\n            }\r\n            return of(result);\r\n        }));\r\n    }\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    acquireTokenInteractively(authRequest, scopes) {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService\r\n                .getLogger()\r\n                .verbose('Interceptor - error acquiring token silently, acquiring by popup');\r\n            return this.authService.acquireTokenPopup({ ...authRequest, scopes });\r\n        }\r\n        this.authService\r\n            .getLogger()\r\n            .verbose('Interceptor - error acquiring token silently, acquiring by redirect');\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({\r\n            ...authRequest,\r\n            scopes,\r\n            redirectStartPage,\r\n        });\r\n        return EMPTY;\r\n    }\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    getScopesForEndpoint(endpoint, httpMethod) {\r\n        this.authService\r\n            .getLogger()\r\n            .verbose('Interceptor - getting scopes for endpoint');\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\r\n        if (matchingProtectedResources.absoluteResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\r\n        }\r\n        else if (matchingProtectedResources.relativeResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\r\n        const matchingResources = {\r\n            absoluteResources: [],\r\n            relativeResources: [],\r\n        };\r\n        protectedResourcesEndpoints.forEach((key) => {\r\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\r\n            const normalizedKey = this.location.normalize(key);\r\n            if (StringUtils.matchPattern(normalizedKey, endpoint)) {\r\n                matchingResources.absoluteResources.push(key);\r\n            }\r\n            // Get url components for relative urls\r\n            const absoluteKey = this.getAbsoluteUrl(key);\r\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\r\n            // Normalized key should include query strings if applicable\r\n            const relativeNormalizedKey = keyComponents.QueryString\r\n                ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}`\r\n                : this.location.normalize(keyComponents.AbsolutePath);\r\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\r\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort &&\r\n                StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) &&\r\n                relativeNormalizedKey !== '' &&\r\n                relativeNormalizedKey !== '/*') {\r\n                matchingResources.relativeResources.push(key);\r\n            }\r\n        });\r\n        return matchingResources;\r\n    }\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\r\n    getAbsoluteUrl(url) {\r\n        const link = this._document.createElement('a');\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\r\n    matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\r\n        const allMatchedScopes = [];\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach((matchedEndpoint) => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n            methodAndScopesArray.forEach((entry) => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === 'string') {\r\n                    scopesForEndpoint.push(entry);\r\n                }\r\n                else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method\r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        }\r\n                        else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService\r\n                    .getLogger()\r\n                    .warning('Interceptor - More than 1 matching scopes for endpoint found.');\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nMsalInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalInterceptor, deps: [{ token: MSAL_INTERCEPTOR_CONFIG }, { token: MsalService }, { token: i3.Location }, { token: MsalBroadcastService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MSAL_INTERCEPTOR_CONFIG]\r\n                }] }, { type: MsalService }, { type: i3.Location }, { type: MsalBroadcastService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to\r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\nclass MsalRedirectComponent {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    ngOnInit() {\r\n        this.authService.getLogger().verbose('MsalRedirectComponent activated');\r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n}\r\nMsalRedirectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalRedirectComponent, deps: [{ token: MsalService }], target: i0.ɵɵFactoryTarget.Component });\r\nMsalRedirectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.9\", type: MsalRedirectComponent, selector: \"app-redirect\", ngImport: i0, template: '', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalRedirectComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'app-redirect',\r\n                    template: '',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: MsalService }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalModule {\r\n    static forRoot(msalInstance, guardConfig, interceptorConfig) {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance,\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig,\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig,\r\n                },\r\n                MsalService,\r\n            ],\r\n        };\r\n    }\r\n}\r\nMsalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMsalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalModule, declarations: [MsalRedirectComponent], imports: [CommonModule] });\r\nMsalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalModule, providers: [MsalGuard, MsalBroadcastService], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [MsalRedirectComponent],\r\n                    imports: [CommonModule],\r\n                    providers: [MsalGuard, MsalBroadcastService],\r\n                }]\r\n        }] });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/performance.md\r\n */\r\nclass MsalCustomNavigationClient extends NavigationClient {\r\n    constructor(authService, router, location) {\r\n        super();\r\n        this.authService = authService;\r\n        this.router = router;\r\n        this.location = location;\r\n    }\r\n    async navigateInternal(url, options) {\r\n        this.authService.getLogger().trace('MsalCustomNavigationClient called');\r\n        this.authService\r\n            .getLogger()\r\n            .verbose('MsalCustomNavigationClient - navigating');\r\n        this.authService\r\n            .getLogger()\r\n            .verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n        // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n        if (options.noHistory) {\r\n            return super.navigateInternal(url, options);\r\n        }\r\n        else {\r\n            // Normalizing newUrl if no query string\r\n            const urlComponents = new UrlString(url).getUrlComponents();\r\n            const newUrl = urlComponents.QueryString\r\n                ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}`\r\n                : this.location.normalize(urlComponents.AbsolutePath);\r\n            await this.router.navigateByUrl(newUrl, {\r\n                replaceUrl: options.noHistory,\r\n            });\r\n        }\r\n        return Promise.resolve(options.noHistory);\r\n    }\r\n}\r\nMsalCustomNavigationClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalCustomNavigationClient, deps: [{ token: MsalService }, { token: i4.Router }, { token: i3.Location }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMsalCustomNavigationClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalCustomNavigationClient });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.9\", ngImport: i0, type: MsalCustomNavigationClient, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: MsalService }, { type: i4.Router }, { type: i3.Location }]; } });\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}