{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ThrottlingUtils {\n  /**\n   * Prepares a RequestThumbprint to be stored as a key.\n   * @param thumbprint\n   */\n  static generateThrottlingStorageKey(thumbprint) {\n    return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n  }\n  /**\n   * Performs necessary throttling checks before a network request.\n   * @param cacheManager\n   * @param thumbprint\n   */\n  static preProcess(cacheManager, thumbprint) {\n    const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    const value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  }\n  /**\n   * Performs necessary throttling checks after a network request.\n   * @param cacheManager\n   * @param thumbprint\n   * @param response\n   */\n  static postProcess(cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      const thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  }\n  /**\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\n   * @param response\n   */\n  static checkResponseStatus(response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  }\n  /**\n   * Checks a NetworkResponse object's RetryAfter header\n   * @param response\n   */\n  static checkResponseForRetryAfter(response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  }\n  /**\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n   * @param throttleTime\n   */\n  static calculateThrottleTime(throttleTime) {\n    const time = throttleTime <= 0 ? 0 : throttleTime;\n    const currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  }\n  static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n    const thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    const key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  }\n}\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingConstants","Constants","HeaderNames","ServerError","ThrottlingUtils","generateThrottlingStorageKey","thumbprint","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","errorCodes","join","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ThrottlingUtils {\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint) {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager, thumbprint) {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager, thumbprint, response) {\n        if (ThrottlingUtils.checkResponseStatus(response) ||\n            ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror,\n            };\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n        }\n    }\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response) {\n        return (response.status === 429 ||\n            (response.status >= 500 && response.status < 600));\n    }\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response) {\n        if (response.headers) {\n            return (response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\n                (response.status < 200 || response.status >= 300));\n        }\n        return false;\n    }\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime) {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(currentSeconds +\n            (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds +\n            ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n    }\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n        const thumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n\nexport { ThrottlingUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}