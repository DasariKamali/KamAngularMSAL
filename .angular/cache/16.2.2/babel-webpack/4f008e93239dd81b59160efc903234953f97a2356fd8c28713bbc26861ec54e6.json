{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Validates server consumable params from the \"request\" objects\n */\nclass RequestValidator {\n  /**\n   * Utility to check if the `redirectUri` in the request is a non-null value\n   * @param redirectUri\n   */\n  static validateRedirectUri(redirectUri) {\n    if (!redirectUri) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  }\n  /**\n   * Utility to validate prompt sent by the user in the request\n   * @param prompt\n   */\n  static validatePrompt(prompt) {\n    const promptValues = [];\n    for (const value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  }\n  static validateClaims(claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  }\n  /**\n   * Utility to validate code_challenge and code_challenge_method\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    if (!codeChallenge || !codeChallengeMethod) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  }\n  /**\n   * Utility to validate code_challenge_method\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeMethod(codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  }\n  /**\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n   * @param request\n   */\n  static sanitizeEQParams(eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach((_value, key) => {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    // remove empty string parameters\n    return Object.fromEntries(Object.entries(eQParams).filter(kv => kv[1] !== \"\"));\n  }\n}\nexport { RequestValidator };","map":{"version":3,"names":["ClientConfigurationError","CodeChallengeMethodValues","PromptValue","RequestValidator","validateRedirectUri","redirectUri","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","_value","key","Object","fromEntries","entries","filter","kv"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/request/RequestValidator.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Validates server consumable params from the \"request\" objects\n */\nclass RequestValidator {\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri) {\n        if (!redirectUri) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt) {\n        const promptValues = [];\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n        if (promptValues.indexOf(prompt) < 0) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n    static validateClaims(claims) {\n        try {\n            JSON.parse(claims);\n        }\n        catch (e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n        else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod) {\n        if ([\n            CodeChallengeMethodValues.PLAIN,\n            CodeChallengeMethodValues.S256,\n        ].indexOf(codeChallengeMethod) < 0) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n    /**\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams, queryParams) {\n        if (!eQParams) {\n            return {};\n        }\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((_value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n        // remove empty string parameters\n        return Object.fromEntries(Object.entries(eQParams).filter((kv) => kv[1] !== \"\"));\n    }\n}\n\nexport { RequestValidator };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,wBAAwB,QAAQ,uCAAuC;AAChF,SAASC,yBAAyB,EAAEC,WAAW,QAAQ,wBAAwB;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;EACI,OAAOC,mBAAmBA,CAACC,WAAW,EAAE;IACpC,IAAI,CAACA,WAAW,EAAE;MACd,MAAML,wBAAwB,CAACM,2BAA2B,CAAC,CAAC;IAChE;EACJ;EACA;AACJ;AACA;AACA;EACI,OAAOC,cAAcA,CAACC,MAAM,EAAE;IAC1B,MAAMC,YAAY,GAAG,EAAE;IACvB,KAAK,MAAMC,KAAK,IAAIR,WAAW,EAAE;MAC7BO,YAAY,CAACE,IAAI,CAACT,WAAW,CAACQ,KAAK,CAAC,CAAC;IACzC;IACA,IAAID,YAAY,CAACG,OAAO,CAACJ,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAMR,wBAAwB,CAACa,wBAAwB,CAACL,MAAM,CAAC;IACnE;EACJ;EACA,OAAOM,cAAcA,CAACC,MAAM,EAAE;IAC1B,IAAI;MACAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;IACtB,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAMlB,wBAAwB,CAACmB,+BAA+B,CAAC,CAAC;IACpE;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOC,2BAA2BA,CAACC,aAAa,EAAEC,mBAAmB,EAAE;IACnE,IAAI,CAACD,aAAa,IAAI,CAACC,mBAAmB,EAAE;MACxC,MAAMtB,wBAAwB,CAACuB,qCAAqC,CAAC,CAAC;IAC1E,CAAC,MACI;MACD,IAAI,CAACC,2BAA2B,CAACF,mBAAmB,CAAC;IACzD;EACJ;EACA;AACJ;AACA;AACA;EACI,OAAOE,2BAA2BA,CAACF,mBAAmB,EAAE;IACpD,IAAI,CACArB,yBAAyB,CAACwB,KAAK,EAC/BxB,yBAAyB,CAACyB,IAAI,CACjC,CAACd,OAAO,CAACU,mBAAmB,CAAC,GAAG,CAAC,EAAE;MAChC,MAAMtB,wBAAwB,CAAC2B,qCAAqC,CAAC,CAAC;IAC1E;EACJ;EACA;AACJ;AACA;AACA;EACI,OAAOC,gBAAgBA,CAACC,QAAQ,EAAEC,WAAW,EAAE;IAC3C,IAAI,CAACD,QAAQ,EAAE;MACX,OAAO,CAAC,CAAC;IACb;IACA;IACAC,WAAW,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;MACjC,IAAIJ,QAAQ,CAACI,GAAG,CAAC,EAAE;QACf,OAAOJ,QAAQ,CAACI,GAAG,CAAC;MACxB;IACJ,CAAC,CAAC;IACF;IACA,OAAOC,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACP,QAAQ,CAAC,CAACQ,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;EACpF;AACJ;AAEA,SAASnC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}