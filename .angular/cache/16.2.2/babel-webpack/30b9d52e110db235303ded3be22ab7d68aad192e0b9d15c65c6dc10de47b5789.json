{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nclass PkceGenerator {\n  constructor(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /**\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n   */\n  generateCodes() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const codeVerifier = _this.generateCodeVerifier();\n      const codeChallenge = yield _this.generateCodeChallengeFromVerifier(codeVerifier);\n      return {\n        verifier: codeVerifier,\n        challenge: codeChallenge\n      };\n    })();\n  }\n  /**\n   * Generates a random 32 byte buffer and returns the base64\n   * encoded string to be used as a PKCE Code Verifier\n   */\n  generateCodeVerifier() {\n    try {\n      // Generate random values as utf-8\n      const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw createBrowserAuthError(pkceNotCreated);\n    }\n  }\n  /**\n   * Creates a base64 encoded PKCE Code Challenge string from the\n   * hash created from the PKCE Code Verifier supplied\n   */\n  generateCodeChallengeFromVerifier(pkceCodeVerifier) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = yield _this2.cryptoObj.sha256Digest(pkceCodeVerifier);\n        // encode hash as base64\n        return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n      } catch (e) {\n        throw createBrowserAuthError(pkceNotCreated);\n      }\n    })();\n  }\n}\nexport { PkceGenerator };","map":{"version":3,"names":["_asyncToGenerator","createBrowserAuthError","urlEncodeArr","pkceNotCreated","RANDOM_BYTE_ARR_LENGTH","PkceGenerator","constructor","cryptoObj","generateCodes","_this","codeVerifier","generateCodeVerifier","codeChallenge","generateCodeChallengeFromVerifier","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","e","pkceCodeVerifier","_this2","pkceHashedCodeVerifier","sha256Digest"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nclass PkceGenerator {\n    constructor(cryptoObj) {\n        this.cryptoObj = cryptoObj;\n    }\n    /**\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n     */\n    async generateCodes() {\n        const codeVerifier = this.generateCodeVerifier();\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\n        return {\n            verifier: codeVerifier,\n            challenge: codeChallenge,\n        };\n    }\n    /**\n     * Generates a random 32 byte buffer and returns the base64\n     * encoded string to be used as a PKCE Code Verifier\n     */\n    generateCodeVerifier() {\n        try {\n            // Generate random values as utf-8\n            const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n            this.cryptoObj.getRandomValues(buffer);\n            // encode verifier as base64\n            const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n            return pkceCodeVerifierB64;\n        }\n        catch (e) {\n            throw createBrowserAuthError(pkceNotCreated);\n        }\n    }\n    /**\n     * Creates a base64 encoded PKCE Code Challenge string from the\n     * hash created from the PKCE Code Verifier supplied\n     */\n    async generateCodeChallengeFromVerifier(pkceCodeVerifier) {\n        try {\n            // hashed verifier\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\n            // encode hash as base64\n            return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n        }\n        catch (e) {\n            throw createBrowserAuthError(pkceNotCreated);\n        }\n    }\n}\n\nexport { PkceGenerator };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,sBAAsB,QAAQ,+BAA+B;AACtE,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,cAAc,QAAQ,oCAAoC;;AAEnE;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,EAAE;AACjC;AACA;AACA;AACA,MAAMC,aAAa,CAAC;EAChBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;EACUC,aAAaA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAT,iBAAA;MAClB,MAAMU,YAAY,GAAGD,KAAI,CAACE,oBAAoB,CAAC,CAAC;MAChD,MAAMC,aAAa,SAASH,KAAI,CAACI,iCAAiC,CAACH,YAAY,CAAC;MAChF,OAAO;QACHI,QAAQ,EAAEJ,YAAY;QACtBK,SAAS,EAAEH;MACf,CAAC;IAAC;EACN;EACA;AACJ;AACA;AACA;EACID,oBAAoBA,CAAA,EAAG;IACnB,IAAI;MACA;MACA,MAAMK,MAAM,GAAG,IAAIC,UAAU,CAACb,sBAAsB,CAAC;MACrD,IAAI,CAACG,SAAS,CAACW,eAAe,CAACF,MAAM,CAAC;MACtC;MACA,MAAMG,mBAAmB,GAAGjB,YAAY,CAACc,MAAM,CAAC;MAChD,OAAOG,mBAAmB;IAC9B,CAAC,CACD,OAAOC,CAAC,EAAE;MACN,MAAMnB,sBAAsB,CAACE,cAAc,CAAC;IAChD;EACJ;EACA;AACJ;AACA;AACA;EACUU,iCAAiCA,CAACQ,gBAAgB,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAAtB,iBAAA;MACtD,IAAI;QACA;QACA,MAAMuB,sBAAsB,SAASD,MAAI,CAACf,SAAS,CAACiB,YAAY,CAACH,gBAAgB,CAAC;QAClF;QACA,OAAOnB,YAAY,CAAC,IAAIe,UAAU,CAACM,sBAAsB,CAAC,CAAC;MAC/D,CAAC,CACD,OAAOH,CAAC,EAAE;QACN,MAAMnB,sBAAsB,CAACE,cAAc,CAAC;MAChD;IAAC;EACL;AACJ;AAEA,SAASE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}