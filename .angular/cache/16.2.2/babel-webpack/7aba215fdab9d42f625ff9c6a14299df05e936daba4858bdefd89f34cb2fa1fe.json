{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nclass BaseOperatingContext {\n  constructor(config) {\n    /*\n     * If loaded in an environment where window is not available,\n     * set internal flag to false so that further requests fail.\n     * This is to support server-side rendering environments.\n     */\n    this.browserEnvironment = typeof window !== \"undefined\";\n    this.config = buildConfiguration(config, this.browserEnvironment);\n    this.logger = new Logger(this.config.system.loggerOptions, name, version);\n    this.available = false;\n  }\n  /**\n   * Return the MSAL config\n   * @returns BrowserConfiguration\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Returns the MSAL Logger\n   * @returns Logger\n   */\n  getLogger() {\n    return this.logger;\n  }\n  isAvailable() {\n    return this.available;\n  }\n  isBrowserEnvironment() {\n    return this.browserEnvironment;\n  }\n}\nexport { BaseOperatingContext };","map":{"version":3,"names":["Logger","buildConfiguration","name","version","BaseOperatingContext","constructor","config","browserEnvironment","window","logger","system","loggerOptions","available","getConfig","getLogger","isAvailable","isBrowserEnvironment"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { Logger } from '@azure/msal-common';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nclass BaseOperatingContext {\n    constructor(config) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.browserEnvironment = typeof window !== \"undefined\";\n        this.config = buildConfiguration(config, this.browserEnvironment);\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\n        this.available = false;\n    }\n    /**\n     * Return the MSAL config\n     * @returns BrowserConfiguration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Returns the MSAL Logger\n     * @returns Logger\n     */\n    getLogger() {\n        return this.logger;\n    }\n    isAvailable() {\n        return this.available;\n    }\n    isBrowserEnvironment() {\n        return this.browserEnvironment;\n    }\n}\n\nexport { BaseOperatingContext };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,SAASC,IAAI,EAAEC,OAAO,QAAQ,wBAAwB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACvBC,WAAWA,CAACC,MAAM,EAAE;IAChB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,OAAOC,MAAM,KAAK,WAAW;IACvD,IAAI,CAACF,MAAM,GAAGL,kBAAkB,CAACK,MAAM,EAAE,IAAI,CAACC,kBAAkB,CAAC;IACjE,IAAI,CAACE,MAAM,GAAG,IAAIT,MAAM,CAAC,IAAI,CAACM,MAAM,CAACI,MAAM,CAACC,aAAa,EAAET,IAAI,EAAEC,OAAO,CAAC;IACzE,IAAI,CAACS,SAAS,GAAG,KAAK;EAC1B;EACA;AACJ;AACA;AACA;EACIC,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACP,MAAM;EACtB;EACA;AACJ;AACA;AACA;EACIQ,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACL,MAAM;EACtB;EACAM,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACH,SAAS;EACzB;EACAI,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACT,kBAAkB;EAClC;AACJ;AAEA,SAASH,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}