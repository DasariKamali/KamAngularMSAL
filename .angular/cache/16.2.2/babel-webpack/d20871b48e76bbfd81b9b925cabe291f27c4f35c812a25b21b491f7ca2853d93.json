{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nclass RefreshTokenClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  acquireToken(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n      const atsMeasurement = _this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n      _this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n      const reqTimestamp = TimeUtils.nowSeconds();\n      _this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n      const response = yield _this.executeTokenRequest(request, _this.authority);\n      // Retrieve requestId from response headers\n      const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n      const responseHandler = new ResponseHandler(_this.config.authOptions.clientId, _this.cacheManager, _this.cryptoUtils, _this.logger, _this.config.serializableCache, _this.config.persistencePlugin);\n      responseHandler.validateTokenResponse(response.body);\n      _this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n      return responseHandler.handleServerTokenResponse(response.body, _this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(result => {\n        atsMeasurement?.end({\n          success: true\n        });\n        return result;\n      }).catch(error => {\n        _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n        atsMeasurement?.end({\n          errorCode: error.errorCode,\n          subErrorCode: error.subError,\n          success: false\n        });\n        throw error;\n      });\n    })();\n  }\n  /**\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\n   * @param request\n   */\n  acquireTokenByRefreshToken(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Cannot renew token if no request object is given.\n      if (!request) {\n        throw ClientConfigurationError.createEmptyTokenRequestError();\n      }\n      _this2.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n      // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n      if (!request.account) {\n        throw ClientAuthError.createNoAccountInSilentRequestError();\n      }\n      // try checking if FOCI is enabled for the given application\n      const isFOCI = _this2.cacheManager.isAppMetadataFOCI(request.account.environment);\n      // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n      if (isFOCI) {\n        try {\n          _this2.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n          return _this2.acquireTokenWithCachedRefreshToken(request, true);\n        } catch (e) {\n          const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n          const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n          // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n          if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n            _this2.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n            return _this2.acquireTokenWithCachedRefreshToken(request, false);\n            // throw in all other cases\n          } else {\n            throw e;\n          }\n        }\n      }\n      // fall back to application refresh token acquisition\n      _this2.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n      return _this2.acquireTokenWithCachedRefreshToken(request, false);\n    })();\n  }\n  /**\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n   * @param request\n   */\n  acquireTokenWithCachedRefreshToken(request, foci) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n      // fetches family RT or application RT based on FOCI value\n      const atsMeasurement = _this3.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n      _this3.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n      const refreshToken = _this3.cacheManager.getRefreshToken(request.account, foci);\n      if (!refreshToken) {\n        atsMeasurement?.discard();\n        throw InteractionRequiredAuthError.createNoTokensFoundError();\n      }\n      // attach cached RT size to the current measurement\n      atsMeasurement?.end({\n        success: true\n      });\n      const refreshTokenRequest = {\n        ...request,\n        refreshToken: refreshToken.secret,\n        authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n        ccsCredential: {\n          credential: request.account.homeAccountId,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        }\n      };\n      _this3.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n      return _this3.acquireToken(refreshTokenRequest);\n    })();\n  }\n  /**\n   * Constructs the network message and makes a NW call to the underlying secure token service\n   * @param request\n   * @param authority\n   */\n  executeTokenRequest(request, authority) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n      const acquireTokenMeasurement = _this4.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n      _this4.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n      const queryParametersString = _this4.createTokenQueryParameters(request);\n      const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n      const requestBody = yield _this4.createTokenRequestBody(request);\n      const headers = _this4.createTokenRequestHeaders(request.ccsCredential);\n      const thumbprint = {\n        clientId: _this4.config.authOptions.clientId,\n        authority: authority.canonicalAuthority,\n        scopes: request.scopes,\n        claims: request.claims,\n        authenticationScheme: request.authenticationScheme,\n        resourceRequestMethod: request.resourceRequestMethod,\n        resourceRequestUri: request.resourceRequestUri,\n        shrClaims: request.shrClaims,\n        sshKid: request.sshKid\n      };\n      return _this4.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId).then(result => {\n        acquireTokenMeasurement?.end({\n          success: true\n        });\n        return result;\n      }).catch(error => {\n        acquireTokenMeasurement?.end({\n          success: false\n        });\n        throw error;\n      });\n    })();\n  }\n  /**\n   * Helper function to create the token request body\n   * @param request\n   */\n  createTokenRequestBody(request) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n      const correlationId = request.correlationId;\n      const acquireTokenMeasurement = _this5.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n      const parameterBuilder = new RequestParameterBuilder();\n      parameterBuilder.addClientId(_this5.config.authOptions.clientId);\n      parameterBuilder.addScopes(request.scopes, true, _this5.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n      parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n      parameterBuilder.addClientInfo();\n      parameterBuilder.addLibraryInfo(_this5.config.libraryInfo);\n      parameterBuilder.addApplicationTelemetry(_this5.config.telemetry.application);\n      parameterBuilder.addThrottling();\n      if (_this5.serverTelemetryManager && !isOidcProtocolMode(_this5.config)) {\n        parameterBuilder.addServerTelemetry(_this5.serverTelemetryManager);\n      }\n      parameterBuilder.addCorrelationId(correlationId);\n      parameterBuilder.addRefreshToken(request.refreshToken);\n      if (_this5.config.clientCredentials.clientSecret) {\n        parameterBuilder.addClientSecret(_this5.config.clientCredentials.clientSecret);\n      }\n      if (_this5.config.clientCredentials.clientAssertion) {\n        const clientAssertion = _this5.config.clientCredentials.clientAssertion;\n        parameterBuilder.addClientAssertion(clientAssertion.assertion);\n        parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n      }\n      if (request.authenticationScheme === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(_this5.cryptoUtils, _this5.performanceClient);\n        _this5.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnfData = yield popTokenGenerator.generateCnf(request);\n        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n      } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n        if (request.sshJwk) {\n          parameterBuilder.addSshJwk(request.sshJwk);\n        } else {\n          acquireTokenMeasurement?.end({\n            success: false\n          });\n          throw ClientConfigurationError.createMissingSshJwkError();\n        }\n      }\n      if (!StringUtils.isEmptyObj(request.claims) || _this5.config.authOptions.clientCapabilities && _this5.config.authOptions.clientCapabilities.length > 0) {\n        parameterBuilder.addClaims(request.claims, _this5.config.authOptions.clientCapabilities);\n      }\n      if (_this5.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n        switch (request.ccsCredential.type) {\n          case CcsCredentialType.HOME_ACCOUNT_ID:\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this5.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n            }\n            break;\n          case CcsCredentialType.UPN:\n            parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n            break;\n        }\n      }\n      acquireTokenMeasurement?.end({\n        success: true\n      });\n      return parameterBuilder.createQueryString();\n    })();\n  }\n}\nexport { RefreshTokenClient };","map":{"version":3,"names":["_asyncToGenerator","isOidcProtocolMode","BaseClient","RequestParameterBuilder","GrantType","AuthenticationScheme","HeaderNames","Errors","ResponseHandler","PopTokenGenerator","StringUtils","ClientConfigurationError","ClientAuthError","ServerError","TimeUtils","UrlString","CcsCredentialType","buildClientInfoFromHomeAccountId","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","PerformanceEvents","RefreshTokenClient","constructor","configuration","performanceClient","acquireToken","request","_this","addQueueMeasurement","RefreshTokenClientAcquireToken","correlationId","atsMeasurement","startMeasurement","logger","verbose","reqTimestamp","nowSeconds","setPreQueueTime","RefreshTokenClientExecuteTokenRequest","response","executeTokenRequest","authority","requestId","headers","X_MS_REQUEST_ID","responseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","HandleServerTokenResponse","handleServerTokenResponse","undefined","forceCache","then","result","end","success","catch","error","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","_this2","createEmptyTokenRequestError","RefreshTokenClientAcquireTokenByRefreshToken","account","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","RefreshTokenClientAcquireTokenWithCachedRefreshToken","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","_this3","refreshToken","getRefreshToken","discard","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","HOME_ACCOUNT_ID","_this4","acquireTokenMeasurement","RefreshTokenClientCreateTokenRequestBody","queryParametersString","createTokenQueryParameters","endpoint","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","_this5","BaseClientCreateTokenRequestHeaders","parameterBuilder","addClientId","addScopes","options","OIDCOptions","defaultScopes","addGrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerateCnf","reqCnfData","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","addCcsOid","UPN","addCcsUpn","createQueryString"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nclass RefreshTokenClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n    }\n    async acquireToken(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const response = await this.executeTokenRequest(request, this.authority);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n        return responseHandler\n            .handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId)\n            .then((result) => {\n            atsMeasurement?.end({\n                success: true,\n            });\n            return result;\n        })\n            .catch((error) => {\n            this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n            atsMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        });\n    }\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    async acquireTokenByRefreshToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            }\n            catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError &&\n                    e.errorCode ===\n                        InteractionRequiredAuthErrorMessage.noTokensFoundError\n                            .code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError &&\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                    // throw in all other cases\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n    }\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    async acquireTokenWithCachedRefreshToken(request, foci) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        // fetches family RT or application RT based on FOCI value\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        const refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n        if (!refreshToken) {\n            atsMeasurement?.discard();\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement?.end({\n            success: true,\n        });\n        const refreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            },\n        };\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        return this.acquireToken(refreshTokenRequest);\n    }\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    async executeTokenRequest(request, authority) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await this.createTokenRequestBody(request);\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId)\n            .then((result) => {\n            acquireTokenMeasurement?.end({\n                success: true,\n            });\n            return result;\n        })\n            .catch((error) => {\n            acquireTokenMeasurement?.end({\n                success: false,\n            });\n            throw error;\n        });\n    }\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const correlationId = request.correlationId;\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        parameterBuilder.addCorrelationId(correlationId);\n        parameterBuilder.addRefreshToken(request.refreshToken);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        }\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            }\n            else {\n                acquireTokenMeasurement?.end({\n                    success: false,\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n        if (!StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight &&\n            request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        acquireTokenMeasurement?.end({\n            success: true,\n        });\n        return parameterBuilder.createQueryString();\n    }\n}\n\nexport { RefreshTokenClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}