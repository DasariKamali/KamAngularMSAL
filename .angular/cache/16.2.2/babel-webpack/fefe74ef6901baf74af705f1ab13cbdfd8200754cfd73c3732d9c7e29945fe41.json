{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { Constants } from './Constants.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nclass ProtocolUtils {\n  /**\n   * Appends user state with random guid, or returns random guid.\n   * @param userState\n   * @param randomGuid\n   */\n  static setRequestState(cryptoObj, userState, meta) {\n    const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return userState ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n  }\n  /**\n   * Generates the state value used by the common library.\n   * @param randomGuid\n   * @param cryptoObj\n   */\n  static generateLibraryState(cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n    }\n    // Create a state object containing a unique id and the timestamp of the request creation\n    const stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n    if (meta) {\n      stateObj.meta = meta;\n    }\n    const stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  }\n  /**\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n   * @param state\n   * @param cryptoObj\n   */\n  static parseRequestState(cryptoObj, state) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n    }\n    if (!state) {\n      throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n    }\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      const splitState = state.split(Constants.RESOURCE_DELIM);\n      const libraryState = splitState[0];\n      const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;\n      const libraryStateString = cryptoObj.base64Decode(libraryState);\n      const libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: userState || Constants.EMPTY_STRING,\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  }\n}\nexport { ProtocolUtils };","map":{"version":3,"names":["Constants","ClientAuthError","ProtocolUtils","setRequestState","cryptoObj","userState","meta","libraryState","generateLibraryState","RESOURCE_DELIM","createNoCryptoObjectError","stateObj","id","createNewGuid","stateString","JSON","stringify","base64Encode","parseRequestState","state","createInvalidStateError","splitState","split","length","slice","join","EMPTY_STRING","libraryStateString","base64Decode","libraryStateObj","parse","userRequestState","e"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { Constants } from './Constants.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nclass ProtocolUtils {\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState\n     * @param randomGuid\n     */\n    static setRequestState(cryptoObj, userState, meta) {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return userState\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\n            : libraryState;\n    }\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid\n     * @param cryptoObj\n     */\n    static generateLibraryState(cryptoObj, meta) {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n        }\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj = {\n            id: cryptoObj.createNewGuid(),\n        };\n        if (meta) {\n            stateObj.meta = meta;\n        }\n        const stateString = JSON.stringify(stateObj);\n        return cryptoObj.base64Encode(stateString);\n    }\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state\n     * @param cryptoObj\n     */\n    static parseRequestState(cryptoObj, state) {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n        }\n        if (!state) {\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n        }\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1\n                ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\n                : Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString);\n            return {\n                userRequestState: userState || Constants.EMPTY_STRING,\n                libraryState: libraryStateObj,\n            };\n        }\n        catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n}\n\nexport { ProtocolUtils };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,eAAe,QAAQ,8BAA8B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,CAAC;EAChB;AACJ;AACA;AACA;AACA;EACI,OAAOC,eAAeA,CAACC,SAAS,EAAEC,SAAS,EAAEC,IAAI,EAAE;IAC/C,MAAMC,YAAY,GAAGL,aAAa,CAACM,oBAAoB,CAACJ,SAAS,EAAEE,IAAI,CAAC;IACxE,OAAOD,SAAS,GACT,GAAEE,YAAa,GAAEP,SAAS,CAACS,cAAe,GAAEJ,SAAU,EAAC,GACxDE,YAAY;EACtB;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOC,oBAAoBA,CAACJ,SAAS,EAAEE,IAAI,EAAE;IACzC,IAAI,CAACF,SAAS,EAAE;MACZ,MAAMH,eAAe,CAACS,yBAAyB,CAAC,sBAAsB,CAAC;IAC3E;IACA;IACA,MAAMC,QAAQ,GAAG;MACbC,EAAE,EAAER,SAAS,CAACS,aAAa,CAAC;IAChC,CAAC;IACD,IAAIP,IAAI,EAAE;MACNK,QAAQ,CAACL,IAAI,GAAGA,IAAI;IACxB;IACA,MAAMQ,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC;IAC5C,OAAOP,SAAS,CAACa,YAAY,CAACH,WAAW,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOI,iBAAiBA,CAACd,SAAS,EAAEe,KAAK,EAAE;IACvC,IAAI,CAACf,SAAS,EAAE;MACZ,MAAMH,eAAe,CAACS,yBAAyB,CAAC,mBAAmB,CAAC;IACxE;IACA,IAAI,CAACS,KAAK,EAAE;MACR,MAAMlB,eAAe,CAACmB,uBAAuB,CAACD,KAAK,EAAE,gCAAgC,CAAC;IAC1F;IACA,IAAI;MACA;MACA,MAAME,UAAU,GAAGF,KAAK,CAACG,KAAK,CAACtB,SAAS,CAACS,cAAc,CAAC;MACxD,MAAMF,YAAY,GAAGc,UAAU,CAAC,CAAC,CAAC;MAClC,MAAMhB,SAAS,GAAGgB,UAAU,CAACE,MAAM,GAAG,CAAC,GACjCF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACzB,SAAS,CAACS,cAAc,CAAC,GAClDT,SAAS,CAAC0B,YAAY;MAC5B,MAAMC,kBAAkB,GAAGvB,SAAS,CAACwB,YAAY,CAACrB,YAAY,CAAC;MAC/D,MAAMsB,eAAe,GAAGd,IAAI,CAACe,KAAK,CAACH,kBAAkB,CAAC;MACtD,OAAO;QACHI,gBAAgB,EAAE1B,SAAS,IAAIL,SAAS,CAAC0B,YAAY;QACrDnB,YAAY,EAAEsB;MAClB,CAAC;IACL,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAM/B,eAAe,CAACmB,uBAAuB,CAACD,KAAK,EAAEa,CAAC,CAAC;IAC3D;EACJ;AACJ;AAEA,SAAS9B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}