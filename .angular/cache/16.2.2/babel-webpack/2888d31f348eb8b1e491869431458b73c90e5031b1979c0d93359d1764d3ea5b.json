{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nclass BrowserCrypto {\n  constructor(logger) {\n    this.logger = logger;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else {\n      this.logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n      throw createBrowserAuthError(cryptoNonExistent);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\n   * Check whether browser crypto is available.\n   */\n  hasBrowserCrypto() {\n    return \"crypto\" in window;\n  }\n  /**\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n   * @param dataString\n   */\n  sha256Digest(dataString) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n      // MSR Crypto wants object with name property, instead of string\n      return _this.subtleCrypto.digest({\n        name: S256_HASH_ALG\n      }, data);\n    })();\n  }\n  /**\n   * Populates buffer with cryptographically random values.\n   * @param dataBuffer\n   */\n  getRandomValues(dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  }\n  /**\n   * Generates a keypair based on current keygen algorithm config.\n   * @param extractable\n   * @param usages\n   */\n  generateKeyPair(extractable, usages) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.subtleCrypto.generateKey(_this2.keygenAlgorithmOptions, extractable, usages);\n    })();\n  }\n  /**\n   * Export key as Json Web Key (JWK)\n   * @param key\n   */\n  exportJwk(key) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.subtleCrypto.exportKey(key);\n    })();\n  }\n  /**\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\n   * @param key\n   * @param extractable\n   * @param usages\n   */\n  importJwk(key, extractable, usages) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.subtleCrypto.importKey(key, _this4.keygenAlgorithmOptions, extractable, usages);\n    })();\n  }\n  /**\n   * Signs given data with given key\n   * @param key\n   * @param data\n   */\n  sign(key, data) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.subtleCrypto.sign(_this5.keygenAlgorithmOptions, key, data);\n    })();\n  }\n}\nexport { BrowserCrypto };","map":{"version":3,"names":["_asyncToGenerator","BrowserStringUtils","createBrowserAuthError","ModernBrowserCrypto","cryptoNonExistent","PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","constructor","logger","hasBrowserCrypto","verbose","subtleCrypto","error","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","window","sha256Digest","dataString","_this","data","stringToUtf8Arr","digest","getRandomValues","dataBuffer","generateKeyPair","extractable","usages","_this2","generateKey","exportJwk","key","_this3","exportKey","importJwk","_this4","importKey","sign","_this5"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nclass BrowserCrypto {\n    constructor(logger) {\n        this.logger = logger;\n        if (this.hasBrowserCrypto()) {\n            // Use standard modern web crypto if available\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n            this.subtleCrypto = new ModernBrowserCrypto();\n        }\n        else {\n            this.logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n            throw createBrowserAuthError(cryptoNonExistent);\n        }\n        this.keygenAlgorithmOptions = {\n            name: PKCS1_V15_KEYGEN_ALG,\n            hash: S256_HASH_ALG,\n            modulusLength: MODULUS_LENGTH,\n            publicExponent: PUBLIC_EXPONENT,\n        };\n    }\n    /**\n     * Check whether browser crypto is available.\n     */\n    hasBrowserCrypto() {\n        return \"crypto\" in window;\n    }\n    /**\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n     * @param dataString\n     */\n    async sha256Digest(dataString) {\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return this.subtleCrypto.digest({ name: S256_HASH_ALG }, data);\n    }\n    /**\n     * Populates buffer with cryptographically random values.\n     * @param dataBuffer\n     */\n    getRandomValues(dataBuffer) {\n        return this.subtleCrypto.getRandomValues(dataBuffer);\n    }\n    /**\n     * Generates a keypair based on current keygen algorithm config.\n     * @param extractable\n     * @param usages\n     */\n    async generateKeyPair(extractable, usages) {\n        return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\n    }\n    /**\n     * Export key as Json Web Key (JWK)\n     * @param key\n     */\n    async exportJwk(key) {\n        return this.subtleCrypto.exportKey(key);\n    }\n    /**\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\n     * @param key\n     * @param extractable\n     * @param usages\n     */\n    async importJwk(key, extractable, usages) {\n        return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\n    }\n    /**\n     * Signs given data with given key\n     * @param key\n     * @param data\n     */\n    async sign(key, data) {\n        return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\n    }\n}\n\nexport { BrowserCrypto };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}