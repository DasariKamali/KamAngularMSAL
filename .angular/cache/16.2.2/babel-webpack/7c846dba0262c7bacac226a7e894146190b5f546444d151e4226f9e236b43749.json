{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    try {\n      const result = callback(...args);\n      inProgressEvent?.end({\n        success: true\n      });\n      logger.trace(`Returning result from ${eventName}`);\n      return result;\n    } catch (e) {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    }\n  };\n};\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    return callback(...args).then(response => {\n      logger.trace(`Returning result from ${eventName}`);\n      inProgressEvent?.end({\n        success: true\n      });\n      return response;\n    }).catch(e => {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    });\n  };\n};\nexport { invoke, invokeAsync };","map":{"version":3,"names":["invoke","callback","eventName","logger","telemetryClient","correlationId","args","trace","inProgressEvent","startMeasurement","setPreQueueTime","result","end","success","e","JSON","stringify","invokeAsync","then","response","catch"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n    return (...args) => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true,\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        }\n        catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            }\n            catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false,\n            });\n            throw e;\n        }\n    };\n};\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n    return (...args) => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args)\n            .then((response) => {\n            logger.trace(`Returning result from ${eventName}`);\n            inProgressEvent?.end({\n                success: true,\n            });\n            return response;\n        })\n            .catch((e) => {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            }\n            catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false,\n            });\n            throw e;\n        });\n    };\n};\n\nexport { invoke, invokeAsync };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAGA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,eAAe,EAAEC,aAAa,KAAK;EAC5E,OAAO,CAAC,GAAGC,IAAI,KAAK;IAChBH,MAAM,CAACI,KAAK,CAAE,sBAAqBL,SAAU,EAAC,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CAACP,SAAS,EAAEG,aAAa,CAAC;IACnFD,eAAe,EAAEM,eAAe,CAACR,SAAS,EAAEG,aAAa,CAAC;IAC1D,IAAI;MACA,MAAMM,MAAM,GAAGV,QAAQ,CAAC,GAAGK,IAAI,CAAC;MAChCE,eAAe,EAAEI,GAAG,CAAC;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC;MACFV,MAAM,CAACI,KAAK,CAAE,yBAAwBL,SAAU,EAAC,CAAC;MAClD,OAAOS,MAAM;IACjB,CAAC,CACD,OAAOG,CAAC,EAAE;MACNX,MAAM,CAACI,KAAK,CAAE,qBAAoBL,SAAU,EAAC,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACQ,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MACnC,CAAC,CACD,OAAOA,CAAC,EAAE;QACNX,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MAClD;MACAC,eAAe,EAAEI,GAAG,CAAC;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC;MACF,MAAMC,CAAC;IACX;EACJ,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAGA,CAAChB,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,eAAe,EAAEC,aAAa,KAAK;EACjF,OAAO,CAAC,GAAGC,IAAI,KAAK;IAChBH,MAAM,CAACI,KAAK,CAAE,sBAAqBL,SAAU,EAAC,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CAACP,SAAS,EAAEG,aAAa,CAAC;IACnFD,eAAe,EAAEM,eAAe,CAACR,SAAS,EAAEG,aAAa,CAAC;IAC1D,OAAOJ,QAAQ,CAAC,GAAGK,IAAI,CAAC,CACnBY,IAAI,CAAEC,QAAQ,IAAK;MACpBhB,MAAM,CAACI,KAAK,CAAE,yBAAwBL,SAAU,EAAC,CAAC;MAClDM,eAAe,EAAEI,GAAG,CAAC;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC;MACF,OAAOM,QAAQ;IACnB,CAAC,CAAC,CACGC,KAAK,CAAEN,CAAC,IAAK;MACdX,MAAM,CAACI,KAAK,CAAE,qBAAoBL,SAAU,EAAC,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACQ,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MACnC,CAAC,CACD,OAAOA,CAAC,EAAE;QACNX,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MAClD;MACAC,eAAe,EAAEI,GAAG,CAAC;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC;MACF,MAAMC,CAAC;IACX,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,SAASd,MAAM,EAAEiB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}