{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nfunction extractTokenClaims(encodedToken, base64Decode) {\n  const jswPayload = getJWSPayload(encodedToken);\n  // token will be decoded to get the username\n  try {\n    // base64Decode() should throw an error if there is an issue\n    const base64Decoded = base64Decode(jswPayload);\n    return JSON.parse(base64Decoded);\n  } catch (err) {\n    throw ClientAuthError.createTokenParsingError(err);\n  }\n}\n/**\n * decode a JWT\n *\n * @param authToken\n */\nfunction getJWSPayload(authToken) {\n  if (!authToken) {\n    throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n  }\n  const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n  const matches = tokenPartsRegex.exec(authToken);\n  if (!matches || matches.length < 4) {\n    throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n  }\n  /**\n   * const crackedToken = {\n   *  header: matches[1],\n   *  JWSPayload: matches[2],\n   *  JWSSig: matches[3],\n   * };\n   */\n  return matches[2];\n}\n/**\n * Determine if the token's max_age has transpired\n */\nfunction checkMaxAge(authTime, maxAge) {\n  /*\n   * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n   * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n   * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n   */\n  const fiveMinuteSkew = 300000; // five minutes in milliseconds\n  if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n    throw ClientAuthError.createMaxAgeTranspiredError();\n  }\n}\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };","map":{"version":3,"names":["ClientAuthError","extractTokenClaims","encodedToken","base64Decode","jswPayload","getJWSPayload","base64Decoded","JSON","parse","err","createTokenParsingError","authToken","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","stringify","checkMaxAge","authTime","maxAge","fiveMinuteSkew","Date","now","createMaxAgeTranspiredError"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/account/AuthToken.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nfunction extractTokenClaims(encodedToken, base64Decode) {\n    const jswPayload = getJWSPayload(encodedToken);\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded);\n    }\n    catch (err) {\n        throw ClientAuthError.createTokenParsingError(err);\n    }\n}\n/**\n * decode a JWT\n *\n * @param authToken\n */\nfunction getJWSPayload(authToken) {\n    if (!authToken) {\n        throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n    }\n    /**\n     * const crackedToken = {\n     *  header: matches[1],\n     *  JWSPayload: matches[2],\n     *  JWSSig: matches[3],\n     * };\n     */\n    return matches[2];\n}\n/**\n * Determine if the token's max_age has transpired\n */\nfunction checkMaxAge(authTime, maxAge) {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw ClientAuthError.createMaxAgeTranspiredError();\n    }\n}\n\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,eAAe,QAAQ,8BAA8B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,YAAY,EAAEC,YAAY,EAAE;EACpD,MAAMC,UAAU,GAAGC,aAAa,CAACH,YAAY,CAAC;EAC9C;EACA,IAAI;IACA;IACA,MAAMI,aAAa,GAAGH,YAAY,CAACC,UAAU,CAAC;IAC9C,OAAOG,IAAI,CAACC,KAAK,CAACF,aAAa,CAAC;EACpC,CAAC,CACD,OAAOG,GAAG,EAAE;IACR,MAAMT,eAAe,CAACU,uBAAuB,CAACD,GAAG,CAAC;EACtD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,aAAaA,CAACM,SAAS,EAAE;EAC9B,IAAI,CAACA,SAAS,EAAE;IACZ,MAAMX,eAAe,CAACY,2BAA2B,CAACD,SAAS,CAAC;EAChE;EACA,MAAME,eAAe,GAAG,sCAAsC;EAC9D,MAAMC,OAAO,GAAGD,eAAe,CAACE,IAAI,CAACJ,SAAS,CAAC;EAC/C,IAAI,CAACG,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IAChC,MAAMhB,eAAe,CAACU,uBAAuB,CAAE,6BAA4BH,IAAI,CAACU,SAAS,CAACN,SAAS,CAAE,EAAC,CAAC;EAC3G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,OAAO,CAAC,CAAC,CAAC;AACrB;AACA;AACA;AACA;AACA,SAASI,WAAWA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EACnC;AACJ;AACA;AACA;AACA;EACI,MAAMC,cAAc,GAAG,MAAM,CAAC,CAAC;EAC/B,IAAID,MAAM,KAAK,CAAC,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,cAAc,GAAGF,QAAQ,GAAGC,MAAM,EAAE;IACjE,MAAMpB,eAAe,CAACwB,2BAA2B,CAAC,CAAC;EACvD;AACJ;AAEA,SAASN,WAAW,EAAEjB,kBAAkB,EAAEI,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}