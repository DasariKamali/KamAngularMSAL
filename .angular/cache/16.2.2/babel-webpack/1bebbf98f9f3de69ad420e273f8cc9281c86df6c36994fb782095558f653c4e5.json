{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nclass AuthenticationHeaderParser {\n  constructor(headers) {\n    this.headers = headers;\n  }\n  /**\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n   * @returns\n   */\n  getShrNonce() {\n    // Attempt to parse nonce from Authentiacation-Info\n    const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    }\n    // If neither header is present, throw missing headers error\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  }\n  /**\n   * Parses an HTTP header's challenge set into a key/value map.\n   * @param header\n   * @returns\n   */\n  parseChallenges(header) {\n    const schemeSeparator = header.indexOf(\" \");\n    const challenges = header.substr(schemeSeparator + 1).split(\",\");\n    const challengeMap = {};\n    challenges.forEach(challenge => {\n      const [key, value] = challenge.split(\"=\");\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  }\n}\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["ClientConfigurationError","HeaderNames","Constants","AuthenticationHeaderParser","constructor","headers","getShrNonce","authenticationInfo","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","createInvalidAuthenticationHeaderError","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","createMissingNonceAuthenticationHeadersError","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","key","value","unescape","replace","EMPTY_STRING"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nclass AuthenticationHeaderParser {\n    constructor(headers) {\n        this.headers = headers;\n    }\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns\n     */\n    getShrNonce() {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n        }\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n            if (wwwAuthenticateChallenges.nonce) {\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n        }\n        // If neither header is present, throw missing headers error\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n    }\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header\n     * @returns\n     */\n    parseChallenges(header) {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {};\n        challenges.forEach((challenge) => {\n            const [key, value] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n        });\n        return challengeMap;\n    }\n}\n\nexport { AuthenticationHeaderParser };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,wBAAwB,QAAQ,uCAAuC;AAChF,SAASC,WAAW,EAAEC,SAAS,QAAQ,wBAAwB;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,CAAC;EAC7BC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV;IACA,MAAMC,kBAAkB,GAAG,IAAI,CAACF,OAAO,CAACJ,WAAW,CAACO,kBAAkB,CAAC;IACvE,IAAID,kBAAkB,EAAE;MACpB,MAAME,4BAA4B,GAAG,IAAI,CAACC,eAAe,CAACH,kBAAkB,CAAC;MAC7E,IAAIE,4BAA4B,CAACE,SAAS,EAAE;QACxC,OAAOF,4BAA4B,CAACE,SAAS;MACjD;MACA,MAAMX,wBAAwB,CAACY,sCAAsC,CAACX,WAAW,CAACO,kBAAkB,EAAE,iCAAiC,CAAC;IAC5I;IACA;IACA,MAAMK,eAAe,GAAG,IAAI,CAACR,OAAO,CAACJ,WAAW,CAACa,eAAe,CAAC;IACjE,IAAID,eAAe,EAAE;MACjB,MAAME,yBAAyB,GAAG,IAAI,CAACL,eAAe,CAACG,eAAe,CAAC;MACvE,IAAIE,yBAAyB,CAACC,KAAK,EAAE;QACjC,OAAOD,yBAAyB,CAACC,KAAK;MAC1C;MACA,MAAMhB,wBAAwB,CAACY,sCAAsC,CAACX,WAAW,CAACa,eAAe,EAAE,6BAA6B,CAAC;IACrI;IACA;IACA,MAAMd,wBAAwB,CAACiB,4CAA4C,CAAC,CAAC;EACjF;EACA;AACJ;AACA;AACA;AACA;EACIP,eAAeA,CAACQ,MAAM,EAAE;IACpB,MAAMC,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;IAC3C,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACH,eAAe,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAChE,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvBH,UAAU,CAACI,OAAO,CAAEC,SAAS,IAAK;MAC9B,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;MACzC;MACAC,YAAY,CAACG,GAAG,CAAC,GAAGE,QAAQ,CAACD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE5B,SAAS,CAAC6B,YAAY,CAAC,CAAC;IACjF,CAAC,CAAC;IACF,OAAOP,YAAY;EACvB;AACJ;AAEA,SAASrB,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}