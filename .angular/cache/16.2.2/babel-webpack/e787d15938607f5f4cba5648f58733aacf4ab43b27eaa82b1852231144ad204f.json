{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.mjs';\nimport { databaseUnavailable, databaseNotOpen } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nclass DatabaseStorage {\n  constructor() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\n   * Opens IndexedDB instance.\n   */\n  open() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const openDB = window.indexedDB.open(_this.dbName, _this.version);\n        openDB.addEventListener(\"upgradeneeded\", e => {\n          const event = e;\n          event.target.result.createObjectStore(_this.tableName);\n        });\n        openDB.addEventListener(\"success\", e => {\n          const event = e;\n          _this.db = event.target.result;\n          _this.dbOpen = true;\n          resolve();\n        });\n        openDB.addEventListener(\"error\", () => reject(createBrowserAuthError(databaseUnavailable)));\n      });\n    })();\n  }\n  /**\n   * Closes the connection to IndexedDB database when all pending transactions\n   * complete.\n   */\n  closeConnection() {\n    const db = this.db;\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  }\n  /**\n   * Opens database if it's not already open\n   */\n  validateDbIsOpen() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.dbOpen) {\n        return yield _this2.open();\n      }\n    })();\n  }\n  /**\n   * Retrieves item from IndexedDB instance.\n   * @param key\n   */\n  getItem(key) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.validateDbIsOpen();\n      return new Promise((resolve, reject) => {\n        // TODO: Add timeouts?\n        if (!_this3.db) {\n          return reject(createBrowserAuthError(databaseNotOpen));\n        }\n        const transaction = _this3.db.transaction([_this3.tableName], \"readonly\");\n        const objectStore = transaction.objectStore(_this3.tableName);\n        const dbGet = objectStore.get(key);\n        dbGet.addEventListener(\"success\", e => {\n          const event = e;\n          _this3.closeConnection();\n          resolve(event.target.result);\n        });\n        dbGet.addEventListener(\"error\", e => {\n          _this3.closeConnection();\n          reject(e);\n        });\n      });\n    })();\n  }\n  /**\n   * Adds item to IndexedDB under given key\n   * @param key\n   * @param payload\n   */\n  setItem(key, payload) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.validateDbIsOpen();\n      return new Promise((resolve, reject) => {\n        // TODO: Add timeouts?\n        if (!_this4.db) {\n          return reject(createBrowserAuthError(databaseNotOpen));\n        }\n        const transaction = _this4.db.transaction([_this4.tableName], \"readwrite\");\n        const objectStore = transaction.objectStore(_this4.tableName);\n        const dbPut = objectStore.put(payload, key);\n        dbPut.addEventListener(\"success\", () => {\n          _this4.closeConnection();\n          resolve();\n        });\n        dbPut.addEventListener(\"error\", e => {\n          _this4.closeConnection();\n          reject(e);\n        });\n      });\n    })();\n  }\n  /**\n   * Removes item from IndexedDB under given key\n   * @param key\n   */\n  removeItem(key) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5.validateDbIsOpen();\n      return new Promise((resolve, reject) => {\n        if (!_this5.db) {\n          return reject(createBrowserAuthError(databaseNotOpen));\n        }\n        const transaction = _this5.db.transaction([_this5.tableName], \"readwrite\");\n        const objectStore = transaction.objectStore(_this5.tableName);\n        const dbDelete = objectStore.delete(key);\n        dbDelete.addEventListener(\"success\", () => {\n          _this5.closeConnection();\n          resolve();\n        });\n        dbDelete.addEventListener(\"error\", e => {\n          _this5.closeConnection();\n          reject(e);\n        });\n      });\n    })();\n  }\n  /**\n   * Get all the keys from the storage object as an iterable array of strings.\n   */\n  getKeys() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6.validateDbIsOpen();\n      return new Promise((resolve, reject) => {\n        if (!_this6.db) {\n          return reject(createBrowserAuthError(databaseNotOpen));\n        }\n        const transaction = _this6.db.transaction([_this6.tableName], \"readonly\");\n        const objectStore = transaction.objectStore(_this6.tableName);\n        const dbGetKeys = objectStore.getAllKeys();\n        dbGetKeys.addEventListener(\"success\", e => {\n          const event = e;\n          _this6.closeConnection();\n          resolve(event.target.result);\n        });\n        dbGetKeys.addEventListener(\"error\", e => {\n          _this6.closeConnection();\n          reject(e);\n        });\n      });\n    })();\n  }\n  /**\n   *\n   * Checks whether there is an object under the search key in the object store\n   */\n  containsKey(key) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      yield _this7.validateDbIsOpen();\n      return new Promise((resolve, reject) => {\n        if (!_this7.db) {\n          return reject(createBrowserAuthError(databaseNotOpen));\n        }\n        const transaction = _this7.db.transaction([_this7.tableName], \"readonly\");\n        const objectStore = transaction.objectStore(_this7.tableName);\n        const dbContainsKey = objectStore.count(key);\n        dbContainsKey.addEventListener(\"success\", e => {\n          const event = e;\n          _this7.closeConnection();\n          resolve(event.target.result === 1);\n        });\n        dbContainsKey.addEventListener(\"error\", e => {\n          _this7.closeConnection();\n          reject(e);\n        });\n      });\n    })();\n  }\n  /**\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n   * with IndexedDB database versions.\n   */\n  deleteDatabase() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      // Check if database being deleted exists\n      if (_this8.db && _this8.dbOpen) {\n        _this8.closeConnection();\n      }\n      return new Promise((resolve, reject) => {\n        const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n        deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n        deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\n        deleteDbRequest.addEventListener(\"error\", () => reject(false));\n      });\n    })();\n  }\n}\nexport { DatabaseStorage };","map":{"version":3,"names":["_asyncToGenerator","createBrowserAuthError","DB_NAME","DB_VERSION","DB_TABLE_NAME","databaseUnavailable","databaseNotOpen","DatabaseStorage","constructor","dbName","version","tableName","dbOpen","open","_this","Promise","resolve","reject","openDB","window","indexedDB","addEventListener","e","event","target","result","createObjectStore","db","closeConnection","close","validateDbIsOpen","_this2","getItem","key","_this3","transaction","objectStore","dbGet","get","setItem","payload","_this4","dbPut","put","removeItem","_this5","dbDelete","delete","getKeys","_this6","dbGetKeys","getAllKeys","containsKey","_this7","dbContainsKey","count","deleteDatabase","_this8","deleteDbRequest"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.mjs';\nimport { databaseUnavailable, databaseNotOpen } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nclass DatabaseStorage {\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open() {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e) => {\n                const event = e;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e) => {\n                const event = e;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\", () => reject(createBrowserAuthError(databaseUnavailable)));\n        });\n    }\n    /**\n     * Closes the connection to IndexedDB database when all pending transactions\n     * complete.\n     */\n    closeConnection() {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n    /**\n     * Opens database if it's not already open\n     */\n    async validateDbIsOpen() {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key\n     */\n    async getItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(createBrowserAuthError(databaseNotOpen));\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e) => {\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key\n     * @param payload\n     */\n    async setItem(key, payload) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(createBrowserAuthError(databaseNotOpen));\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbPut = objectStore.put(payload, key);\n            dbPut.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n            dbPut.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject) => {\n            if (!this.db) {\n                return reject(createBrowserAuthError(databaseNotOpen));\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n            dbDelete.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys() {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject) => {\n            if (!this.db) {\n                return reject(createBrowserAuthError(databaseNotOpen));\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e) => {\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\n     *\n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject) => {\n            if (!this.db) {\n                return reject(createBrowserAuthError(databaseNotOpen));\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e) => {\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase() {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n        return new Promise((resolve, reject) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\n        });\n    }\n}\n\nexport { DatabaseStorage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}