{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Constants\n */\nconst BrowserConstants = {\n  /**\n   * Interaction in progress cache value\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\n   * Invalid grant error code\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\n   * Default popup window width\n   */\n  POPUP_WIDTH: 483,\n  /**\n   * Default popup window height\n   */\n  POPUP_HEIGHT: 600,\n  /**\n   * Name of the popup window starts with\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\n   * Default popup monitor poll interval in milliseconds\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\n   * Msal-browser SKU\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n  HandshakeRequest: \"Handshake\",\n  HandshakeResponse: \"HandshakeResponse\",\n  GetToken: \"GetToken\",\n  Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n  LocalStorage: \"localStorage\",\n  SessionStorage: \"sessionStorage\",\n  MemoryStorage: \"memoryStorage\"\n};\n/**\n * HTTP Request types supported by MSAL.\n */\nconst HTTP_REQUEST_TYPE = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nconst TemporaryCacheKeys = {\n  AUTHORITY: \"authority\",\n  ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n  SESSION_STATE: \"session.state\",\n  REQUEST_STATE: \"request.state\",\n  NONCE_IDTOKEN: \"nonce.id_token\",\n  ORIGIN_URI: \"request.origin\",\n  RENEW_STATUS: \"token.renew.status\",\n  URL_HASH: \"urlHash\",\n  REQUEST_PARAMS: \"request.params\",\n  SCOPES: \"scopes\",\n  INTERACTION_STATUS_KEY: \"interaction.status\",\n  CCS_CREDENTIAL: \"ccs.credential\",\n  CORRELATION_ID: \"request.correlationId\",\n  NATIVE_REQUEST: \"request.native\",\n  REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n  ACCOUNT_KEYS: \"msal.account.keys\",\n  TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\n * Cache keys stored in-memory\n */\nconst InMemoryCacheKeys = {\n  WRAPPER_SKU: \"wrapper.sku\",\n  WRAPPER_VER: \"wrapper.version\"\n};\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nconst ApiId = {\n  acquireTokenRedirect: 861,\n  acquireTokenPopup: 862,\n  ssoSilent: 863,\n  acquireTokenSilent_authCode: 864,\n  handleRedirectPromise: 865,\n  acquireTokenByCode: 866,\n  acquireTokenSilent_silentFlow: 61,\n  logout: 961,\n  logoutPopup: 962\n};\n/*\n * Interaction type of the API - used for state and telemetry\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nconst InteractionStatus = {\n  /**\n   * Initial status before interaction occurs\n   */\n  Startup: \"startup\",\n  /**\n   * Status set when all login calls occuring\n   */\n  Login: \"login\",\n  /**\n   * Status set when logout call occuring\n   */\n  Logout: \"logout\",\n  /**\n   * Status set for acquireToken calls\n   */\n  AcquireToken: \"acquireToken\",\n  /**\n   * Status set for ssoSilent calls\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\n   * Status set when handleRedirect in progress\n   */\n  HandleRedirect: \"handleRedirect\",\n  /**\n   * Status set when interaction is complete\n   */\n  None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n  React: \"@azure/msal-react\",\n  Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n  /*\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n   */\n  Default: 0,\n  /*\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n   * refresh tokens.\n   */\n  AccessToken: 1,\n  /*\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n   * will not be renewed and acquireTokenSilent will fail.\n   */\n  AccessTokenAndRefreshToken: 2,\n  /*\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n   * renewed and acquireTokenSilent will fail.\n   */\n  RefreshToken: 3,\n  /*\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n   * setting \"forceRefresh: true\".\n   */\n  RefreshTokenAndNetwork: 4,\n  /*\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n   * always fail if 3rd party cookies are blocked by the browser.\n   */\n  Skip: 5\n};\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };","map":{"version":3,"names":["OIDC_DEFAULT_SCOPES","BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","DEFAULT_POLL_INTERVAL_MS","MSAL_SKU","NativeConstants","CHANNEL_ID","PREFERRED_EXTENSION_ID","MATS_TELEMETRY","NativeExtensionMethod","HandshakeRequest","HandshakeResponse","GetToken","Response","BrowserCacheLocation","LocalStorage","SessionStorage","MemoryStorage","HTTP_REQUEST_TYPE","GET","POST","TemporaryCacheKeys","AUTHORITY","ACQUIRE_TOKEN_ACCOUNT","SESSION_STATE","REQUEST_STATE","NONCE_IDTOKEN","ORIGIN_URI","RENEW_STATUS","URL_HASH","REQUEST_PARAMS","SCOPES","INTERACTION_STATUS_KEY","CCS_CREDENTIAL","CORRELATION_ID","NATIVE_REQUEST","REDIRECT_CONTEXT","StaticCacheKeys","ACCOUNT_KEYS","TOKEN_KEYS","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","ApiId","acquireTokenRedirect","acquireTokenPopup","ssoSilent","acquireTokenSilent_authCode","handleRedirectPromise","acquireTokenByCode","acquireTokenSilent_silentFlow","logout","logoutPopup","InteractionType","InteractionStatus","Startup","Login","Logout","AcquireToken","SsoSilent","HandleRedirect","None","DEFAULT_REQUEST","scopes","KEY_FORMAT_JWK","WrapperSKU","React","Angular","DB_NAME","DB_VERSION","DB_TABLE_NAME","CacheLookupPolicy","Default","AccessToken","AccessTokenAndRefreshToken","RefreshToken","RefreshTokenAndNetwork","Skip"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Constants\n */\nconst BrowserConstants = {\n    /**\n     * Interaction in progress cache value\n     */\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\n     * Invalid grant error code\n     */\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\n     * Default popup window width\n     */\n    POPUP_WIDTH: 483,\n    /**\n     * Default popup window height\n     */\n    POPUP_HEIGHT: 600,\n    /**\n     * Name of the popup window starts with\n     */\n    POPUP_NAME_PREFIX: \"msal\",\n    /**\n     * Default popup monitor poll interval in milliseconds\n     */\n    DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\n     * Msal-browser SKU\n     */\n    MSAL_SKU: \"msal.js.browser\",\n};\nconst NativeConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\",\n};\nconst NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\",\n};\nconst BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\",\n};\n/**\n * HTTP Request types supported by MSAL.\n */\nconst HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\",\n};\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nconst TemporaryCacheKeys = {\n    AUTHORITY: \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n    SESSION_STATE: \"session.state\",\n    REQUEST_STATE: \"request.state\",\n    NONCE_IDTOKEN: \"nonce.id_token\",\n    ORIGIN_URI: \"request.origin\",\n    RENEW_STATUS: \"token.renew.status\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    SCOPES: \"scopes\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    CCS_CREDENTIAL: \"ccs.credential\",\n    CORRELATION_ID: \"request.correlationId\",\n    NATIVE_REQUEST: \"request.native\",\n    REDIRECT_CONTEXT: \"request.redirect.context\",\n};\nconst StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\",\n};\n/**\n * Cache keys stored in-memory\n */\nconst InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\",\n};\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nconst ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962,\n};\n/*\n * Interaction type of the API - used for state and telemetry\n */\nvar InteractionType;\n(function (InteractionType) {\n    InteractionType[\"Redirect\"] = \"redirect\";\n    InteractionType[\"Popup\"] = \"popup\";\n    InteractionType[\"Silent\"] = \"silent\";\n    InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nconst InteractionStatus = {\n    /**\n     * Initial status before interaction occurs\n     */\n    Startup: \"startup\",\n    /**\n     * Status set when all login calls occuring\n     */\n    Login: \"login\",\n    /**\n     * Status set when logout call occuring\n     */\n    Logout: \"logout\",\n    /**\n     * Status set for acquireToken calls\n     */\n    AcquireToken: \"acquireToken\",\n    /**\n     * Status set for ssoSilent calls\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * Status set when handleRedirect in progress\n     */\n    HandleRedirect: \"handleRedirect\",\n    /**\n     * Status set when interaction is complete\n     */\n    None: \"none\",\n};\nconst DEFAULT_REQUEST = {\n    scopes: OIDC_DEFAULT_SCOPES,\n};\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\",\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n     */\n    Default: 0,\n    /*\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n     * refresh tokens.\n     */\n    AccessToken: 1,\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n     * will not be renewed and acquireTokenSilent will fail.\n     */\n    AccessTokenAndRefreshToken: 2,\n    /*\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n     * renewed and acquireTokenSilent will fail.\n     */\n    RefreshToken: 3,\n    /*\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n     * setting \"forceRefresh: true\".\n     */\n    RefreshTokenAndNetwork: 4,\n    /*\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n     * always fail if 3rd party cookies are blocked by the browser.\n     */\n    Skip: 5,\n};\n\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}