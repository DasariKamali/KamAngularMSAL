{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates default headers for requests to token endpoint\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\n   * Http post to token endpoint\n   * @param tokenEndpoint\n   * @param queryString\n   * @param headers\n   * @param thumbprint\n   */\n  executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient?.addQueueMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n      const response = yield _this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n        body: queryString,\n        headers: headers\n      });\n      _this.performanceClient?.addFields({\n        refreshTokenSize: response.body.refresh_token?.length || 0,\n        httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\"\n      }, correlationId);\n      if (_this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n        // Telemetry data successfully logged by server, clear Telemetry cache\n        _this.config.serverTelemetryManager.clearTelemetryCache();\n      }\n      return response;\n    })();\n  }\n  /**\n   * Updates the authority object of the client. Endpoint discovery must be completed.\n   * @param updatedAuthority\n   */\n  updateAuthority(updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n    this.authority = updatedAuthority;\n  }\n  /**\n   * Creates query string for the /token request\n   * @param request\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["_asyncToGenerator","buildClientConfiguration","NetworkManager","Logger","HeaderNames","Constants","name","version","ClientAuthError","CcsCredentialType","buildClientInfoFromHomeAccountId","RequestParameterBuilder","PerformanceEvents","BaseClient","constructor","configuration","performanceClient","config","logger","loggerOptions","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","CONTENT_TYPE","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","HOME_ACCOUNT_ID","clientInfo","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","correlationId","_this","addQueueMeasurement","BaseClientCreateTokenRequestHeaders","response","sendPostRequest","body","addFields","refreshTokenSize","refresh_token","length","httpVerToken","X_MS_HTTP_VERSION","status","clearTelemetryCache","updateAuthority","updatedAuthority","discoveryComplete","createEndpointDiscoveryIncompleteError","createTokenQueryParameters","request","parameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/client/BaseClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n    constructor(configuration, performanceClient) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    createTokenRequestHeaders(ccsCred) {\n        const headers = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n        const response = await this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers });\n        this.performanceClient?.addFields({\n            refreshTokenSize: response.body.refresh_token?.length || 0,\n            httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n        }, correlationId);\n        if (this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n        return response;\n    }\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    updateAuthority(updatedAuthority) {\n        if (!updatedAuthority.discoveryComplete()) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n        }\n        this.authority = updatedAuthority;\n    }\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request) {\n        const parameterBuilder = new RequestParameterBuilder();\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n\nexport { BaseClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}