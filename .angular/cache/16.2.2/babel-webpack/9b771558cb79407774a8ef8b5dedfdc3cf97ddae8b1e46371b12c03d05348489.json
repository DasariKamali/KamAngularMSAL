{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseClient } from './BaseClient.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { RefreshTokenClient } from './RefreshTokenClient.mjs';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass SilentFlowClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  /**\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n   * the given token and returns the renewed token\n   * @param request\n   */\n  acquireToken(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        return yield _this.acquireCachedToken(request);\n      } catch (e) {\n        if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n          const refreshTokenClient = new RefreshTokenClient(_this.config, _this.performanceClient);\n          return refreshTokenClient.acquireTokenByRefreshToken(request);\n        } else {\n          throw e;\n        }\n      }\n    })();\n  }\n  /**\n   * Retrieves token from cache or throws an error if it must be refreshed.\n   * @param request\n   */\n  acquireCachedToken(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Cannot renew token if no request object is given.\n      if (!request) {\n        throw ClientConfigurationError.createEmptyTokenRequestError();\n      }\n      if (request.forceRefresh) {\n        // Must refresh due to present force_refresh flag.\n        _this2.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n        _this2.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n        throw ClientAuthError.createRefreshRequiredError();\n      } else if (!_this2.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n        // Must refresh due to request parameters.\n        _this2.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n        throw ClientAuthError.createRefreshRequiredError();\n      }\n      // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n      if (!request.account) {\n        throw ClientAuthError.createNoAccountInSilentRequestError();\n      }\n      const environment = request.authority || _this2.authority.getPreferredCache();\n      const cacheRecord = _this2.cacheManager.readCacheRecord(request.account, request, environment);\n      if (!cacheRecord.accessToken) {\n        // Must refresh due to non-existent access_token.\n        _this2.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n        _this2.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n        throw ClientAuthError.createRefreshRequiredError();\n      } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, _this2.config.systemOptions.tokenRenewalOffsetSeconds)) {\n        // Must refresh due to expired access_token.\n        _this2.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n        _this2.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${_this2.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n        throw ClientAuthError.createRefreshRequiredError();\n      } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n        // Must refresh due to the refresh_in value.\n        _this2.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n        _this2.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n        throw ClientAuthError.createRefreshRequiredError();\n      }\n      if (_this2.config.serverTelemetryManager) {\n        _this2.config.serverTelemetryManager.incrementCacheHits();\n      }\n      return yield _this2.generateResultFromCacheRecord(cacheRecord, request);\n    })();\n  }\n  /**\n   * Helper function to build response object from the CacheRecord\n   * @param cacheRecord\n   */\n  generateResultFromCacheRecord(cacheRecord, request) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let idTokenClaims;\n      if (cacheRecord.idToken) {\n        idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, _this3.config.cryptoInterface.base64Decode);\n      }\n      // token max_age check\n      if (request.maxAge || request.maxAge === 0) {\n        const authTime = idTokenClaims?.auth_time;\n        if (!authTime) {\n          throw ClientAuthError.createAuthTimeNotFoundError();\n        }\n        checkMaxAge(authTime, request.maxAge);\n      }\n      return yield ResponseHandler.generateAuthenticationResult(_this3.cryptoUtils, _this3.authority, cacheRecord, true, request, idTokenClaims);\n    })();\n  }\n}\nexport { SilentFlowClient };","map":{"version":3,"names":["_asyncToGenerator","BaseClient","TimeUtils","RefreshTokenClient","ClientAuthError","ClientAuthErrorMessage","ClientConfigurationError","ResponseHandler","CacheOutcome","StringUtils","extractTokenClaims","checkMaxAge","SilentFlowClient","constructor","configuration","performanceClient","acquireToken","request","_this","acquireCachedToken","e","errorCode","tokenRefreshRequired","code","refreshTokenClient","config","acquireTokenByRefreshToken","_this2","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","cacheOptions","claimsBasedCachingEnabled","isEmptyObj","claims","account","createNoAccountInSilentRequestError","environment","authority","getPreferredCache","cacheRecord","cacheManager","readCacheRecord","accessToken","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","_this3","idTokenClaims","idToken","secret","cryptoInterface","base64Decode","maxAge","authTime","auth_time","createAuthTimeNotFoundError","generateAuthenticationResult","cryptoUtils"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { RefreshTokenClient } from './RefreshTokenClient.mjs';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass SilentFlowClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n    }\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(request) {\n        try {\n            return await this.acquireCachedToken(request);\n        }\n        catch (e) {\n            if (e instanceof ClientAuthError &&\n                e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n        if (request.forceRefresh) {\n            // Must refresh due to present force_refresh flag.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n        else if (!this.config.cacheOptions.claimsBasedCachingEnabled &&\n            !StringUtils.isEmptyObj(request.claims)) {\n            // Must refresh due to request parameters.\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        const environment = request.authority || this.authority.getPreferredCache();\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n        if (!cacheRecord.accessToken) {\n            // Must refresh due to non-existent access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // Must refresh due to expired access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n        else if (cacheRecord.accessToken.refreshOn &&\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n            // Must refresh due to the refresh_in value.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\n    }\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    async generateResultFromCacheRecord(cacheRecord, request) {\n        let idTokenClaims;\n        if (cacheRecord.idToken) {\n            idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n        }\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n            }\n            checkMaxAge(authTime, request.maxAge);\n        }\n        return await ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n    }\n}\n\nexport { SilentFlowClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}