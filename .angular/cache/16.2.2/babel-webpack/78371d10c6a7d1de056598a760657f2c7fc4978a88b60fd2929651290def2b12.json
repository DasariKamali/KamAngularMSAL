{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n  constructor() {\n    this.parameters = new Map();\n  }\n  /**\n   * add response_type = code\n   */\n  addResponseTypeCode() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  }\n  /**\n   * add response_type = token id_token\n   */\n  addResponseTypeForTokenAndIdToken() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n  }\n  /**\n   * add response_mode. defaults to query.\n   * @param responseMode\n   */\n  addResponseMode(responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  }\n  /**\n   * Add flag to indicate STS should attempt to use WAM if available\n   */\n  addNativeBroker() {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  }\n  /**\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n   * @param scopeSet\n   * @param addOidcScopes\n   */\n  addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n      defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  }\n  /**\n   * add clientId\n   * @param clientId\n   */\n  addClientId(clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  }\n  /**\n   * add redirect_uri\n   * @param redirectUri\n   */\n  addRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add post logout redirectUri\n   * @param redirectUri\n   */\n  addPostLogoutRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add id_token_hint to logout request\n   * @param idTokenHint\n   */\n  addIdTokenHint(idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  }\n  /**\n   * add domain_hint\n   * @param domainHint\n   */\n  addDomainHint(domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  }\n  /**\n   * add login_hint\n   * @param loginHint\n   */\n  addLoginHint(loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\n   * @param loginHint\n   */\n  addCcsUpn(loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for account object\n   * @param loginHint\n   */\n  addCcsOid(clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n  }\n  /**\n   * add sid\n   * @param sid\n   */\n  addSid(sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  }\n  /**\n   * add claims\n   * @param claims\n   */\n  addClaims(claims, clientCapabilities) {\n    const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  }\n  /**\n   * add correlationId\n   * @param correlationId\n   */\n  addCorrelationId(correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  }\n  /**\n   * add library info query params\n   * @param libraryInfo\n   */\n  addLibraryInfo(libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  }\n  /**\n   * Add client telemetry parameters\n   * @param appTelemetry\n   */\n  addApplicationTelemetry(appTelemetry) {\n    if (appTelemetry?.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry?.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  }\n  /**\n   * add prompt\n   * @param prompt\n   */\n  addPrompt(prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n  }\n  /**\n   * add state\n   * @param state\n   */\n  addState(state) {\n    if (state) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  }\n  /**\n   * add nonce\n   * @param nonce\n   */\n  addNonce(nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  }\n  /**\n   * add code_challenge and code_challenge_method\n   * - throw if either of them are not passed\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addAuthorizationCode(code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addDeviceCode(code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `refreshToken` passed by the user\n   * @param refreshToken\n   */\n  addRefreshToken(refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  }\n  /**\n   * add the `code_verifier` passed by the user to exchange for a token\n   * @param codeVerifier\n   */\n  addCodeVerifier(codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  }\n  /**\n   * add client_secret\n   * @param clientSecret\n   */\n  addClientSecret(clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  }\n  /**\n   * add clientAssertion for confidential client flows\n   * @param clientAssertion\n   */\n  addClientAssertion(clientAssertion) {\n    if (clientAssertion) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  }\n  /**\n   * add clientAssertionType for confidential client flows\n   * @param clientAssertionType\n   */\n  addClientAssertionType(clientAssertionType) {\n    if (clientAssertionType) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  }\n  /**\n   * add OBO assertion for confidential client flows\n   * @param clientAssertion\n   */\n  addOboAssertion(oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addRequestTokenUse(tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addGrantType(grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  }\n  /**\n   * add client info\n   *\n   */\n  addClientInfo() {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  }\n  /**\n   * add extraQueryParams\n   * @param eQParams\n   */\n  addExtraQueryParameters(eQParams) {\n    const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(key => {\n      this.parameters.set(key, eQParams[key]);\n    });\n  }\n  addClientCapabilitiesToClaims(claims, clientCapabilities) {\n    let mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  }\n  /**\n   * adds `username` for Password Grant flow\n   * @param username\n   */\n  addUsername(username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  }\n  /**\n   * adds `password` for Password Grant flow\n   * @param password\n   */\n  addPassword(password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  }\n  /**\n   * add pop_jwk to query params\n   * @param cnfString\n   */\n  addPopToken(cnfString) {\n    if (cnfString) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  }\n  /**\n   * add SSH JWK and key ID to query params\n   */\n  addSshJwk(sshJwkString) {\n    if (sshJwkString) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  }\n  /**\n   * add server telemetry fields\n   * @param serverTelemetryManager\n   */\n  addServerTelemetry(serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  }\n  /**\n   * Adds parameter that indicates to the server that throttling is supported\n   */\n  addThrottling() {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  }\n  /**\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n   */\n  addLogoutHint(logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  }\n  /**\n   * Utility to create a URL from the params map\n   */\n  createQueryString() {\n    const queryParameterArray = new Array();\n    this.parameters.forEach((value, key) => {\n      queryParameterArray.push(`${key}=${value}`);\n    });\n    return queryParameterArray.join(\"&\");\n  }\n}\nexport { RequestParameterBuilder };","map":{"version":3,"names":["AADServerParamKeys","Constants","ResponseMode","OIDC_DEFAULT_SCOPES","SSOTypes","HeaderNames","CLIENT_INFO","ClaimsRequestKeys","PasswordGrantConstants","AuthenticationScheme","ThrottlingConstants","ScopeSet","ClientConfigurationError","RequestValidator","RequestParameterBuilder","constructor","parameters","Map","addResponseTypeCode","set","RESPONSE_TYPE","encodeURIComponent","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","defaultScopes","includes","push","requestScopes","scopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","addExtraQueryParameters","eQParams","sanitizedEQParams","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","createQueryString","queryParameterArray","Array","value","join"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n    constructor() {\n        this.parameters = new Map();\n    }\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode() {\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n    }\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken() {\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n    }\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode) {\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n    }\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker() {\n        this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n    }\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (addOidcScopes &&\n            !defaultScopes.includes(\"openid\") &&\n            !scopes.includes(\"openid\")) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes\n            ? [...(scopes || []), ...defaultScopes]\n            : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId) {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri) {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri) {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint) {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint) {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint) {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint) {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo) {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid) {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims, clientCapabilities) {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId) {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo) {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry) {\n        if (appTelemetry?.appName) {\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n        }\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt) {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n    /**\n     * add state\n     * @param state\n     */\n    addState(state) {\n        if (state) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce) {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        }\n        else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code) {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code) {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken) {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier) {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret) {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion) {\n        if (clientAssertion) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType) {\n        if (clientAssertionType) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion) {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse) {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType) {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n    /**\n     * add client info\n     *\n     */\n    addClientInfo() {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n    /**\n     * add extraQueryParams\n     * @param eQParams\n     */\n    addExtraQueryParameters(eQParams) {\n        const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n        Object.keys(sanitizedEQParams).forEach((key) => {\n            this.parameters.set(key, eQParams[key]);\n        });\n    }\n    addClientCapabilitiesToClaims(claims, clientCapabilities) {\n        let mergedClaims;\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        }\n        else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            }\n            catch (e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities,\n            };\n        }\n        return JSON.stringify(mergedClaims);\n    }\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username) {\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password) {\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString) {\n        if (cnfString) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString) {\n        if (sshJwkString) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager) {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling() {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint) {\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString() {\n        const queryParameterArray = new Array();\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n        return queryParameterArray.join(\"&\");\n    }\n}\n\nexport { RequestParameterBuilder };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}