{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AuthError } from '../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n  createNewGuid: () => {\n    const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Decode: () => {\n    const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Encode: () => {\n    const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  generatePkceCodes() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  getPublicKeyThumbprint() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  removeTokenBindingKey() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  clearKeystore() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  signJwt() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  },\n  hashString() {\n    return _asyncToGenerator(function* () {\n      const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n      throw AuthError.createUnexpectedError(notImplErr);\n    })();\n  }\n};\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };","map":{"version":3,"names":["_asyncToGenerator","AuthError","DEFAULT_CRYPTO_IMPLEMENTATION","createNewGuid","notImplErr","createUnexpectedError","base64Decode","base64Encode","generatePkceCodes","getPublicKeyThumbprint","removeTokenBindingKey","clearKeystore","signJwt","hashString"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { AuthError } from '../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n    createNewGuid: () => {\n        const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Decode: () => {\n        const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Encode: () => {\n        const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async generatePkceCodes() {\n        const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async getPublicKeyThumbprint() {\n        const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async removeTokenBindingKey() {\n        const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async clearKeystore() {\n        const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async signJwt() {\n        const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async hashString() {\n        const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n};\n\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,SAAS,QAAQ,wBAAwB;;AAElD;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,GAAG;EAClCC,aAAa,EAAEA,CAAA,KAAM;IACjB,MAAMC,UAAU,GAAG,6DAA6D;IAChF,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;EACrD,CAAC;EACDE,YAAY,EAAEA,CAAA,KAAM;IAChB,MAAMF,UAAU,GAAG,4DAA4D;IAC/E,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;EACrD,CAAC;EACDG,YAAY,EAAEA,CAAA,KAAM;IAChB,MAAMH,UAAU,GAAG,4DAA4D;IAC/E,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;EACrD,CAAC;EACKI,iBAAiBA,CAAA,EAAG;IAAA,OAAAR,iBAAA;MACtB,MAAMI,UAAU,GAAG,iEAAiE;MACpF,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKK,sBAAsBA,CAAA,EAAG;IAAA,OAAAT,iBAAA;MAC3B,MAAMI,UAAU,GAAG,sEAAsE;MACzF,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKM,qBAAqBA,CAAA,EAAG;IAAA,OAAAV,iBAAA;MAC1B,MAAMI,UAAU,GAAG,qEAAqE;MACxF,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKO,aAAaA,CAAA,EAAG;IAAA,OAAAX,iBAAA;MAClB,MAAMI,UAAU,GAAG,6DAA6D;MAChF,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKQ,OAAOA,CAAA,EAAG;IAAA,OAAAZ,iBAAA;MACZ,MAAMI,UAAU,GAAG,uDAAuD;MAC1E,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD,CAAC;EACKS,UAAUA,CAAA,EAAG;IAAA,OAAAb,iBAAA;MACf,MAAMI,UAAU,GAAG,0DAA0D;MAC7E,MAAMH,SAAS,CAACI,qBAAqB,CAACD,UAAU,CAAC;IAAC;EACtD;AACJ,CAAC;AAED,SAASF,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}