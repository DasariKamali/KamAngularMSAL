{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientAuthError } from './ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".'\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  },\n  invalidAzureCloudInstance: {\n    code: \"invalid_azure_cloud_instance\",\n    desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n  },\n  missingSshJwk: {\n    code: \"missing_ssh_jwk\",\n    desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n  },\n  missingSshKid: {\n    code: \"missing_ssh_kid\",\n    desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n  },\n  missingNonceAuthenticationHeader: {\n    code: \"missing_nonce_authentication_header\",\n    desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n  },\n  invalidAuthenticationHeader: {\n    code: \"invalid_authentication_header\",\n    desc: \"Invalid authentication header provided\"\n  },\n  cannotSetOIDCOptions: {\n    code: \"cannot_set_OIDCOptions\",\n    desc: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\"\n  },\n  cannotAllowNativeBroker: {\n    code: \"cannot_allow_native_broker\",\n    desc: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\"\n  },\n  authorityMismatch: {\n    code: \"authority_mismatch\",\n    desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n  }\n};\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nclass ClientConfigurationError extends ClientAuthError {\n  constructor(errorCode, errorMessage) {\n    super(errorCode, errorMessage);\n    this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n  }\n  /**\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\n   */\n  static createRedirectUriEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  }\n  /**\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n   */\n  static createPostLogoutRedirectUriEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  }\n  /**\n   * Creates an error thrown when the claims request could not be successfully parsed\n   */\n  static createClaimsRequestParsingError(claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n  }\n  /**\n   * Creates an error thrown if authority uri is given an insecure protocol.\n   * @param urlString\n   */\n  static createInsecureAuthorityUriError(urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n  }\n  /**\n   * Creates an error thrown if URL string does not parse into separate segments.\n   * @param urlString\n   */\n  static createUrlParseError(urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n  }\n  /**\n   * Creates an error thrown if URL string is empty or null.\n   * @param urlString\n   */\n  static createUrlEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  }\n  /**\n   * Error thrown when scopes are empty.\n   * @param scopesValue\n   */\n  static createEmptyScopesArrayError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n  }\n  /**\n   * Error thrown when client id scope is not provided as single scope.\n   * @param inputScopes\n   */\n  static createClientIdSingleScopeError(inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n  }\n  /**\n   * Error thrown when prompt is not an allowed type.\n   * @param promptValue\n   */\n  static createInvalidPromptError(promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n  }\n  /**\n   * Creates error thrown when claims parameter is not a stringified JSON object\n   */\n  static createInvalidClaimsRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  }\n  /**\n   * Throws error when token request is empty and nothing cached in storage.\n   */\n  static createEmptyLogoutRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  }\n  /**\n   * Throws error when token request is empty and nothing cached in storage.\n   */\n  static createEmptyTokenRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  }\n  /**\n   * Throws error when an invalid code_challenge_method is passed by the user\n   */\n  static createInvalidCodeChallengeMethodError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  }\n  /**\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\n   */\n  static createInvalidCodeChallengeParamsError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  }\n  /**\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\n   */\n  static createInvalidCloudDiscoveryMetadataError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  }\n  /**\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\n   */\n  static createInvalidAuthorityMetadataError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  }\n  /**\n   * Throws error when provided authority is not a member of the trusted host list\n   */\n  static createUntrustedAuthorityError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  }\n  /**\n   * Throws error when the AzureCloudInstance is set to an invalid value\n   */\n  static createInvalidAzureCloudInstanceError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n  }\n  /**\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n   */\n  static createMissingSshJwkError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n  }\n  /**\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n   */\n  static createMissingSshKidError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n  }\n  /**\n   * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n   */\n  static createMissingNonceAuthenticationHeadersError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n  }\n  /**\n   * Throws error when a provided header is invalid in any way\n   */\n  static createInvalidAuthenticationHeaderError(invalidHeaderName, details) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n  }\n  /**\n   * Throws error when provided non-default OIDCOptions when not in OIDC protocol mode\n   */\n  static createCannotSetOIDCOptionsError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotSetOIDCOptions.code, ClientConfigurationErrorMessage.cannotSetOIDCOptions.desc);\n  }\n  /**\n   * Throws error when allowNativeBroker is set to true when not in AAD protocol mode\n   */\n  static createCannotAllowNativeBrokerError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotAllowNativeBroker.code, ClientConfigurationErrorMessage.cannotAllowNativeBroker.desc);\n  }\n  /**\n   * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\n   */\n  static createAuthorityMismatchError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityMismatch.code, ClientConfigurationErrorMessage.authorityMismatch.desc);\n  }\n}\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"names":["ClientAuthError","ClientConfigurationErrorMessage","redirectUriNotSet","code","desc","postLogoutUriNotSet","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyScopesError","nonArrayScopesError","clientIdSingleScopeError","invalidPrompt","invalidClaimsRequest","tokenRequestEmptyError","logoutRequestEmptyError","invalidCodeChallengeMethod","invalidCodeChallengeParams","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","invalidAzureCloudInstance","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","cannotSetOIDCOptions","cannotAllowNativeBroker","authorityMismatch","ClientConfigurationError","constructor","errorCode","errorMessage","name","Object","setPrototypeOf","prototype","createRedirectUriEmptyError","createPostLogoutRedirectUriEmptyError","createClaimsRequestParsingError","claimsRequestParseError","createInsecureAuthorityUriError","urlString","createUrlParseError","createUrlEmptyError","createEmptyScopesArrayError","createClientIdSingleScopeError","inputScopes","createInvalidPromptError","promptValue","createInvalidClaimsRequestError","createEmptyLogoutRequestError","createEmptyTokenRequestError","createInvalidCodeChallengeMethodError","createInvalidCodeChallengeParamsError","createInvalidCloudDiscoveryMetadataError","createInvalidAuthorityMetadataError","createUntrustedAuthorityError","createInvalidAzureCloudInstanceError","createMissingSshJwkError","createMissingSshKidError","createMissingNonceAuthenticationHeadersError","createInvalidAuthenticationHeaderError","invalidHeaderName","details","createCannotSetOIDCOptionsError","createCannotAllowNativeBrokerError","createAuthorityMismatchError"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { ClientAuthError } from './ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\",\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\",\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\",\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\",\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\",\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\",\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\",\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\",\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\",\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\",\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    },\n    invalidAzureCloudInstance: {\n        code: \"invalid_azure_cloud_instance\",\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\",\n    },\n    missingSshJwk: {\n        code: \"missing_ssh_jwk\",\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    },\n    missingSshKid: {\n        code: \"missing_ssh_kid\",\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    },\n    missingNonceAuthenticationHeader: {\n        code: \"missing_nonce_authentication_header\",\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    },\n    invalidAuthenticationHeader: {\n        code: \"invalid_authentication_header\",\n        desc: \"Invalid authentication header provided\",\n    },\n    cannotSetOIDCOptions: {\n        code: \"cannot_set_OIDCOptions\",\n        desc: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    },\n    cannotAllowNativeBroker: {\n        code: \"cannot_allow_native_broker\",\n        desc: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    },\n    authorityMismatch: {\n        code: \"authority_mismatch\",\n        desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n    },\n};\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nclass ClientConfigurationError extends ClientAuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n    }\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n    }\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(claimsRequestParseError) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n    }\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(urlString) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n    }\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(urlParseError) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n    }\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n    }\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n    }\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(inputScopes) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n    }\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(promptValue) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n    }\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n    }\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n    }\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n    }\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n    }\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n    }\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n    }\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n    }\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n    }\n    /**\n     * Throws error when the AzureCloudInstance is set to an invalid value\n     */\n    static createInvalidAzureCloudInstanceError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n    }\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n     */\n    static createMissingSshJwkError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n    }\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n     */\n    static createMissingSshKidError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n    }\n    /**\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n     */\n    static createMissingNonceAuthenticationHeadersError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n    }\n    /**\n     * Throws error when a provided header is invalid in any way\n     */\n    static createInvalidAuthenticationHeaderError(invalidHeaderName, details) {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n    }\n    /**\n     * Throws error when provided non-default OIDCOptions when not in OIDC protocol mode\n     */\n    static createCannotSetOIDCOptionsError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotSetOIDCOptions.code, ClientConfigurationErrorMessage.cannotSetOIDCOptions.desc);\n    }\n    /**\n     * Throws error when allowNativeBroker is set to true when not in AAD protocol mode\n     */\n    static createCannotAllowNativeBrokerError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotAllowNativeBroker.code, ClientConfigurationErrorMessage.cannotAllowNativeBroker.desc);\n    }\n    /**\n     * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\n     */\n    static createAuthorityMismatchError() {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityMismatch.code, ClientConfigurationErrorMessage.authorityMismatch.desc);\n    }\n}\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}