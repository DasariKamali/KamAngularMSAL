{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  authTimeNotFoundError: {\n    code: \"auth_time_not_found\",\n    desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\"\n  },\n  maxAgeTranspiredError: {\n    code: \"max_age_transpired\",\n    desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  },\n  bindingKeyNotRemovedError: {\n    code: \"binding_key_not_removed\",\n    desc: \"Could not remove the credential's binding key from storage.\"\n  },\n  logoutNotSupported: {\n    code: \"end_session_endpoint_not_supported\",\n    desc: \"Provided authority does not support logout.\"\n  },\n  keyIdMissing: {\n    code: \"key_id_missing\",\n    desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n  },\n  noNetworkConnectivity: {\n    code: \"no_network_connectivity\",\n    desc: \"No network connectivity. Check your internet connection.\"\n  },\n  userCanceledError: {\n    code: \"user_canceled\",\n    desc: \"User canceled the flow.\"\n  },\n  missingTenantIdError: {\n    code: \"missing_tenant_id_error\",\n    desc: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\"\n  }\n};\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nclass ClientAuthError extends AuthError {\n  constructor(errorCode, errorMessage) {\n    super(errorCode, errorMessage);\n    this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(this, ClientAuthError.prototype);\n  }\n  /**\n   * Creates an error thrown when client info object doesn't decode correctly.\n   * @param caughtError\n   */\n  static createClientInfoDecodingError(caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n  }\n  /**\n   * Creates an error thrown if the client info is empty.\n   * @param rawClientInfo\n   */\n  static createClientInfoEmptyError() {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n  }\n  /**\n   * Creates an error thrown when the id token extraction errors out.\n   * @param err\n   */\n  static createTokenParsingError(caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n  }\n  /**\n   * Creates an error thrown when the id token string is null or empty.\n   * @param invalidRawTokenString\n   */\n  static createTokenNullOrEmptyError(invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n  }\n  /**\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n   */\n  static createEndpointDiscoveryIncompleteError(errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n  }\n  /**\n   * Creates an error thrown when the fetch client throws\n   */\n  static createNetworkError(endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n  }\n  /**\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n   */\n  static createUnableToGetOpenidConfigError(errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n  }\n  /**\n   * Creates an error thrown when the hash cannot be deserialized.\n   * @param hashParamObj\n   */\n  static createHashNotDeserializedError(hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n  }\n  /**\n   * Creates an error thrown when the state cannot be parsed.\n   * @param invalidState\n   */\n  static createInvalidStateError(invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n  }\n  /**\n   * Creates an error thrown when two states do not match.\n   */\n  static createStateMismatchError() {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  }\n  /**\n   * Creates an error thrown when the state is not present\n   * @param missingState\n   */\n  static createStateNotFoundError(missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n  }\n  /**\n   * Creates an error thrown when the nonce does not match.\n   */\n  static createNonceMismatchError() {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  }\n  /**\n   * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\n   * @param missingNonce\n   */\n  static createAuthTimeNotFoundError() {\n    return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\n  }\n  /**\n   * Creates an error thrown when too much time has elapsed since the last end-user authentication\n   */\n  static createMaxAgeTranspiredError() {\n    return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n  }\n  /**\n   * Creates an error thrown when the mnonce is not present\n   * @param missingNonce\n   */\n  static createNonceNotFoundError(missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n  }\n  /**\n   * Throws error when multiple tokens are in cache.\n   */\n  static createMultipleMatchingTokensInCacheError() {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n  }\n  /**\n   * Throws error when multiple accounts are in cache for the given params\n   */\n  static createMultipleMatchingAccountsInCacheError() {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  }\n  /**\n   * Throws error when multiple appMetada are in cache for the given clientId.\n   */\n  static createMultipleMatchingAppMetadataInCacheError() {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  }\n  /**\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n   */\n  static createTokenRequestCannotBeMadeError() {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  }\n  /**\n   * Throws error when attempting to append a null, undefined or empty scope to a set\n   * @param givenScope\n   */\n  static createAppendEmptyScopeToSetError(givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n  }\n  /**\n   * Throws error when attempting to append a null, undefined or empty scope to a set\n   * @param givenScope\n   */\n  static createRemoveEmptyScopeFromSetError(givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n  }\n  /**\n   * Throws error when attempting to append null or empty ScopeSet.\n   * @param appendError\n   */\n  static createAppendScopeSetError(appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n  }\n  /**\n   * Throws error if ScopeSet is null or undefined.\n   * @param givenScopeSet\n   */\n  static createEmptyInputScopeSetError() {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\n  }\n  /**\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n   */\n  static createDeviceCodeCancelledError() {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n  }\n  /**\n   * Throws error if device code is expired\n   */\n  static createDeviceCodeExpiredError() {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n  }\n  /**\n   * Throws error if device code is expired\n   */\n  static createDeviceCodeUnknownError() {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\n  }\n  /**\n   * Throws error when silent requests are made without an account object\n   */\n  static createNoAccountInSilentRequestError() {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n  }\n  /**\n   * Throws error when cache record is null or undefined.\n   */\n  static createNullOrUndefinedCacheRecord() {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  }\n  /**\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n   */\n  static createInvalidCacheEnvironmentError() {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  }\n  /**\n   * Throws error when account is not found in cache.\n   */\n  static createNoAccountFoundError() {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  }\n  /**\n   * Throws error if ICachePlugin not set on CacheManager.\n   */\n  static createCachePluginError() {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n  }\n  /**\n   * Throws error if crypto object not found.\n   * @param operationName\n   */\n  static createNoCryptoObjectError(operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n  }\n  /**\n   * Throws error if cache type is invalid.\n   */\n  static createInvalidCacheTypeError() {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n  }\n  /**\n   * Throws error if unexpected account type.\n   */\n  static createUnexpectedAccountTypeError() {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n  }\n  /**\n   * Throws error if unexpected credential type.\n   */\n  static createUnexpectedCredentialTypeError() {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n  }\n  /**\n   * Throws error if client assertion is not valid.\n   */\n  static createInvalidAssertionError() {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n  }\n  /**\n   * Throws error if client assertion is not valid.\n   */\n  static createInvalidCredentialError() {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n  }\n  /**\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\n   */\n  static createRefreshRequiredError() {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  }\n  /**\n   * Throws error if the user defined timeout is reached.\n   */\n  static createUserTimeoutReachedError() {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  }\n  /*\n   * Throws error if token claims are not populated for a signed jwt generation\n   */\n  static createTokenClaimsRequiredError() {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  }\n  /**\n   * Throws error when the authorization code is missing from the server response\n   */\n  static createNoAuthCodeInServerResponseError() {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  }\n  static createBindingKeyNotRemovedError() {\n    return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n  }\n  /**\n   * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\n   */\n  static createLogoutNotSupportedError() {\n    return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n  }\n  /**\n   * Create an error when kid attribute is missing from a PoP token's cache record\n   */\n  static createKeyIdMissingError() {\n    return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n  }\n  /**\n   * Create an error when the client does not have network connectivity\n   */\n  static createNoNetworkConnectivityError() {\n    return new ClientAuthError(ClientAuthErrorMessage.noNetworkConnectivity.code, ClientAuthErrorMessage.noNetworkConnectivity.desc);\n  }\n  /**\n   * Create an error when the user cancels the flow\n   */\n  static createUserCanceledError() {\n    return new ClientAuthError(ClientAuthErrorMessage.userCanceledError.code, ClientAuthErrorMessage.userCanceledError.desc);\n  }\n  /**\n   * Creates an error for during acquireTokenByClientCredential when TenantId is set to \"common\" or \"organizations\"\n   */\n  static createMissingTenantIdError() {\n    return new AuthError(ClientAuthErrorMessage.missingTenantIdError.code, ClientAuthErrorMessage.missingTenantIdError.desc);\n  }\n}\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"names":["AuthError","ClientAuthErrorMessage","clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","authTimeNotFoundError","maxAgeTranspiredError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","bindingKeyNotRemovedError","logoutNotSupported","keyIdMissing","noNetworkConnectivity","userCanceledError","missingTenantIdError","ClientAuthError","constructor","errorCode","errorMessage","name","Object","setPrototypeOf","prototype","createClientInfoDecodingError","caughtError","createClientInfoEmptyError","createTokenParsingError","caughtExtractionError","createTokenNullOrEmptyError","invalidRawTokenString","createEndpointDiscoveryIncompleteError","errDetail","createNetworkError","endpoint","split","createUnableToGetOpenidConfigError","createHashNotDeserializedError","hashParamObj","createInvalidStateError","invalidState","errorString","createStateMismatchError","createStateNotFoundError","missingState","createNonceMismatchError","createAuthTimeNotFoundError","createMaxAgeTranspiredError","createNonceNotFoundError","missingNonce","createMultipleMatchingTokensInCacheError","createMultipleMatchingAccountsInCacheError","createMultipleMatchingAppMetadataInCacheError","createTokenRequestCannotBeMadeError","createAppendEmptyScopeToSetError","givenScope","createRemoveEmptyScopeFromSetError","createAppendScopeSetError","appendError","createEmptyInputScopeSetError","createDeviceCodeCancelledError","createDeviceCodeExpiredError","createDeviceCodeUnknownError","createNoAccountInSilentRequestError","createNullOrUndefinedCacheRecord","createInvalidCacheEnvironmentError","createNoAccountFoundError","createCachePluginError","createNoCryptoObjectError","operationName","createInvalidCacheTypeError","createUnexpectedAccountTypeError","createUnexpectedCredentialTypeError","createInvalidAssertionError","createInvalidCredentialError","createRefreshRequiredError","createUserTimeoutReachedError","createTokenClaimsRequiredError","createNoAuthCodeInServerResponseError","createBindingKeyNotRemovedError","createLogoutNotSupportedError","createKeyIdMissingError","createNoNetworkConnectivityError","createUserCanceledError","createMissingTenantIdError"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: \"client_info_decoding_error\",\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\",\n    },\n    clientInfoEmptyError: {\n        code: \"client_info_empty_error\",\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\",\n    },\n    tokenParsingError: {\n        code: \"token_parsing_error\",\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\",\n    },\n    nullOrEmptyToken: {\n        code: \"null_or_empty_token\",\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\",\n    },\n    endpointResolutionError: {\n        code: \"endpoints_resolution_error\",\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\",\n    },\n    networkError: {\n        code: \"network_error\",\n        desc: \"Network request failed. Please check network trace to determine root cause.\",\n    },\n    unableToGetOpenidConfigError: {\n        code: \"openid_config_error\",\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    },\n    hashNotDeserialized: {\n        code: \"hash_not_deserialized\",\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\",\n    },\n    blankGuidGenerated: {\n        code: \"blank_guid_generated\",\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\",\n    },\n    invalidStateError: {\n        code: \"invalid_state\",\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\",\n    },\n    stateMismatchError: {\n        code: \"state_mismatch\",\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\",\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found\",\n    },\n    nonceMismatchError: {\n        code: \"nonce_mismatch\",\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\",\n    },\n    nonceNotFoundError: {\n        code: \"nonce_not_found\",\n        desc: \"nonce not found\",\n    },\n    authTimeNotFoundError: {\n        code: \"auth_time_not_found\",\n        desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\n            \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\n            \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    },\n    maxAgeTranspiredError: {\n        code: \"max_age_transpired\",\n        desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    },\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\",\n    },\n    multipleMatchingTokens: {\n        code: \"multiple_matching_tokens\",\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\n            \"Call AcquireToken again providing more requirements such as authority or account.\",\n    },\n    multipleMatchingAccounts: {\n        code: \"multiple_matching_accounts\",\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    },\n    multipleMatchingAppMetadata: {\n        code: \"multiple_matching_appMetadata\",\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    },\n    tokenRequestCannotBeMade: {\n        code: \"request_cannot_be_made\",\n        desc: \"Token request cannot be made without authorization code or refresh token.\",\n    },\n    appendEmptyScopeError: {\n        code: \"cannot_append_empty_scope\",\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\",\n    },\n    removeEmptyScopeError: {\n        code: \"cannot_remove_empty_scope\",\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\",\n    },\n    appendScopeSetError: {\n        code: \"cannot_append_scopeset\",\n        desc: \"Cannot append ScopeSet due to error.\",\n    },\n    emptyInputScopeSetError: {\n        code: \"empty_input_scopeset\",\n        desc: \"Empty input ScopeSet cannot be processed.\",\n    },\n    DeviceCodePollingCancelled: {\n        code: \"device_code_polling_cancelled\",\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    },\n    DeviceCodeExpired: {\n        code: \"device_code_expired\",\n        desc: \"Device code is expired.\",\n    },\n    DeviceCodeUnknownError: {\n        code: \"device_code_unknown_error\",\n        desc: \"Device code stopped polling for unknown reasons.\",\n    },\n    NoAccountInSilentRequest: {\n        code: \"no_account_in_silent_request\",\n        desc: \"Please pass an account object, silent flow is not supported without account information\",\n    },\n    invalidCacheRecord: {\n        code: \"invalid_cache_record\",\n        desc: \"Cache record object was null or undefined.\",\n    },\n    invalidCacheEnvironment: {\n        code: \"invalid_cache_environment\",\n        desc: \"Invalid environment when attempting to create cache entry\",\n    },\n    noAccountFound: {\n        code: \"no_account_found\",\n        desc: \"No account found in cache for given key.\",\n    },\n    CachePluginError: {\n        code: \"no cache plugin set on CacheManager\",\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\",\n    },\n    noCryptoObj: {\n        code: \"no_crypto_object\",\n        desc: \"No crypto object detected. This is required for the following operation: \",\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\",\n    },\n    unexpectedAccountType: {\n        code: \"unexpected_account_type\",\n        desc: \"Unexpected account type.\",\n    },\n    unexpectedCredentialType: {\n        code: \"unexpected_credential_type\",\n        desc: \"Unexpected credential type.\",\n    },\n    invalidAssertion: {\n        code: \"invalid_assertion\",\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    },\n    invalidClientCredential: {\n        code: \"invalid_client_credential\",\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    },\n    tokenRefreshRequired: {\n        code: \"token_refresh_required\",\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    },\n    userTimeoutReached: {\n        code: \"user_timeout_reached\",\n        desc: \"User defined timeout for device code polling reached\",\n    },\n    tokenClaimsRequired: {\n        code: \"token_claims_cnf_required_for_signedjwt\",\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\",\n    },\n    noAuthorizationCodeFromServer: {\n        code: \"authorization_code_missing_from_server_response\",\n        desc: \"Server response does not contain an authorization code to proceed\",\n    },\n    noAzureRegionDetected: {\n        code: \"no_azure_region_detected\",\n        desc: \"No azure region was detected and no fallback was made available\",\n    },\n    accessTokenEntityNullError: {\n        code: \"access_token_entity_null\",\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\",\n    },\n    bindingKeyNotRemovedError: {\n        code: \"binding_key_not_removed\",\n        desc: \"Could not remove the credential's binding key from storage.\",\n    },\n    logoutNotSupported: {\n        code: \"end_session_endpoint_not_supported\",\n        desc: \"Provided authority does not support logout.\",\n    },\n    keyIdMissing: {\n        code: \"key_id_missing\",\n        desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    },\n    noNetworkConnectivity: {\n        code: \"no_network_connectivity\",\n        desc: \"No network connectivity. Check your internet connection.\",\n    },\n    userCanceledError: {\n        code: \"user_canceled\",\n        desc: \"User canceled the flow.\",\n    },\n    missingTenantIdError: {\n        code: \"missing_tenant_id_error\",\n        desc: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    },\n};\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nclass ClientAuthError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientAuthError\";\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n    /**\n     * Creates an error thrown when client info object doesn't decode correctly.\n     * @param caughtError\n     */\n    static createClientInfoDecodingError(caughtError) {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n    }\n    /**\n     * Creates an error thrown if the client info is empty.\n     * @param rawClientInfo\n     */\n    static createClientInfoEmptyError() {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n    }\n    /**\n     * Creates an error thrown when the id token extraction errors out.\n     * @param err\n     */\n    static createTokenParsingError(caughtExtractionError) {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n    }\n    /**\n     * Creates an error thrown when the id token string is null or empty.\n     * @param invalidRawTokenString\n     */\n    static createTokenNullOrEmptyError(invalidRawTokenString) {\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n    }\n    /**\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n     */\n    static createEndpointDiscoveryIncompleteError(errDetail) {\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n    }\n    /**\n     * Creates an error thrown when the fetch client throws\n     */\n    static createNetworkError(endpoint, errDetail) {\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n    /**\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n     */\n    static createUnableToGetOpenidConfigError(errDetail) {\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n    }\n    /**\n     * Creates an error thrown when the hash cannot be deserialized.\n     * @param hashParamObj\n     */\n    static createHashNotDeserializedError(hashParamObj) {\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n    }\n    /**\n     * Creates an error thrown when the state cannot be parsed.\n     * @param invalidState\n     */\n    static createInvalidStateError(invalidState, errorString) {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n    }\n    /**\n     * Creates an error thrown when two states do not match.\n     */\n    static createStateMismatchError() {\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n    }\n    /**\n     * Creates an error thrown when the state is not present\n     * @param missingState\n     */\n    static createStateNotFoundError(missingState) {\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n    }\n    /**\n     * Creates an error thrown when the nonce does not match.\n     */\n    static createNonceMismatchError() {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n    }\n    /**\n     * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\n     * @param missingNonce\n     */\n    static createAuthTimeNotFoundError() {\n        return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\n    }\n    /**\n     * Creates an error thrown when too much time has elapsed since the last end-user authentication\n     */\n    static createMaxAgeTranspiredError() {\n        return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n    }\n    /**\n     * Creates an error thrown when the mnonce is not present\n     * @param missingNonce\n     */\n    static createNonceNotFoundError(missingNonce) {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n    }\n    /**\n     * Throws error when multiple tokens are in cache.\n     */\n    static createMultipleMatchingTokensInCacheError() {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n    }\n    /**\n     * Throws error when multiple accounts are in cache for the given params\n     */\n    static createMultipleMatchingAccountsInCacheError() {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n    }\n    /**\n     * Throws error when multiple appMetada are in cache for the given clientId.\n     */\n    static createMultipleMatchingAppMetadataInCacheError() {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n    }\n    /**\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n     */\n    static createTokenRequestCannotBeMadeError() {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n    }\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createAppendEmptyScopeToSetError(givenScope) {\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createRemoveEmptyScopeFromSetError(givenScope) {\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n    /**\n     * Throws error when attempting to append null or empty ScopeSet.\n     * @param appendError\n     */\n    static createAppendScopeSetError(appendError) {\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n    }\n    /**\n     * Throws error if ScopeSet is null or undefined.\n     * @param givenScopeSet\n     */\n    static createEmptyInputScopeSetError() {\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\n    }\n    /**\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n     */\n    static createDeviceCodeCancelledError() {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n    }\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeExpiredError() {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n    }\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeUnknownError() {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\n    }\n    /**\n     * Throws error when silent requests are made without an account object\n     */\n    static createNoAccountInSilentRequestError() {\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n    }\n    /**\n     * Throws error when cache record is null or undefined.\n     */\n    static createNullOrUndefinedCacheRecord() {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n    }\n    /**\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n     */\n    static createInvalidCacheEnvironmentError() {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n    }\n    /**\n     * Throws error when account is not found in cache.\n     */\n    static createNoAccountFoundError() {\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n    }\n    /**\n     * Throws error if ICachePlugin not set on CacheManager.\n     */\n    static createCachePluginError() {\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n    }\n    /**\n     * Throws error if crypto object not found.\n     * @param operationName\n     */\n    static createNoCryptoObjectError(operationName) {\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n    }\n    /**\n     * Throws error if cache type is invalid.\n     */\n    static createInvalidCacheTypeError() {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n    }\n    /**\n     * Throws error if unexpected account type.\n     */\n    static createUnexpectedAccountTypeError() {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n    }\n    /**\n     * Throws error if unexpected credential type.\n     */\n    static createUnexpectedCredentialTypeError() {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n    }\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidAssertionError() {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n    }\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidCredentialError() {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n    }\n    /**\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\n     */\n    static createRefreshRequiredError() {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n    }\n    /**\n     * Throws error if the user defined timeout is reached.\n     */\n    static createUserTimeoutReachedError() {\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n    }\n    /*\n     * Throws error if token claims are not populated for a signed jwt generation\n     */\n    static createTokenClaimsRequiredError() {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n    }\n    /**\n     * Throws error when the authorization code is missing from the server response\n     */\n    static createNoAuthCodeInServerResponseError() {\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n    }\n    static createBindingKeyNotRemovedError() {\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n    }\n    /**\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\n     */\n    static createLogoutNotSupportedError() {\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n    }\n    /**\n     * Create an error when kid attribute is missing from a PoP token's cache record\n     */\n    static createKeyIdMissingError() {\n        return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n    }\n    /**\n     * Create an error when the client does not have network connectivity\n     */\n    static createNoNetworkConnectivityError() {\n        return new ClientAuthError(ClientAuthErrorMessage.noNetworkConnectivity.code, ClientAuthErrorMessage.noNetworkConnectivity.desc);\n    }\n    /**\n     * Create an error when the user cancels the flow\n     */\n    static createUserCanceledError() {\n        return new ClientAuthError(ClientAuthErrorMessage.userCanceledError.code, ClientAuthErrorMessage.userCanceledError.desc);\n    }\n    /**\n     * Creates an error for during acquireTokenByClientCredential when TenantId is set to \"common\" or \"organizations\"\n     */\n    static createMissingTenantIdError() {\n        return new AuthError(ClientAuthErrorMessage.missingTenantIdError.code, ClientAuthErrorMessage.missingTenantIdError.desc);\n    }\n}\n\nexport { ClientAuthError, ClientAuthErrorMessage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}