{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Authority } from './Authority.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityFactory {\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n   *\n   * Also performs endpoint discovery.\n   *\n   * @param authorityUri\n   * @param networkClient\n   * @param protocolMode\n   */\n  static createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return _asyncToGenerator(function* () {\n      performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n      const authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n      // Initialize authority and perform discovery endpoint check.\n      const acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n      try {\n        performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n        yield acquireTokenAuthority.resolveEndpointsAsync();\n        return acquireTokenAuthority;\n      } catch (e) {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n      }\n    })();\n  }\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n   *\n   * Does not perform endpoint discovery.\n   *\n   * @param authorityUrl\n   * @param networkInterface\n   * @param protocolMode\n   */\n  static createInstance(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (!authorityUrl) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  }\n}\nexport { AuthorityFactory };","map":{"version":3,"names":["_asyncToGenerator","Authority","ClientConfigurationError","ClientAuthError","PerformanceEvents","AuthorityFactory","createDiscoveredInstance","authorityUri","networkClient","cacheManager","authorityOptions","logger","performanceClient","correlationId","addQueueMeasurement","AuthorityFactoryCreateDiscoveredInstance","authorityUriFinal","transformCIAMAuthority","acquireTokenAuthority","createInstance","setPreQueueTime","AuthorityResolveEndpointsAsync","resolveEndpointsAsync","e","createEndpointDiscoveryIncompleteError","authorityUrl","networkInterface","createUrlEmptyError"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { Authority } from './Authority.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityFactory {\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n        performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n        const authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n        try {\n            performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        }\n        catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n        // Throw error if authority url is empty\n        if (!authorityUrl) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n    }\n}\n\nexport { AuthorityFactory };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,wBAAwB,QAAQ,uCAAuC;AAChF,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,iBAAiB,QAAQ,+CAA+C;;AAEjF;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAaC,wBAAwBA,CAACC,YAAY,EAAEC,aAAa,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,aAAa,EAAE;IAAA,OAAAb,iBAAA;MACzIY,iBAAiB,EAAEE,mBAAmB,CAACV,iBAAiB,CAACW,wCAAwC,EAAEF,aAAa,CAAC;MACjH,MAAMG,iBAAiB,GAAGf,SAAS,CAACgB,sBAAsB,CAACV,YAAY,CAAC;MACxE;MACA,MAAMW,qBAAqB,GAAGb,gBAAgB,CAACc,cAAc,CAACH,iBAAiB,EAAER,aAAa,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,aAAa,CAAC;MACzK,IAAI;QACAD,iBAAiB,EAAEQ,eAAe,CAAChB,iBAAiB,CAACiB,8BAA8B,EAAER,aAAa,CAAC;QACnG,MAAMK,qBAAqB,CAACI,qBAAqB,CAAC,CAAC;QACnD,OAAOJ,qBAAqB;MAChC,CAAC,CACD,OAAOK,CAAC,EAAE;QACN,MAAMpB,eAAe,CAACqB,sCAAsC,CAACD,CAAC,CAAC;MACnE;IAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOJ,cAAcA,CAACM,YAAY,EAAEC,gBAAgB,EAAEjB,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,aAAa,EAAE;IAC5H;IACA,IAAI,CAACY,YAAY,EAAE;MACf,MAAMvB,wBAAwB,CAACyB,mBAAmB,CAAC,CAAC;IACxD;IACA,OAAO,IAAI1B,SAAS,CAACwB,YAAY,EAAEC,gBAAgB,EAAEjB,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,aAAa,CAAC;EAClI;AACJ;AAEA,SAASR,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}