{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AccountEntity, PerformanceEvents, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BaseInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  clearCacheOnLogout(account) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (account) {\n        if (AccountEntity.accountInfoIsEqual(account, _this.browserStorage.getActiveAccount(), false)) {\n          _this.logger.verbose(\"Setting active account to null\");\n          _this.browserStorage.setActiveAccount(null);\n        }\n        // Clear given account.\n        try {\n          yield _this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n          _this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n        } catch (error) {\n          _this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n        }\n      } else {\n        try {\n          _this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", _this.correlationId);\n          // Clear all accounts and tokens\n          yield _this.browserStorage.clear();\n          // Clear any stray keys from IndexedDB\n          yield _this.browserCrypto.clearKeystore();\n        } catch (e) {\n          _this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n        }\n      }\n    })();\n  }\n  /**\n   * Initializer function for all request APIs\n   * @param request\n   */\n  initializeBaseRequest(request, account) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n      _this2.logger.verbose(\"Initializing BaseAuthRequest\");\n      const authority = request.authority || _this2.config.auth.authority;\n      if (account) {\n        yield _this2.validateRequestAuthority(authority, account);\n      }\n      const scopes = [...(request && request.scopes || [])];\n      const validatedRequest = {\n        ...request,\n        correlationId: _this2.correlationId,\n        authority,\n        scopes\n      };\n      // Set authenticationScheme to BEARER if not explicitly set in the request\n      if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n        _this2.logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n      } else {\n        if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n          if (!request.sshJwk) {\n            throw ClientConfigurationError.createMissingSshJwkError();\n          }\n          if (!request.sshKid) {\n            throw ClientConfigurationError.createMissingSshKidError();\n          }\n        }\n        _this2.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n      }\n      // Set requested claims hash if claims-based caching is enabled and claims were requested\n      if (_this2.config.cache.claimsBasedCachingEnabled && request.claims &&\n      // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n      !StringUtils.isEmptyObj(request.claims)) {\n        validatedRequest.requestedClaimsHash = yield _this2.browserCrypto.hashString(request.claims);\n      }\n      return validatedRequest;\n    })();\n  }\n  /**\n   *\n   * Use to get the redirect uri configured in MSAL or null.\n   * @param requestRedirectUri\n   * @returns Redirect URL\n   *\n   */\n  getRedirectUri(requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  }\n  /*\n   * If authority provided in the request does not match environment/authority specified\n   * in the account or MSAL config, we throw an error.\n   */\n  validateRequestAuthority(authority, account) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const discoveredAuthority = yield _this3.getDiscoveredAuthority(authority);\n      if (!discoveredAuthority.isAlias(account.environment)) {\n        throw ClientConfigurationError.createAuthorityMismatchError();\n      }\n    })();\n  }\n  /**\n   *\n   * @param apiId\n   * @param correlationId\n   * @param forceRefresh\n   */\n  initializeServerTelemetryManager(apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    const telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  }\n  /**\n   * Used to get a discovered version of the default authority.\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  getDiscoveredAuthority(requestAuthority) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.logger.verbose(\"getDiscoveredAuthority called\");\n      const authorityOptions = {\n        protocolMode: _this4.config.auth.protocolMode,\n        OIDCOptions: _this4.config.auth.OIDCOptions,\n        knownAuthorities: _this4.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: _this4.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: _this4.config.auth.authorityMetadata\n      };\n      if (requestAuthority) {\n        _this4.logger.verbose(\"Creating discovered authority with request authority\");\n        return yield AuthorityFactory.createDiscoveredInstance(requestAuthority, _this4.config.system.networkClient, _this4.browserStorage, authorityOptions, _this4.logger);\n      }\n      _this4.logger.verbose(\"Creating discovered authority with configured authority\");\n      return yield AuthorityFactory.createDiscoveredInstance(_this4.config.auth.authority, _this4.config.system.networkClient, _this4.browserStorage, authorityOptions, _this4.logger);\n    })();\n  }\n}\nexport { BaseInteractionClient };","map":{"version":3,"names":["_asyncToGenerator","AccountEntity","PerformanceEvents","AuthenticationScheme","ClientConfigurationError","StringUtils","UrlString","ServerTelemetryManager","AuthorityFactory","version","BrowserConstants","BrowserUtils","BaseInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","MSAL_SKU","clearCacheOnLogout","account","_this","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","error","clear","clearKeystore","e","initializeBaseRequest","request","_this2","addQueueMeasurement","InitializeBaseRequest","authority","auth","validateRequestAuthority","scopes","validatedRequest","authenticationScheme","BEARER","SSH","sshJwk","createMissingSshJwkError","sshKid","createMissingSshKidError","cache","claimsBasedCachingEnabled","claims","isEmptyObj","requestedClaimsHash","hashString","getRedirectUri","requestRedirectUri","redirectUri","getCurrentUri","getAbsoluteUrl","_this3","discoveredAuthority","getDiscoveredAuthority","isAlias","environment","createAuthorityMismatchError","initializeServerTelemetryManager","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","requestAuthority","_this4","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","createDiscoveredInstance"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { AccountEntity, PerformanceEvents, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BaseInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId =\n            correlationId || this.browserCrypto.createNewGuid();\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n        this.performanceClient = performanceClient;\n    }\n    async clearCacheOnLogout(account) {\n        if (account) {\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            }\n            catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        }\n        else {\n            try {\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            }\n            catch (e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n    /**\n     * Initializer function for all request APIs\n     * @param request\n     */\n    async initializeBaseRequest(request, account) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\n        const authority = request.authority || this.config.auth.authority;\n        if (account) {\n            await this.validateRequestAuthority(authority, account);\n        }\n        const scopes = [...((request && request.scopes) || [])];\n        const validatedRequest = {\n            ...request,\n            correlationId: this.correlationId,\n            authority,\n            scopes,\n        };\n        // Set authenticationScheme to BEARER if not explicitly set in the request\n        if (!validatedRequest.authenticationScheme) {\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n            this.logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n        }\n        else {\n            if (validatedRequest.authenticationScheme ===\n                AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                    throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if (!request.sshKid) {\n                    throw ClientConfigurationError.createMissingSshKidError();\n                }\n            }\n            this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n        }\n        // Set requested claims hash if claims-based caching is enabled and claims were requested\n        if (this.config.cache.claimsBasedCachingEnabled &&\n            request.claims &&\n            // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n            !StringUtils.isEmptyObj(request.claims)) {\n            validatedRequest.requestedClaimsHash =\n                await this.browserCrypto.hashString(request.claims);\n        }\n        return validatedRequest;\n    }\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri) {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri ||\n            this.config.auth.redirectUri ||\n            BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n    }\n    /*\n     * If authority provided in the request does not match environment/authority specified\n     * in the account or MSAL config, we throw an error.\n     */\n    async validateRequestAuthority(authority, account) {\n        const discoveredAuthority = await this.getDiscoveredAuthority(authority);\n        if (!discoveredAuthority.isAlias(account.environment)) {\n            throw ClientConfigurationError.createAuthorityMismatchError();\n        }\n    }\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    initializeServerTelemetryManager(apiId, forceRefresh) {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1],\n        };\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    async getDiscoveredAuthority(requestAuthority) {\n        this.logger.verbose(\"getDiscoveredAuthority called\");\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n        };\n        if (requestAuthority) {\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\n        }\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\n        return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\n    }\n}\n\nexport { BaseInteractionClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}