{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonTypes } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass JoseHeader {\n  constructor(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\n   * Builds SignedHttpRequest formatted JOSE Header from the\n   * JOSE Header options provided or previously set on the object and returns\n   * the stringified header object.\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n   * @param shrHeaderOptions\n   * @returns\n   */\n  static getShrHeaderString(shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n    const shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  }\n}\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeaderError","JsonTypes","JoseHeader","constructor","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions","createMissingKidError","createMissingAlgError","shrHeader","Pop","JSON","stringify"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { JoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonTypes } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass JoseHeader {\n    constructor(options) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions\n     * @returns\n     */\n    static getShrHeaderString(shrHeaderOptions) {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw JoseHeaderError.createMissingKidError();\n        }\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw JoseHeaderError.createMissingAlgError();\n        }\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg,\n        });\n        return JSON.stringify(shrHeader);\n    }\n}\n\nexport { JoseHeader };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,SAAS,QAAQ,wBAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACbC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,kBAAkBA,CAACC,gBAAgB,EAAE;IACxC;IACA,IAAI,CAACA,gBAAgB,CAACF,GAAG,EAAE;MACvB,MAAMP,eAAe,CAACU,qBAAqB,CAAC,CAAC;IACjD;IACA;IACA,IAAI,CAACD,gBAAgB,CAACH,GAAG,EAAE;MACvB,MAAMN,eAAe,CAACW,qBAAqB,CAAC,CAAC;IACjD;IACA,MAAMC,SAAS,GAAG,IAAIV,UAAU,CAAC;MAC7B;MACAG,GAAG,EAAEI,gBAAgB,CAACJ,GAAG,IAAIJ,SAAS,CAACY,GAAG;MAC1CN,GAAG,EAAEE,gBAAgB,CAACF,GAAG;MACzBD,GAAG,EAAEG,gBAAgB,CAACH;IAC1B,CAAC,CAAC;IACF,OAAOQ,IAAI,CAACC,SAAS,CAACH,SAAS,CAAC;EACpC;AACJ;AAEA,SAASV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}