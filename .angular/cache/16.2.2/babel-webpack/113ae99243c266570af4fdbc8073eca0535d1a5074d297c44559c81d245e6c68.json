{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { Separators, AADServerParamKeys, GrantType, AuthenticationScheme, PromptValue, HeaderNames } from '../utils/Constants.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from '../request/RequestValidator.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Oauth2.0 Authorization Code client\n * @internal\n */\nclass AuthorizationCodeClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    this.includeRedirectUri = true;\n    this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n  }\n  /**\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\n   * application. The URL target the /authorize endpoint of the authority configured in the\n   * application object.\n   *\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n   * acquireToken(AuthorizationCodeRequest)\n   * @param request\n   */\n  getAuthCodeUrl(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n      const queryString = yield invokeAsync(_this.createAuthCodeUrlQueryString.bind(_this), PerformanceEvents.AuthClientCreateQueryString, _this.logger, _this.performanceClient, request.correlationId)(request);\n      return UrlString.appendQueryString(_this.authority.authorizationEndpoint, queryString);\n    })();\n  }\n  /**\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n   * authorization_code_grant\n   * @param request\n   */\n  acquireToken(request, authCodePayload) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n      if (!request.code) {\n        throw ClientAuthError.createTokenRequestCannotBeMadeError();\n      }\n      const reqTimestamp = TimeUtils.nowSeconds();\n      const response = yield invokeAsync(_this2.executeTokenRequest.bind(_this2), PerformanceEvents.AuthClientExecuteTokenRequest, _this2.logger, _this2.performanceClient, request.correlationId)(_this2.authority, request);\n      // Retrieve requestId from response headers\n      const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n      const responseHandler = new ResponseHandler(_this2.config.authOptions.clientId, _this2.cacheManager, _this2.cryptoUtils, _this2.logger, _this2.config.serializableCache, _this2.config.persistencePlugin, _this2.performanceClient);\n      // Validate response. This function throws a server error if an error is returned by the server.\n      responseHandler.validateTokenResponse(response.body);\n      return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, _this2.logger, _this2.performanceClient, request.correlationId)(response.body, _this2.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    })();\n  }\n  /**\n   * Handles the hash fragment response from public client code request. Returns a code response used by\n   * the client to exchange for a token in acquireToken.\n   * @param hashFragment\n   */\n  handleFragmentResponse(hashFragment, cachedState) {\n    // Handle responses.\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    const serverParams = UrlString.getDeserializedCodeResponse(this.config.authOptions.authority.options.OIDCOptions?.serverResponseType, hashFragment);\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return {\n      ...serverParams,\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    };\n  }\n  /**\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n   * Default behaviour is to redirect the user to `window.location.href`.\n   * @param authorityUri\n   */\n  getLogoutUri(logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    const queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  }\n  /**\n   * Executes POST request to token endpoint\n   * @param authority\n   * @param request\n   */\n  executeTokenRequest(authority, request) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n      const queryParametersString = _this3.createTokenQueryParameters(request);\n      const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n      const requestBody = yield invokeAsync(_this3.createTokenRequestBody.bind(_this3), PerformanceEvents.AuthClientCreateTokenRequestBody, _this3.logger, _this3.performanceClient, request.correlationId)(request);\n      let ccsCredential = undefined;\n      if (request.clientInfo) {\n        try {\n          const clientInfo = buildClientInfo(request.clientInfo, _this3.cryptoUtils);\n          ccsCredential = {\n            credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          };\n        } catch (e) {\n          _this3.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n        }\n      }\n      const headers = _this3.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n      const thumbprint = {\n        clientId: _this3.config.authOptions.clientId,\n        authority: authority.canonicalAuthority,\n        scopes: request.scopes,\n        claims: request.claims,\n        authenticationScheme: request.authenticationScheme,\n        resourceRequestMethod: request.resourceRequestMethod,\n        resourceRequestUri: request.resourceRequestUri,\n        shrClaims: request.shrClaims,\n        sshKid: request.sshKid\n      };\n      return invokeAsync(_this3.executePostToTokenEndpoint.bind(_this3), PerformanceEvents.BaseClientExecutePostToTokenEndpoint, _this3.logger, _this3.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId);\n    })();\n  }\n  /**\n   * Generates a map for all the params to be sent to the service\n   * @param request\n   */\n  createTokenRequestBody(request) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n      const parameterBuilder = new RequestParameterBuilder();\n      parameterBuilder.addClientId(request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] || _this4.config.authOptions.clientId);\n      /*\n       * For hybrid spa flow, there will be a code but no verifier\n       * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n       */\n      if (!_this4.includeRedirectUri) {\n        // Just validate\n        RequestValidator.validateRedirectUri(request.redirectUri);\n      } else {\n        // Validate and include redirect uri\n        parameterBuilder.addRedirectUri(request.redirectUri);\n      }\n      // Add scope array, parameter builder will add default scopes and dedupe\n      parameterBuilder.addScopes(request.scopes, true, _this4.oidcDefaultScopes);\n      // add code: user set, not validated\n      parameterBuilder.addAuthorizationCode(request.code);\n      // Add library metadata\n      parameterBuilder.addLibraryInfo(_this4.config.libraryInfo);\n      parameterBuilder.addApplicationTelemetry(_this4.config.telemetry.application);\n      parameterBuilder.addThrottling();\n      if (_this4.serverTelemetryManager && !isOidcProtocolMode(_this4.config)) {\n        parameterBuilder.addServerTelemetry(_this4.serverTelemetryManager);\n      }\n      // add code_verifier if passed\n      if (request.codeVerifier) {\n        parameterBuilder.addCodeVerifier(request.codeVerifier);\n      }\n      if (_this4.config.clientCredentials.clientSecret) {\n        parameterBuilder.addClientSecret(_this4.config.clientCredentials.clientSecret);\n      }\n      if (_this4.config.clientCredentials.clientAssertion) {\n        const clientAssertion = _this4.config.clientCredentials.clientAssertion;\n        parameterBuilder.addClientAssertion(clientAssertion.assertion);\n        parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n      }\n      parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n      parameterBuilder.addClientInfo();\n      if (request.authenticationScheme === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(_this4.cryptoUtils, _this4.performanceClient);\n        _this4.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnfData = yield popTokenGenerator.generateCnf(request);\n        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n      } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n        if (request.sshJwk) {\n          parameterBuilder.addSshJwk(request.sshJwk);\n        } else {\n          throw ClientConfigurationError.createMissingSshJwkError();\n        }\n      }\n      const correlationId = request.correlationId || _this4.config.cryptoInterface.createNewGuid();\n      parameterBuilder.addCorrelationId(correlationId);\n      if (!StringUtils.isEmptyObj(request.claims) || _this4.config.authOptions.clientCapabilities && _this4.config.authOptions.clientCapabilities.length > 0) {\n        parameterBuilder.addClaims(request.claims, _this4.config.authOptions.clientCapabilities);\n      }\n      let ccsCred = undefined;\n      if (request.clientInfo) {\n        try {\n          const clientInfo = buildClientInfo(request.clientInfo, _this4.cryptoUtils);\n          ccsCred = {\n            credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          };\n        } catch (e) {\n          _this4.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n        }\n      } else {\n        ccsCred = request.ccsCredential;\n      }\n      // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n      if (_this4.config.systemOptions.preventCorsPreflight && ccsCred) {\n        switch (ccsCred.type) {\n          case CcsCredentialType.HOME_ACCOUNT_ID:\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this4.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n            }\n            break;\n          case CcsCredentialType.UPN:\n            parameterBuilder.addCcsUpn(ccsCred.credential);\n            break;\n        }\n      }\n      if (request.tokenBodyParameters) {\n        parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n      }\n      // Add hybrid spa parameters if not already provided\n      if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n        parameterBuilder.addExtraQueryParameters({\n          [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n        });\n      }\n      return parameterBuilder.createQueryString();\n    })();\n  }\n  /**\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n   * @param request\n   */\n  createAuthCodeUrlQueryString(request) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n      const parameterBuilder = new RequestParameterBuilder();\n      parameterBuilder.addClientId(request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] || _this5.config.authOptions.clientId);\n      const requestScopes = [...(request.scopes || []), ...(request.extraScopesToConsent || [])];\n      parameterBuilder.addScopes(requestScopes, true, _this5.oidcDefaultScopes);\n      // validate the redirectUri (to be a non null value)\n      parameterBuilder.addRedirectUri(request.redirectUri);\n      // generate the correlationId if not set by the user and add\n      const correlationId = request.correlationId || _this5.config.cryptoInterface.createNewGuid();\n      parameterBuilder.addCorrelationId(correlationId);\n      // add response_mode. If not passed in it defaults to query.\n      parameterBuilder.addResponseMode(request.responseMode);\n      // add response_type = code\n      parameterBuilder.addResponseTypeCode();\n      // add library info parameters\n      parameterBuilder.addLibraryInfo(_this5.config.libraryInfo);\n      if (!isOidcProtocolMode(_this5.config)) {\n        parameterBuilder.addApplicationTelemetry(_this5.config.telemetry.application);\n      }\n      // add client_info=1\n      parameterBuilder.addClientInfo();\n      if (request.codeChallenge && request.codeChallengeMethod) {\n        parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n      }\n      if (request.prompt) {\n        parameterBuilder.addPrompt(request.prompt);\n      }\n      if (request.domainHint) {\n        parameterBuilder.addDomainHint(request.domainHint);\n      }\n      // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n      if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n        // AAD will throw if prompt=select_account is passed with an account hint\n        if (request.sid && request.prompt === PromptValue.NONE) {\n          // SessionID is only used in silent calls\n          _this5.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n          parameterBuilder.addSid(request.sid);\n        } else if (request.account) {\n          const accountSid = _this5.extractAccountSid(request.account);\n          const accountLoginHintClaim = _this5.extractLoginHint(request.account);\n          // If login_hint claim is present, use it over sid/username\n          if (accountLoginHintClaim) {\n            _this5.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n            parameterBuilder.addLoginHint(accountLoginHintClaim);\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this5.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n            }\n          } else if (accountSid && request.prompt === PromptValue.NONE) {\n            /*\n             * If account and loginHint are provided, we will check account first for sid before adding loginHint\n             * SessionId is only used in silent calls\n             */\n            _this5.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n            parameterBuilder.addSid(accountSid);\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this5.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n            }\n          } else if (request.loginHint) {\n            _this5.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n            parameterBuilder.addLoginHint(request.loginHint);\n            parameterBuilder.addCcsUpn(request.loginHint);\n          } else if (request.account.username) {\n            // Fallback to account username if provided\n            _this5.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n            parameterBuilder.addLoginHint(request.account.username);\n            try {\n              const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n              parameterBuilder.addCcsOid(clientInfo);\n            } catch (e) {\n              _this5.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n            }\n          }\n        } else if (request.loginHint) {\n          _this5.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        }\n      } else {\n        _this5.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n      }\n      if (request.nonce) {\n        parameterBuilder.addNonce(request.nonce);\n      }\n      if (request.state) {\n        parameterBuilder.addState(request.state);\n      }\n      if (request.claims || _this5.config.authOptions.clientCapabilities && _this5.config.authOptions.clientCapabilities.length > 0) {\n        parameterBuilder.addClaims(request.claims, _this5.config.authOptions.clientCapabilities);\n      }\n      if (request.extraQueryParameters) {\n        parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n      }\n      if (request.nativeBroker) {\n        // signal ests that this is a WAM call\n        parameterBuilder.addNativeBroker();\n        // pass the req_cnf for POP\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n          const popTokenGenerator = new PopTokenGenerator(_this5.cryptoUtils);\n          // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n          const reqCnfData = yield popTokenGenerator.generateCnf(request);\n          parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n        }\n      }\n      return parameterBuilder.createQueryString();\n    })();\n  }\n  /**\n   * This API validates the `EndSessionRequest` and creates a URL\n   * @param request\n   */\n  createLogoutUrlQueryString(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n   * @param account\n   */\n  extractAccountSid(account) {\n    return account.idTokenClaims?.sid || null;\n  }\n  extractLoginHint(account) {\n    return account.idTokenClaims?.login_hint || null;\n  }\n}\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["_asyncToGenerator","BaseClient","RequestParameterBuilder","Separators","AADServerParamKeys","GrantType","AuthenticationScheme","PromptValue","HeaderNames","isOidcProtocolMode","ResponseHandler","StringUtils","ClientAuthError","UrlString","PopTokenGenerator","TimeUtils","buildClientInfo","buildClientInfoFromHomeAccountId","CcsCredentialType","ClientConfigurationError","RequestValidator","PerformanceEvents","invokeAsync","AuthorizationCodeClient","constructor","configuration","performanceClient","includeRedirectUri","oidcDefaultScopes","config","authOptions","authority","options","OIDCOptions","defaultScopes","getAuthCodeUrl","request","_this","addQueueMeasurement","GetAuthCodeUrl","correlationId","queryString","createAuthCodeUrlQueryString","bind","AuthClientCreateQueryString","logger","appendQueryString","authorizationEndpoint","acquireToken","authCodePayload","_this2","AuthClientAcquireToken","code","createTokenRequestCannotBeMadeError","reqTimestamp","nowSeconds","response","executeTokenRequest","AuthClientExecuteTokenRequest","requestId","headers","X_MS_REQUEST_ID","responseHandler","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","HandleServerTokenResponse","undefined","handleFragmentResponse","hashFragment","cachedState","serverParams","getDeserializedCodeResponse","serverResponseType","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","_this3","queryParametersString","createTokenQueryParameters","endpoint","tokenEndpoint","requestBody","createTokenRequestBody","AuthClientCreateTokenRequestBody","ccsCredential","clientInfo","credential","uid","CLIENT_INFO_SEPARATOR","utid","type","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","BaseClientExecutePostToTokenEndpoint","_this4","parameterBuilder","addClientId","tokenBodyParameters","CLIENT_ID","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","POP","popTokenGenerator","setPreQueueTime","PopTokenGenerateCnf","reqCnfData","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","addExtraQueryParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","createQueryString","_this5","extraQueryParameters","requestScopes","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { Separators, AADServerParamKeys, GrantType, AuthenticationScheme, PromptValue, HeaderNames } from '../utils/Constants.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from '../request/RequestValidator.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Oauth2.0 Authorization Code client\n * @internal\n */\nclass AuthorizationCodeClient extends BaseClient {\n    constructor(configuration, performanceClient) {\n        super(configuration, performanceClient);\n        // Flag to indicate if client is for hybrid spa auth code redemption\n        this.includeRedirectUri = true;\n        this.oidcDefaultScopes =\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n        const queryString = await invokeAsync(this.createAuthCodeUrlQueryString.bind(this), PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request, authCodePayload) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n        if (!request.code) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    }\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment, cachedState) {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n        const serverParams = UrlString.getDeserializedCodeResponse(this.config.authOptions.authority.options.OIDCOptions\n            ?.serverResponseType, hashFragment);\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code,\n        };\n    }\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest) {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n        // Construct logout URI\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    async executeTokenRequest(authority, request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        let ccsCredential = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            }\n            catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const thumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.BaseClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId);\n    }\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n            this.config.authOptions.clientId);\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        }\n        else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        }\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            }\n            else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n        const correlationId = request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        if (!StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        let ccsCred = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            }\n            catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        else {\n            ccsCred = request.ccsCredential;\n        }\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\n                            e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode &&\n            (!request.tokenBodyParameters ||\n                !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\",\n            });\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    async createAuthCodeUrlQueryString(request) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n        parameterBuilder.addClientId(request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] ||\n            this.config.authOptions.clientId);\n        const requestScopes = [\n            ...(request.scopes || []),\n            ...(request.extraScopesToConsent || []),\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!isOidcProtocolMode(this.config)) {\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        }\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            }\n            else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n                else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n                else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                }\n                else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    }\n                    catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            }\n            else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        }\n        else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.claims ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            }\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    createLogoutUrlQueryString(request) {\n        const parameterBuilder = new RequestParameterBuilder();\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    extractAccountSid(account) {\n        return account.idTokenClaims?.sid || null;\n    }\n    extractLoginHint(account) {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n\nexport { AuthorizationCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}