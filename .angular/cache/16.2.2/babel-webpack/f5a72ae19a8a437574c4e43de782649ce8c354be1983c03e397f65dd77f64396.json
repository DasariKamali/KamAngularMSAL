{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserProtocolUtils {\n  /**\n   * Extracts the BrowserStateObject from the state string.\n   * @param browserCrypto\n   * @param state\n   */\n  static extractBrowserRequestState(browserCrypto, state) {\n    if (!state) {\n      return null;\n    }\n    try {\n      const requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  }\n  /**\n   * Parses properties of server response from url hash\n   * @param locationHash Hash from url\n   */\n  static parseServerResponseFromHash(locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n    const hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  }\n}\nexport { BrowserProtocolUtils };","map":{"version":3,"names":["ProtocolUtils","ClientAuthError","UrlString","BrowserProtocolUtils","extractBrowserRequestState","browserCrypto","state","requestStateObj","parseRequestState","libraryState","meta","e","createInvalidStateError","parseServerResponseFromHash","locationHash","hashUrlString","getDeserializedHash","getHash"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserProtocolUtils {\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto\n     * @param state\n     */\n    static extractBrowserRequestState(browserCrypto, state) {\n        if (!state) {\n            return null;\n        }\n        try {\n            const requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta;\n        }\n        catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(locationHash) {\n        if (!locationHash) {\n            return {};\n        }\n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n\nexport { BrowserProtocolUtils };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,aAAa,EAAEC,eAAe,EAAEC,SAAS,QAAQ,oBAAoB;;AAE9E;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;AACA;EACI,OAAOC,0BAA0BA,CAACC,aAAa,EAAEC,KAAK,EAAE;IACpD,IAAI,CAACA,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,IAAI;MACA,MAAMC,eAAe,GAAGP,aAAa,CAACQ,iBAAiB,CAACH,aAAa,EAAEC,KAAK,CAAC;MAC7E,OAAOC,eAAe,CAACE,YAAY,CAACC,IAAI;IAC5C,CAAC,CACD,OAAOC,CAAC,EAAE;MACN,MAAMV,eAAe,CAACW,uBAAuB,CAACN,KAAK,EAAEK,CAAC,CAAC;IAC3D;EACJ;EACA;AACJ;AACA;AACA;EACI,OAAOE,2BAA2BA,CAACC,YAAY,EAAE;IAC7C,IAAI,CAACA,YAAY,EAAE;MACf,OAAO,CAAC,CAAC;IACb;IACA,MAAMC,aAAa,GAAG,IAAIb,SAAS,CAACY,YAAY,CAAC;IACjD,OAAOZ,SAAS,CAACc,mBAAmB,CAACD,aAAa,CAACE,OAAO,CAAC,CAAC,CAAC;EACjE;AACJ;AAEA,SAASd,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}