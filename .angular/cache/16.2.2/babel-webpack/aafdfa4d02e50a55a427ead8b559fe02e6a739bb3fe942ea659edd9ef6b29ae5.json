{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * REFRESH_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\n *\n * Value:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n * }\n */\nclass RefreshTokenEntity extends CredentialEntity {\n  /**\n   * Create RefreshTokenEntity\n   * @param homeAccountId\n   * @param authenticationResult\n   * @param clientId\n   * @param authority\n   */\n  static createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n    const rtEntity = new RefreshTokenEntity();\n    rtEntity.clientId = clientId;\n    rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n    rtEntity.environment = environment;\n    rtEntity.homeAccountId = homeAccountId;\n    rtEntity.secret = refreshToken;\n    rtEntity.userAssertionHash = userAssertionHash;\n    if (familyId) rtEntity.familyId = familyId;\n    return rtEntity;\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isRefreshTokenEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n  }\n}\nexport { RefreshTokenEntity };","map":{"version":3,"names":["CredentialEntity","CredentialType","RefreshTokenEntity","createRefreshTokenEntity","homeAccountId","environment","refreshToken","clientId","familyId","userAssertionHash","rtEntity","credentialType","REFRESH_TOKEN","secret","isRefreshTokenEntity","entity","hasOwnProperty"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/cache/entities/RefreshTokenEntity.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * REFRESH_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\n *\n * Value:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n * }\n */\nclass RefreshTokenEntity extends CredentialEntity {\n    /**\n     * Create RefreshTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n        const rtEntity = new RefreshTokenEntity();\n        rtEntity.clientId = clientId;\n        rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n        rtEntity.environment = environment;\n        rtEntity.homeAccountId = homeAccountId;\n        rtEntity.secret = refreshToken;\n        rtEntity.userAssertionHash = userAssertionHash;\n        if (familyId)\n            rtEntity.familyId = familyId;\n        return rtEntity;\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isRefreshTokenEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN);\n    }\n}\n\nexport { RefreshTokenEntity };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,cAAc,QAAQ,2BAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASF,gBAAgB,CAAC;EAC9C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,wBAAwBA,CAACC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,iBAAiB,EAAE;IAC7G,MAAMC,QAAQ,GAAG,IAAIR,kBAAkB,CAAC,CAAC;IACzCQ,QAAQ,CAACH,QAAQ,GAAGA,QAAQ;IAC5BG,QAAQ,CAACC,cAAc,GAAGV,cAAc,CAACW,aAAa;IACtDF,QAAQ,CAACL,WAAW,GAAGA,WAAW;IAClCK,QAAQ,CAACN,aAAa,GAAGA,aAAa;IACtCM,QAAQ,CAACG,MAAM,GAAGP,YAAY;IAC9BI,QAAQ,CAACD,iBAAiB,GAAGA,iBAAiB;IAC9C,IAAID,QAAQ,EACRE,QAAQ,CAACF,QAAQ,GAAGA,QAAQ;IAChC,OAAOE,QAAQ;EACnB;EACA;AACJ;AACA;AACA;EACI,OAAOI,oBAAoBA,CAACC,MAAM,EAAE;IAChC,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IAChB;IACA,OAAQA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IAC1CD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,QAAQ,CAAC,IAC/BD,MAAM,CAAC,gBAAgB,CAAC,KAAKd,cAAc,CAACW,aAAa;EACjE;AACJ;AAEA,SAASV,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}