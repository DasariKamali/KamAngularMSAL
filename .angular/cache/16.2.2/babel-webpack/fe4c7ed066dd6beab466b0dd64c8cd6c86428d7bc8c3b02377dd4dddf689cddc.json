{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass PerformanceClient {\n  /**\n   * Creates an instance of PerformanceClient,\n   * an abstract class containing core performance telemetry logic.\n   *\n   * @constructor\n   * @param {string} clientId Client ID of the application\n   * @param {string} authority Authority used by the application\n   * @param {Logger} logger Logger used by the application\n   * @param {string} libraryName Name of the library\n   * @param {string} libraryVersion Version of the library\n   * @param {ApplicationTelemetry} applicationTelemetry application name and version\n   * @param {Set<String>} intFields integer fields to be truncated\n   */\n  constructor(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, intFields) {\n    this.authority = authority;\n    this.libraryName = libraryName;\n    this.libraryVersion = libraryVersion;\n    this.applicationTelemetry = applicationTelemetry;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.callbacks = new Map();\n    this.eventsByCorrelationId = new Map();\n    this.queueMeasurements = new Map();\n    this.preQueueTimeByCorrelationId = new Map();\n    this.intFields = intFields || new Set();\n    for (const item of IntFields) {\n      this.intFields.add(item);\n    }\n  }\n  /**\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n   * Note: this function can be changed to abstract at the next major version bump.\n   *\n   * @param {string} measureName\n   * @param {string} correlationId\n   * @returns {IPerformanceMeasurement}\n   */\n  startPerformanceMeasurement(measureName,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  correlationId // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    return {};\n  }\n  /**\n   * Gets map of pre-queue times by correlation Id\n   *\n   * @param {PerformanceEvents} eventName\n   * @param {string} correlationId\n   * @returns {number}\n   */\n  getPreQueueTime(eventName, correlationId) {\n    const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    if (!preQueueEvent) {\n      this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\n      return;\n    } else if (preQueueEvent.name !== eventName) {\n      this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\n      return;\n    }\n    return preQueueEvent.time;\n  }\n  /**\n   * Calculates the difference between current time and time when function was queued.\n   * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n   *\n   * @param {number} preQueueTime\n   * @param {number} currentTime\n   * @returns {number}\n   */\n  calculateQueuedTime(preQueueTime, currentTime) {\n    if (preQueueTime < 1) {\n      this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\n      return 0;\n    }\n    if (currentTime < 1) {\n      this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\n      return 0;\n    }\n    if (currentTime < preQueueTime) {\n      this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n      return 0;\n    }\n    return currentTime - preQueueTime;\n  }\n  /**\n   * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n   *\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @param {?number} queueTime\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n   * @returns\n   */\n  addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!correlationId) {\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\n      return;\n    }\n    if (queueTime === 0) {\n      // Possible for there to be no queue time after calculation\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\n    } else if (!queueTime) {\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\n      return;\n    }\n    const queueMeasurement = {\n      eventName,\n      queueTime,\n      manuallyCompleted\n    };\n    // Adds to existing correlation Id if present in queueMeasurements\n    const existingMeasurements = this.queueMeasurements.get(correlationId);\n    if (existingMeasurements) {\n      existingMeasurements.push(queueMeasurement);\n      this.queueMeasurements.set(correlationId, existingMeasurements);\n    } else {\n      // Sets new correlation Id if not present in queueMeasurements\n      this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\n      const measurementArray = [queueMeasurement];\n      this.queueMeasurements.set(correlationId, measurementArray);\n    }\n    // Delete processed pre-queue event.\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  }\n  /**\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n   *\n   * @param {PerformanceEvents} measureName\n   * @param {?string} [correlationId]\n   * @returns {InProgressPerformanceEvent}\n   */\n  startMeasurement(measureName, correlationId) {\n    // Generate a placeholder correlation if the request does not provide one\n    const eventCorrelationId = correlationId || this.generateId();\n    if (!correlationId) {\n      this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n    }\n    this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n    const performanceMeasurement = this.startPerformanceMeasurement(measureName, eventCorrelationId);\n    performanceMeasurement.startMeasurement();\n    const inProgressEvent = {\n      eventId: this.generateId(),\n      status: PerformanceEventStatus.InProgress,\n      authority: this.authority,\n      libraryName: this.libraryName,\n      libraryVersion: this.libraryVersion,\n      clientId: this.clientId,\n      name: measureName,\n      startTimeMs: Date.now(),\n      correlationId: eventCorrelationId,\n      appName: this.applicationTelemetry?.appName,\n      appVersion: this.applicationTelemetry?.appVersion\n    };\n    // Store in progress events so they can be discarded if not ended properly\n    this.cacheEventByCorrelationId(inProgressEvent);\n    // Return the event and functions the caller can use to properly end/flush the measurement\n    return {\n      end: event => {\n        return this.endMeasurement({\n          // Initial set of event properties\n          ...inProgressEvent,\n          // Properties set when event ends\n          ...event\n        }, performanceMeasurement);\n      },\n      discard: () => {\n        return this.discardMeasurements(inProgressEvent.correlationId);\n      },\n      add: fields => {\n        return this.addFields(fields, inProgressEvent.correlationId);\n      },\n      increment: fields => {\n        return this.incrementFields(fields, inProgressEvent.correlationId);\n      },\n      measurement: performanceMeasurement,\n      event: inProgressEvent\n    };\n  }\n  /**\n   * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n   * as consumers should instead use the function returned by startMeasurement.\n   * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\n   * otherwise.\n   *\n   * @param {PerformanceEvent} event\n   * @param {IPerformanceMeasurement} measurement\n   * @returns {(PerformanceEvent | null)}\n   */\n  endMeasurement(event, measurement) {\n    const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (!rootEvent) {\n      this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n      return null;\n    }\n    const isRoot = event.eventId === rootEvent.eventId;\n    let queueInfo = {\n      totalQueueTime: 0,\n      totalQueueCount: 0,\n      manuallyCompletedCount: 0\n    };\n    if (isRoot) {\n      queueInfo = this.getQueueInfo(event.correlationId);\n      this.discardCache(rootEvent.correlationId);\n    } else {\n      rootEvent.incompleteSubMeasurements?.delete(event.eventId);\n    }\n    measurement?.endMeasurement();\n    const durationMs = measurement?.flushMeasurement();\n    // null indicates no measurement was taken (e.g. needed performance APIs not present)\n    if (!durationMs) {\n      this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\n      return null;\n    }\n    this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\n    // Add sub-measurement attribute to root event.\n    if (!isRoot) {\n      rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\n      return {\n        ...rootEvent\n      };\n    }\n    let finalEvent = {\n      ...rootEvent,\n      ...event\n    };\n    let incompleteSubsCount = 0;\n    // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n    finalEvent.incompleteSubMeasurements?.forEach(subMeasurement => {\n      this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\n      incompleteSubsCount++;\n    });\n    finalEvent.incompleteSubMeasurements = undefined;\n    finalEvent = {\n      ...finalEvent,\n      durationMs: Math.round(durationMs),\n      queuedTimeMs: queueInfo.totalQueueTime,\n      queuedCount: queueInfo.totalQueueCount,\n      queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n      status: PerformanceEventStatus.Completed,\n      incompleteSubsCount\n    };\n    this.truncateIntegralFields(finalEvent);\n    this.emitEvents([finalEvent], event.correlationId);\n    return finalEvent;\n  }\n  /**\n   * Saves extra information to be emitted when the measurements are flushed\n   * @param fields\n   * @param correlationId\n   */\n  addFields(fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating static fields\");\n    const event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      this.eventsByCorrelationId.set(correlationId, {\n        ...event,\n        ...fields\n      });\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  }\n  /**\n   * Increment counters to be emitted when the measurements are flushed\n   * @param fields {string[]}\n   * @param correlationId {string} correlation identifier\n   */\n  incrementFields(fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating counters\");\n    const event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      for (const counter in fields) {\n        if (!event.hasOwnProperty(counter)) {\n          event[counter] = 0;\n        } else if (isNaN(Number(event[counter]))) {\n          return;\n        }\n        event[counter] += fields[counter];\n      }\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  }\n  /**\n   * Upserts event into event cache.\n   * First key is the correlation id, second key is the event id.\n   * Allows for events to be grouped by correlation id,\n   * and to easily allow for properties on them to be updated.\n   *\n   * @private\n   * @param {PerformanceEvent} event\n   */\n  cacheEventByCorrelationId(event) {\n    const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (rootEvent) {\n      this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n      rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\n      rootEvent.incompleteSubMeasurements.set(event.eventId, {\n        name: event.name,\n        startTimeMs: event.startTimeMs\n      });\n    } else {\n      this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n      this.eventsByCorrelationId.set(event.correlationId, {\n        ...event\n      });\n    }\n  }\n  getQueueInfo(correlationId) {\n    const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n    if (!queueMeasurementForCorrelationId) {\n      this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\n    }\n    let totalQueueTime = 0;\n    let totalQueueCount = 0;\n    let manuallyCompletedCount = 0;\n    queueMeasurementForCorrelationId?.forEach(measurement => {\n      totalQueueTime += measurement.queueTime;\n      totalQueueCount++;\n      manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n    });\n    return {\n      totalQueueTime,\n      totalQueueCount,\n      manuallyCompletedCount\n    };\n  }\n  /**\n   * Removes measurements for a given correlation id.\n   *\n   * @param {string} correlationId\n   */\n  discardMeasurements(correlationId) {\n    this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n    this.eventsByCorrelationId.delete(correlationId);\n  }\n  /**\n   * Removes cache for a given correlation id.\n   *\n   * @param {string} correlationId correlation identifier\n   */\n  discardCache(correlationId) {\n    this.discardMeasurements(correlationId);\n    this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n    this.queueMeasurements.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  }\n  /**\n   * Registers a callback function to receive performance events.\n   *\n   * @param {PerformanceCallbackFunction} callback\n   * @returns {string}\n   */\n  addPerformanceCallback(callback) {\n    const callbackId = this.generateId();\n    this.callbacks.set(callbackId, callback);\n    this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n    return callbackId;\n  }\n  /**\n   * Removes a callback registered with addPerformanceCallback.\n   *\n   * @param {string} callbackId\n   * @returns {boolean}\n   */\n  removePerformanceCallback(callbackId) {\n    const result = this.callbacks.delete(callbackId);\n    if (result) {\n      this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n    } else {\n      this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n    }\n    return result;\n  }\n  /**\n   * Emits events to all registered callbacks.\n   *\n   * @param {PerformanceEvent[]} events\n   * @param {?string} [correlationId]\n   */\n  emitEvents(events, correlationId) {\n    this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n    this.callbacks.forEach((callback, callbackId) => {\n      this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n      callback.apply(null, [events]);\n    });\n  }\n  /**\n   * Enforce truncation of integral fields in performance event.\n   * @param {PerformanceEvent} event performance event to update.\n   * @param {Set<string>} intFields integral fields.\n   */\n  truncateIntegralFields(event) {\n    this.intFields.forEach(key => {\n      if (key in event && typeof event[key] === \"number\") {\n        event[key] = Math.floor(event[key]);\n      }\n    });\n  }\n}\nexport { PerformanceClient };","map":{"version":3,"names":["IntFields","PerformanceEventStatus","PerformanceClient","constructor","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","intFields","callbacks","Map","eventsByCorrelationId","queueMeasurements","preQueueTimeByCorrelationId","Set","item","add","startPerformanceMeasurement","measureName","correlationId","getPreQueueTime","eventName","preQueueEvent","get","trace","name","time","calculateQueuedTime","preQueueTime","currentTime","addQueueMeasurement","queueTime","manuallyCompleted","queueMeasurement","existingMeasurements","push","set","measurementArray","delete","startMeasurement","eventCorrelationId","generateId","info","performanceMeasurement","inProgressEvent","eventId","status","InProgress","startTimeMs","Date","now","appName","appVersion","cacheEventByCorrelationId","end","event","endMeasurement","discard","discardMeasurements","fields","addFields","increment","incrementFields","measurement","rootEvent","isRoot","queueInfo","totalQueueTime","totalQueueCount","manuallyCompletedCount","getQueueInfo","discardCache","incompleteSubMeasurements","durationMs","flushMeasurement","Math","floor","finalEvent","incompleteSubsCount","forEach","subMeasurement","undefined","round","queuedTimeMs","queuedCount","queuedManuallyCompletedCount","Completed","truncateIntegralFields","emitEvents","counter","hasOwnProperty","isNaN","Number","queueMeasurementForCorrelationId","addPerformanceCallback","callback","callbackId","verbose","removePerformanceCallback","result","events","apply","key"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceClient.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass PerformanceClient {\n    /**\n     * Creates an instance of PerformanceClient,\n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     * @param {ApplicationTelemetry} applicationTelemetry application name and version\n     * @param {Set<String>} intFields integer fields to be truncated\n     */\n    constructor(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, intFields) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.queueMeasurements = new Map();\n        this.preQueueTimeByCorrelationId = new Map();\n        this.intFields = intFields || new Set();\n        for (const item of IntFields) {\n            this.intFields.add(item);\n        }\n    }\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this function can be changed to abstract at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     */\n    startPerformanceMeasurement(measureName, // eslint-disable-line @typescript-eslint/no-unused-vars\n    correlationId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return {};\n    }\n    /**\n     * Gets map of pre-queue times by correlation Id\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns {number}\n     */\n    getPreQueueTime(eventName, correlationId) {\n        const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n        if (!preQueueEvent) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\n            return;\n        }\n        else if (preQueueEvent.name !== eventName) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\n            return;\n        }\n        return preQueueEvent.time;\n    }\n    /**\n     * Calculates the difference between current time and time when function was queued.\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n     *\n     * @param {number} preQueueTime\n     * @param {number} currentTime\n     * @returns {number}\n     */\n    calculateQueuedTime(preQueueTime, currentTime) {\n        if (preQueueTime < 1) {\n            this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\n            return 0;\n        }\n        if (currentTime < 1) {\n            this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\n            return 0;\n        }\n        if (currentTime < preQueueTime) {\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n            return 0;\n        }\n        return currentTime - preQueueTime;\n    }\n    /**\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n        if (!correlationId) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\n            return;\n        }\n        if (queueTime === 0) {\n            // Possible for there to be no queue time after calculation\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\n        }\n        else if (!queueTime) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\n            return;\n        }\n        const queueMeasurement = {\n            eventName,\n            queueTime,\n            manuallyCompleted,\n        };\n        // Adds to existing correlation Id if present in queueMeasurements\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\n        if (existingMeasurements) {\n            existingMeasurements.push(queueMeasurement);\n            this.queueMeasurements.set(correlationId, existingMeasurements);\n        }\n        else {\n            // Sets new correlation Id if not present in queueMeasurements\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\n            const measurementArray = [queueMeasurement];\n            this.queueMeasurements.set(correlationId, measurementArray);\n        }\n        // Delete processed pre-queue event.\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(measureName, correlationId) {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n        }\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n        const performanceMeasurement = this.startPerformanceMeasurement(measureName, eventCorrelationId);\n        performanceMeasurement.startMeasurement();\n        const inProgressEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n        };\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            end: (event) => {\n                return this.endMeasurement({\n                    // Initial set of event properties\n                    ...inProgressEvent,\n                    // Properties set when event ends\n                    ...event,\n                }, performanceMeasurement);\n            },\n            discard: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            add: (fields) => {\n                return this.addFields(fields, inProgressEvent.correlationId);\n            },\n            increment: (fields) => {\n                return this.incrementFields(fields, inProgressEvent.correlationId);\n            },\n            measurement: performanceMeasurement,\n            event: inProgressEvent,\n        };\n    }\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\n     * otherwise.\n     *\n     * @param {PerformanceEvent} event\n     * @param {IPerformanceMeasurement} measurement\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(event, measurement) {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (!rootEvent) {\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n            return null;\n        }\n        const isRoot = event.eventId === rootEvent.eventId;\n        let queueInfo = {\n            totalQueueTime: 0,\n            totalQueueCount: 0,\n            manuallyCompletedCount: 0,\n        };\n        if (isRoot) {\n            queueInfo = this.getQueueInfo(event.correlationId);\n            this.discardCache(rootEvent.correlationId);\n        }\n        else {\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\n        }\n        measurement?.endMeasurement();\n        const durationMs = measurement?.flushMeasurement();\n        // null indicates no measurement was taken (e.g. needed performance APIs not present)\n        if (!durationMs) {\n            this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\n            return null;\n        }\n        this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\n        // Add sub-measurement attribute to root event.\n        if (!isRoot) {\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\n            return { ...rootEvent };\n        }\n        let finalEvent = { ...rootEvent, ...event };\n        let incompleteSubsCount = 0;\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n        finalEvent.incompleteSubMeasurements?.forEach((subMeasurement) => {\n            this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\n            incompleteSubsCount++;\n        });\n        finalEvent.incompleteSubMeasurements = undefined;\n        finalEvent = {\n            ...finalEvent,\n            durationMs: Math.round(durationMs),\n            queuedTimeMs: queueInfo.totalQueueTime,\n            queuedCount: queueInfo.totalQueueCount,\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n            status: PerformanceEventStatus.Completed,\n            incompleteSubsCount,\n        };\n        this.truncateIntegralFields(finalEvent);\n        this.emitEvents([finalEvent], event.correlationId);\n        return finalEvent;\n    }\n    /**\n     * Saves extra information to be emitted when the measurements are flushed\n     * @param fields\n     * @param correlationId\n     */\n    addFields(fields, correlationId) {\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            this.eventsByCorrelationId.set(correlationId, {\n                ...event,\n                ...fields,\n            });\n        }\n        else {\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n        }\n    }\n    /**\n     * Increment counters to be emitted when the measurements are flushed\n     * @param fields {string[]}\n     * @param correlationId {string} correlation identifier\n     */\n    incrementFields(fields, correlationId) {\n        this.logger.trace(\"PerformanceClient: Updating counters\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            for (const counter in fields) {\n                if (!event.hasOwnProperty(counter)) {\n                    event[counter] = 0;\n                }\n                else if (isNaN(Number(event[counter]))) {\n                    return;\n                }\n                event[counter] += fields[counter];\n            }\n        }\n        else {\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n        }\n    }\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    cacheEventByCorrelationId(event) {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (rootEvent) {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n            rootEvent.incompleteSubMeasurements =\n                rootEvent.incompleteSubMeasurements || new Map();\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {\n                name: event.name,\n                startTimeMs: event.startTimeMs,\n            });\n        }\n        else {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\n        }\n    }\n    getQueueInfo(correlationId) {\n        const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n        if (!queueMeasurementForCorrelationId) {\n            this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\n        }\n        let totalQueueTime = 0;\n        let totalQueueCount = 0;\n        let manuallyCompletedCount = 0;\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\n            totalQueueTime += measurement.queueTime;\n            totalQueueCount++;\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n        });\n        return {\n            totalQueueTime,\n            totalQueueCount,\n            manuallyCompletedCount,\n        };\n    }\n    /**\n     * Removes measurements for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId) {\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n        this.eventsByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Removes cache for a given correlation id.\n     *\n     * @param {string} correlationId correlation identifier\n     */\n    discardCache(correlationId) {\n        this.discardMeasurements(correlationId);\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n        this.queueMeasurements.delete(correlationId);\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback) {\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n        return callbackId;\n    }\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId) {\n        const result = this.callbacks.delete(callbackId);\n        if (result) {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n        }\n        else {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n        }\n        return result;\n    }\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events, correlationId) {\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n        this.callbacks.forEach((callback, callbackId) => {\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n            callback.apply(null, [events]);\n        });\n    }\n    /**\n     * Enforce truncation of integral fields in performance event.\n     * @param {PerformanceEvent} event performance event to update.\n     * @param {Set<string>} intFields integral fields.\n     */\n    truncateIntegralFields(event) {\n        this.intFields.forEach((key) => {\n            if (key in event && typeof event[key] === \"number\") {\n                event[key] = Math.floor(event[key]);\n            }\n        });\n    }\n}\n\nexport { PerformanceClient };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,EAAEC,sBAAsB,QAAQ,wBAAwB;;AAE1E;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAAEC,cAAc,EAAEC,oBAAoB,EAAEC,SAAS,EAAE;IACnG,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,qBAAqB,GAAG,IAAID,GAAG,CAAC,CAAC;IACtC,IAAI,CAACE,iBAAiB,GAAG,IAAIF,GAAG,CAAC,CAAC;IAClC,IAAI,CAACG,2BAA2B,GAAG,IAAIH,GAAG,CAAC,CAAC;IAC5C,IAAI,CAACF,SAAS,GAAGA,SAAS,IAAI,IAAIM,GAAG,CAAC,CAAC;IACvC,KAAK,MAAMC,IAAI,IAAIjB,SAAS,EAAE;MAC1B,IAAI,CAACU,SAAS,CAACQ,GAAG,CAACD,IAAI,CAAC;IAC5B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,2BAA2BA,CAACC,WAAW;EAAE;EACzCC,aAAa,CAAC;EAAA,EACZ;IACE,OAAO,CAAC,CAAC;EACb;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAACC,SAAS,EAAEF,aAAa,EAAE;IACtC,MAAMG,aAAa,GAAG,IAAI,CAACT,2BAA2B,CAACU,GAAG,CAACJ,aAAa,CAAC;IACzE,IAAI,CAACG,aAAa,EAAE;MAChB,IAAI,CAAClB,MAAM,CAACoB,KAAK,CAAE,kFAAiFL,aAAc,mCAAkC,CAAC;MACrJ;IACJ,CAAC,MACI,IAAIG,aAAa,CAACG,IAAI,KAAKJ,SAAS,EAAE;MACvC,IAAI,CAACjB,MAAM,CAACoB,KAAK,CAAE,kEAAiEH,SAAU,mCAAkC,CAAC;MACjI;IACJ;IACA,OAAOC,aAAa,CAACI,IAAI;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,mBAAmBA,CAACC,YAAY,EAAEC,WAAW,EAAE;IAC3C,IAAID,YAAY,GAAG,CAAC,EAAE;MAClB,IAAI,CAACxB,MAAM,CAACoB,KAAK,CAAE,wEAAuEI,YAAa,EAAC,CAAC;MACzG,OAAO,CAAC;IACZ;IACA,IAAIC,WAAW,GAAG,CAAC,EAAE;MACjB,IAAI,CAACzB,MAAM,CAACoB,KAAK,CAAE,uEAAsEK,WAAY,EAAC,CAAC;MACvG,OAAO,CAAC;IACZ;IACA,IAAIA,WAAW,GAAGD,YAAY,EAAE;MAC5B,IAAI,CAACxB,MAAM,CAACoB,KAAK,CAAC,6FAA6F,CAAC;MAChH,OAAO,CAAC;IACZ;IACA,OAAOK,WAAW,GAAGD,YAAY;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,mBAAmBA,CAACT,SAAS,EAAEF,aAAa,EAAEY,SAAS,EAAEC,iBAAiB,EAAE;IACxE,IAAI,CAACb,aAAa,EAAE;MAChB,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAE,yEAAwEH,SAAU,gCAA+B,CAAC;MACrI;IACJ;IACA,IAAIU,SAAS,KAAK,CAAC,EAAE;MACjB;MACA,IAAI,CAAC3B,MAAM,CAACoB,KAAK,CAAE,kEAAiEH,SAAU,OAAMU,SAAU,EAAC,CAAC;IACpH,CAAC,MACI,IAAI,CAACA,SAAS,EAAE;MACjB,IAAI,CAAC3B,MAAM,CAACoB,KAAK,CAAE,qEAAoEH,SAAU,EAAC,CAAC;MACnG;IACJ;IACA,MAAMY,gBAAgB,GAAG;MACrBZ,SAAS;MACTU,SAAS;MACTC;IACJ,CAAC;IACD;IACA,MAAME,oBAAoB,GAAG,IAAI,CAACtB,iBAAiB,CAACW,GAAG,CAACJ,aAAa,CAAC;IACtE,IAAIe,oBAAoB,EAAE;MACtBA,oBAAoB,CAACC,IAAI,CAACF,gBAAgB,CAAC;MAC3C,IAAI,CAACrB,iBAAiB,CAACwB,GAAG,CAACjB,aAAa,EAAEe,oBAAoB,CAAC;IACnE,CAAC,MACI;MACD;MACA,IAAI,CAAC9B,MAAM,CAACoB,KAAK,CAAE,+DAA8DL,aAAc,wBAAuB,CAAC;MACvH,MAAMkB,gBAAgB,GAAG,CAACJ,gBAAgB,CAAC;MAC3C,IAAI,CAACrB,iBAAiB,CAACwB,GAAG,CAACjB,aAAa,EAAEkB,gBAAgB,CAAC;IAC/D;IACA;IACA,IAAI,CAACxB,2BAA2B,CAACyB,MAAM,CAACnB,aAAa,CAAC;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoB,gBAAgBA,CAACrB,WAAW,EAAEC,aAAa,EAAE;IACzC;IACA,MAAMqB,kBAAkB,GAAGrB,aAAa,IAAI,IAAI,CAACsB,UAAU,CAAC,CAAC;IAC7D,IAAI,CAACtB,aAAa,EAAE;MAChB,IAAI,CAACf,MAAM,CAACsC,IAAI,CAAE,qDAAoDxB,WAAY,cAAa,EAAEsB,kBAAkB,CAAC;IACxH;IACA,IAAI,CAACpC,MAAM,CAACoB,KAAK,CAAE,0DAAyDN,WAAY,EAAC,EAAEsB,kBAAkB,CAAC;IAC9G,MAAMG,sBAAsB,GAAG,IAAI,CAAC1B,2BAA2B,CAACC,WAAW,EAAEsB,kBAAkB,CAAC;IAChGG,sBAAsB,CAACJ,gBAAgB,CAAC,CAAC;IACzC,MAAMK,eAAe,GAAG;MACpBC,OAAO,EAAE,IAAI,CAACJ,UAAU,CAAC,CAAC;MAC1BK,MAAM,EAAE/C,sBAAsB,CAACgD,UAAU;MACzC5C,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCJ,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBuB,IAAI,EAAEP,WAAW;MACjB8B,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACvB/B,aAAa,EAAEqB,kBAAkB;MACjCW,OAAO,EAAE,IAAI,CAAC5C,oBAAoB,EAAE4C,OAAO;MAC3CC,UAAU,EAAE,IAAI,CAAC7C,oBAAoB,EAAE6C;IAC3C,CAAC;IACD;IACA,IAAI,CAACC,yBAAyB,CAACT,eAAe,CAAC;IAC/C;IACA,OAAO;MACHU,GAAG,EAAGC,KAAK,IAAK;QACZ,OAAO,IAAI,CAACC,cAAc,CAAC;UACvB;UACA,GAAGZ,eAAe;UAClB;UACA,GAAGW;QACP,CAAC,EAAEZ,sBAAsB,CAAC;MAC9B,CAAC;MACDc,OAAO,EAAEA,CAAA,KAAM;QACX,OAAO,IAAI,CAACC,mBAAmB,CAACd,eAAe,CAACzB,aAAa,CAAC;MAClE,CAAC;MACDH,GAAG,EAAG2C,MAAM,IAAK;QACb,OAAO,IAAI,CAACC,SAAS,CAACD,MAAM,EAAEf,eAAe,CAACzB,aAAa,CAAC;MAChE,CAAC;MACD0C,SAAS,EAAGF,MAAM,IAAK;QACnB,OAAO,IAAI,CAACG,eAAe,CAACH,MAAM,EAAEf,eAAe,CAACzB,aAAa,CAAC;MACtE,CAAC;MACD4C,WAAW,EAAEpB,sBAAsB;MACnCY,KAAK,EAAEX;IACX,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIY,cAAcA,CAACD,KAAK,EAAEQ,WAAW,EAAE;IAC/B,MAAMC,SAAS,GAAG,IAAI,CAACrD,qBAAqB,CAACY,GAAG,CAACgC,KAAK,CAACpC,aAAa,CAAC;IACrE,IAAI,CAAC6C,SAAS,EAAE;MACZ,IAAI,CAAC5D,MAAM,CAACoB,KAAK,CAAE,gDAA+C+B,KAAK,CAACV,OAAQ,EAAC,EAAEU,KAAK,CAACpC,aAAa,CAAC;MACvG,OAAO,IAAI;IACf;IACA,MAAM8C,MAAM,GAAGV,KAAK,CAACV,OAAO,KAAKmB,SAAS,CAACnB,OAAO;IAClD,IAAIqB,SAAS,GAAG;MACZC,cAAc,EAAE,CAAC;MACjBC,eAAe,EAAE,CAAC;MAClBC,sBAAsB,EAAE;IAC5B,CAAC;IACD,IAAIJ,MAAM,EAAE;MACRC,SAAS,GAAG,IAAI,CAACI,YAAY,CAACf,KAAK,CAACpC,aAAa,CAAC;MAClD,IAAI,CAACoD,YAAY,CAACP,SAAS,CAAC7C,aAAa,CAAC;IAC9C,CAAC,MACI;MACD6C,SAAS,CAACQ,yBAAyB,EAAElC,MAAM,CAACiB,KAAK,CAACV,OAAO,CAAC;IAC9D;IACAkB,WAAW,EAAEP,cAAc,CAAC,CAAC;IAC7B,MAAMiB,UAAU,GAAGV,WAAW,EAAEW,gBAAgB,CAAC,CAAC;IAClD;IACA,IAAI,CAACD,UAAU,EAAE;MACb,IAAI,CAACrE,MAAM,CAACoB,KAAK,CAAC,sDAAsD,EAAEwC,SAAS,CAAC7C,aAAa,CAAC;MAClG,OAAO,IAAI;IACf;IACA,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAE,wDAAuD+B,KAAK,CAAC9B,IAAK,KAAIgD,UAAW,KAAI,EAAElB,KAAK,CAACpC,aAAa,CAAC;IAC9H;IACA,IAAI,CAAC8C,MAAM,EAAE;MACTD,SAAS,CAACT,KAAK,CAAC9B,IAAI,GAAG,YAAY,CAAC,GAAGkD,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;MAC7D,OAAO;QAAE,GAAGT;MAAU,CAAC;IAC3B;IACA,IAAIa,UAAU,GAAG;MAAE,GAAGb,SAAS;MAAE,GAAGT;IAAM,CAAC;IAC3C,IAAIuB,mBAAmB,GAAG,CAAC;IAC3B;IACAD,UAAU,CAACL,yBAAyB,EAAEO,OAAO,CAAEC,cAAc,IAAK;MAC9D,IAAI,CAAC5E,MAAM,CAACoB,KAAK,CAAE,gDAA+CwD,cAAc,CAACvD,IAAK,cAAa8B,KAAK,CAAC9B,IAAK,EAAC,EAAEoD,UAAU,CAAC1D,aAAa,CAAC;MAC1I2D,mBAAmB,EAAE;IACzB,CAAC,CAAC;IACFD,UAAU,CAACL,yBAAyB,GAAGS,SAAS;IAChDJ,UAAU,GAAG;MACT,GAAGA,UAAU;MACbJ,UAAU,EAAEE,IAAI,CAACO,KAAK,CAACT,UAAU,CAAC;MAClCU,YAAY,EAAEjB,SAAS,CAACC,cAAc;MACtCiB,WAAW,EAAElB,SAAS,CAACE,eAAe;MACtCiB,4BAA4B,EAAEnB,SAAS,CAACG,sBAAsB;MAC9DvB,MAAM,EAAE/C,sBAAsB,CAACuF,SAAS;MACxCR;IACJ,CAAC;IACD,IAAI,CAACS,sBAAsB,CAACV,UAAU,CAAC;IACvC,IAAI,CAACW,UAAU,CAAC,CAACX,UAAU,CAAC,EAAEtB,KAAK,CAACpC,aAAa,CAAC;IAClD,OAAO0D,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;EACIjB,SAASA,CAACD,MAAM,EAAExC,aAAa,EAAE;IAC7B,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAC,2CAA2C,CAAC;IAC9D,MAAM+B,KAAK,GAAG,IAAI,CAAC5C,qBAAqB,CAACY,GAAG,CAACJ,aAAa,CAAC;IAC3D,IAAIoC,KAAK,EAAE;MACP,IAAI,CAAC5C,qBAAqB,CAACyB,GAAG,CAACjB,aAAa,EAAE;QAC1C,GAAGoC,KAAK;QACR,GAAGI;MACP,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAACvD,MAAM,CAACoB,KAAK,CAAC,wCAAwC,EAAEL,aAAa,CAAC;IAC9E;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI2C,eAAeA,CAACH,MAAM,EAAExC,aAAa,EAAE;IACnC,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAC,sCAAsC,CAAC;IACzD,MAAM+B,KAAK,GAAG,IAAI,CAAC5C,qBAAqB,CAACY,GAAG,CAACJ,aAAa,CAAC;IAC3D,IAAIoC,KAAK,EAAE;MACP,KAAK,MAAMkC,OAAO,IAAI9B,MAAM,EAAE;QAC1B,IAAI,CAACJ,KAAK,CAACmC,cAAc,CAACD,OAAO,CAAC,EAAE;UAChClC,KAAK,CAACkC,OAAO,CAAC,GAAG,CAAC;QACtB,CAAC,MACI,IAAIE,KAAK,CAACC,MAAM,CAACrC,KAAK,CAACkC,OAAO,CAAC,CAAC,CAAC,EAAE;UACpC;QACJ;QACAlC,KAAK,CAACkC,OAAO,CAAC,IAAI9B,MAAM,CAAC8B,OAAO,CAAC;MACrC;IACJ,CAAC,MACI;MACD,IAAI,CAACrF,MAAM,CAACoB,KAAK,CAAC,wCAAwC,EAAEL,aAAa,CAAC;IAC9E;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkC,yBAAyBA,CAACE,KAAK,EAAE;IAC7B,MAAMS,SAAS,GAAG,IAAI,CAACrD,qBAAqB,CAACY,GAAG,CAACgC,KAAK,CAACpC,aAAa,CAAC;IACrE,IAAI6C,SAAS,EAAE;MACX,IAAI,CAAC5D,MAAM,CAACoB,KAAK,CAAE,kDAAiD+B,KAAK,CAAC9B,IAAK,gBAAe,EAAE8B,KAAK,CAACpC,aAAa,CAAC;MACpH6C,SAAS,CAACQ,yBAAyB,GAC/BR,SAAS,CAACQ,yBAAyB,IAAI,IAAI9D,GAAG,CAAC,CAAC;MACpDsD,SAAS,CAACQ,yBAAyB,CAACpC,GAAG,CAACmB,KAAK,CAACV,OAAO,EAAE;QACnDpB,IAAI,EAAE8B,KAAK,CAAC9B,IAAI;QAChBuB,WAAW,EAAEO,KAAK,CAACP;MACvB,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAAC5C,MAAM,CAACoB,KAAK,CAAE,kDAAiD+B,KAAK,CAAC9B,IAAK,UAAS,EAAE8B,KAAK,CAACpC,aAAa,CAAC;MAC9G,IAAI,CAACR,qBAAqB,CAACyB,GAAG,CAACmB,KAAK,CAACpC,aAAa,EAAE;QAAE,GAAGoC;MAAM,CAAC,CAAC;IACrE;EACJ;EACAe,YAAYA,CAACnD,aAAa,EAAE;IACxB,MAAM0E,gCAAgC,GAAG,IAAI,CAACjF,iBAAiB,CAACW,GAAG,CAACJ,aAAa,CAAC;IAClF,IAAI,CAAC0E,gCAAgC,EAAE;MACnC,IAAI,CAACzF,MAAM,CAACoB,KAAK,CAAE,yEAAwEL,aAAc,EAAC,CAAC;IAC/G;IACA,IAAIgD,cAAc,GAAG,CAAC;IACtB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,sBAAsB,GAAG,CAAC;IAC9BwB,gCAAgC,EAAEd,OAAO,CAAEhB,WAAW,IAAK;MACvDI,cAAc,IAAIJ,WAAW,CAAChC,SAAS;MACvCqC,eAAe,EAAE;MACjBC,sBAAsB,IAAIN,WAAW,CAAC/B,iBAAiB,GAAG,CAAC,GAAG,CAAC;IACnE,CAAC,CAAC;IACF,OAAO;MACHmC,cAAc;MACdC,eAAe;MACfC;IACJ,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;EACIX,mBAAmBA,CAACvC,aAAa,EAAE;IAC/B,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAC,uDAAuD,EAAEL,aAAa,CAAC;IACzF,IAAI,CAACR,qBAAqB,CAAC2B,MAAM,CAACnB,aAAa,CAAC;EACpD;EACA;AACJ;AACA;AACA;AACA;EACIoD,YAAYA,CAACpD,aAAa,EAAE;IACxB,IAAI,CAACuC,mBAAmB,CAACvC,aAAa,CAAC;IACvC,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAC,gDAAgD,EAAEL,aAAa,CAAC;IAClF,IAAI,CAACP,iBAAiB,CAAC0B,MAAM,CAACnB,aAAa,CAAC;IAC5C,IAAI,CAACf,MAAM,CAACoB,KAAK,CAAC,8CAA8C,EAAEL,aAAa,CAAC;IAChF,IAAI,CAACN,2BAA2B,CAACyB,MAAM,CAACnB,aAAa,CAAC;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2E,sBAAsBA,CAACC,QAAQ,EAAE;IAC7B,MAAMC,UAAU,GAAG,IAAI,CAACvD,UAAU,CAAC,CAAC;IACpC,IAAI,CAAChC,SAAS,CAAC2B,GAAG,CAAC4D,UAAU,EAAED,QAAQ,CAAC;IACxC,IAAI,CAAC3F,MAAM,CAAC6F,OAAO,CAAE,+DAA8DD,UAAW,EAAC,CAAC;IAChG,OAAOA,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,yBAAyBA,CAACF,UAAU,EAAE;IAClC,MAAMG,MAAM,GAAG,IAAI,CAAC1F,SAAS,CAAC6B,MAAM,CAAC0D,UAAU,CAAC;IAChD,IAAIG,MAAM,EAAE;MACR,IAAI,CAAC/F,MAAM,CAAC6F,OAAO,CAAE,2CAA0CD,UAAW,WAAU,CAAC;IACzF,CAAC,MACI;MACD,IAAI,CAAC5F,MAAM,CAAC6F,OAAO,CAAE,2CAA0CD,UAAW,eAAc,CAAC;IAC7F;IACA,OAAOG,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIX,UAAUA,CAACY,MAAM,EAAEjF,aAAa,EAAE;IAC9B,IAAI,CAACf,MAAM,CAAC6F,OAAO,CAAC,gDAAgD,EAAE9E,aAAa,CAAC;IACpF,IAAI,CAACV,SAAS,CAACsE,OAAO,CAAC,CAACgB,QAAQ,EAAEC,UAAU,KAAK;MAC7C,IAAI,CAAC5F,MAAM,CAACoB,KAAK,CAAE,iDAAgDwE,UAAW,EAAC,EAAE7E,aAAa,CAAC;MAC/F4E,QAAQ,CAACM,KAAK,CAAC,IAAI,EAAE,CAACD,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIb,sBAAsBA,CAAChC,KAAK,EAAE;IAC1B,IAAI,CAAC/C,SAAS,CAACuE,OAAO,CAAEuB,GAAG,IAAK;MAC5B,IAAIA,GAAG,IAAI/C,KAAK,IAAI,OAAOA,KAAK,CAAC+C,GAAG,CAAC,KAAK,QAAQ,EAAE;QAChD/C,KAAK,CAAC+C,GAAG,CAAC,GAAG3B,IAAI,CAACC,KAAK,CAACrB,KAAK,CAAC+C,GAAG,CAAC,CAAC;MACvC;IACJ,CAAC,CAAC;EACN;AACJ;AAEA,SAAStG,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}