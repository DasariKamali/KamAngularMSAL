{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEvents = {\n  /**\n   * acquireTokenByCode API (msal-browser and msal-node).\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\n   * Used to renew an access token using a refresh token against the token endpoint.\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\n   * acquireTokenSilent API (msal-browser and msal-node).\n   * Used to silently acquire a new access token (from the cache or the network).\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\n   * acquireTokenSilentAsync (msal-browser).\n   * Internal API for acquireTokenSilent.\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\n   * acquireTokenPopup (msal-browser).\n   * Used to acquire a new access token interactively through pop ups\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\n   * signJwt API in CryptoOpts class (msal-browser).\n   * Used to signed a pop token.\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\n   * acquireToken API in the SilentCacheClient class (msal-browser).\n   * Used to read access tokens from the cache.\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\n   * acquireToken API in the SilentIframeClient class (msal-browser).\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  /**\n   * acquireToken API in SilentRereshClient (msal-browser).\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\n   * ssoSilent API (msal-browser).\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n   * Used to load authority metadata for a request.\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\n   * acquireToken APIs in msal-browser.\n   * Used to make an /authorize endpoint call with native brokering enabled.\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\n   * acquireToken API in NativeInteractionClient class (msal-browser).\n   * Used to acquire a token from Native component when native brokering is enabled.\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\n   * Time spent creating default headers for requests to token endpoint\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\n   * Time spent sending/waiting for the response of a request to the token endpoint\n   */\n  BaseClientExecutePostToTokenEndpoint: \"baseClientExecutePostToTokenEndpoint\",\n  /**\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\n   * Time taken for token acquisition by broker\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\n   * Time spent on the network for refresh token acquisition\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\n   * Time taken for acquiring refresh token , records RT size\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\n   * Time taken for acquiring cached refresh token\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\n   * acquireTokenFromCache (msal-browser).\n   * Internal API for acquiring token from cache\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  /**\n   * acquireTokenBySilentIframe (msal-browser).\n   * Internal API for acquiring token by silent Iframe\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  /**\n   * Helper function in SilentIframeClient class (msal-browser).\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\n   * SilentHandler\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  /**\n   * Helper functions in StandardInteractionClient class (msal-browser)\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n  /**\n   * getAuthCodeUrl API (msal-browser and msal-node).\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  /**\n   * Functions from InteractionHandler (msal-browser)\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponseFromHash: \"handleCodeResponseFromHash\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\n   * APIs in Authorization Code Client (msal-common)\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  AuthClientCreateQueryString: \"authClientCreateQueryString\",\n  /**\n   * Generate functions in PopTokenGenerator (msal-common)\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  /**\n   * Authority functions\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\n   * Region Discovery functions\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  /**\n   * Cache operations\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\"\n};\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\"]);\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"names":["PerformanceEvents","AcquireTokenByCode","AcquireTokenByRefreshToken","AcquireTokenSilent","AcquireTokenSilentAsync","AcquireTokenPopup","CryptoOptsGetPublicKeyThumbprint","CryptoOptsSignJwt","SilentCacheClientAcquireToken","SilentIframeClientAcquireToken","SilentRefreshClientAcquireToken","SsoSilent","StandardInteractionClientGetDiscoveredAuthority","FetchAccountIdWithNativeBroker","NativeInteractionClientAcquireToken","BaseClientCreateTokenRequestHeaders","BaseClientExecutePostToTokenEndpoint","BrokerHandhshake","AcquireTokenByRefreshTokenInBroker","AcquireTokenByBroker","RefreshTokenClientExecuteTokenRequest","RefreshTokenClientAcquireToken","RefreshTokenClientAcquireTokenWithCachedRefreshToken","RefreshTokenClientAcquireTokenByRefreshToken","RefreshTokenClientCreateTokenRequestBody","AcquireTokenFromCache","AcquireTokenBySilentIframe","InitializeBaseRequest","InitializeSilentRequest","InitializeClientApplication","SilentIframeClientTokenHelper","SilentHandlerInitiateAuthRequest","SilentHandlerMonitorIframeForHash","SilentHandlerLoadFrame","StandardInteractionClientCreateAuthCodeClient","StandardInteractionClientGetClientConfiguration","StandardInteractionClientInitializeAuthorizationRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","GetAuthCodeUrl","HandleCodeResponseFromServer","HandleCodeResponseFromHash","UpdateTokenEndpointAuthority","AuthClientAcquireToken","AuthClientExecuteTokenRequest","AuthClientCreateTokenRequestBody","AuthClientCreateQueryString","PopTokenGenerateCnf","PopTokenGenerateKid","HandleServerTokenResponse","AuthorityFactoryCreateDiscoveredInstance","AuthorityResolveEndpointsAsync","AuthorityGetCloudDiscoveryMetadataFromNetwork","AuthorityUpdateCloudDiscoveryMetadata","AuthorityGetEndpointMetadataFromNetwork","AuthorityUpdateEndpointMetadata","AuthorityUpdateMetadataWithRegionalInformation","RegionDiscoveryDetectRegion","RegionDiscoveryGetRegionFromIMDS","RegionDiscoveryGetCurrentVersion","AcquireTokenByCodeAsync","GetEndpointMetadataFromNetwork","GetCloudDiscoveryMetadataFromNetworkMeasurement","HandleRedirectPromiseMeasurement","UpdateCloudDiscoveryMetadataMeasurement","UsernamePasswordClientAcquireToken","NativeMessageHandlerHandshake","NativeGenerateAuthResult","ClearTokensAndKeysWithClaims","PerformanceEventStatus","NotStarted","InProgress","Completed","IntFields","Set"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEvents = {\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode: \"acquireTokenByCode\",\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent: \"acquireTokenSilent\",\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup: \"acquireTokenPopup\",\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\n     * Time spent sending/waiting for the response of a request to the token endpoint\n     */\n    BaseClientExecutePostToTokenEndpoint: \"baseClientExecutePostToTokenEndpoint\",\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake: \"brokerHandshake\",\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\n     * Time taken for token acquisition by broker\n     */\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n    /**\n     * Time taken for acquiring refresh token , records RT size\n     */\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n    /**\n     * Time taken for acquiring cached refresh token\n     */\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n    /**\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n    /**\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n    /**\n     * acquireTokenFromCache (msal-browser).\n     * Internal API for acquiring token from cache\n     */\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\n    /**\n     * acquireTokenBySilentIframe (msal-browser).\n     * Internal API for acquiring token by silent Iframe\n     */\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n    /**\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n     */\n    InitializeBaseRequest: \"initializeBaseRequest\",\n    /**\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n     */\n    InitializeSilentRequest: \"initializeSilentRequest\",\n    InitializeClientApplication: \"initializeClientApplication\",\n    /**\n     * Helper function in SilentIframeClient class (msal-browser).\n     */\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n    /**\n     * SilentHandler\n     */\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    /**\n     * Helper functions in StandardInteractionClient class (msal-browser)\n     */\n    StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n    /**\n     * getAuthCodeUrl API (msal-browser and msal-node).\n     */\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\n    /**\n     * Functions from InteractionHandler (msal-browser)\n     */\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponseFromHash: \"handleCodeResponseFromHash\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n    /**\n     * APIs in Authorization Code Client (msal-common)\n     */\n    AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n    /**\n     * Generate functions in PopTokenGenerator (msal-common)\n     */\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n    /**\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\n     */\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\n    /**\n     * Authority functions\n     */\n    AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n    /**\n     * Region Discovery functions\n     */\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n    /**\n     * Cache operations\n     */\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n};\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2,\n};\nconst IntFields = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n]);\n\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}