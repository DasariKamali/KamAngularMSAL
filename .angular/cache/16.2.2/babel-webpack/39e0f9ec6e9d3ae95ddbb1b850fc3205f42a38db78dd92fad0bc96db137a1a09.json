{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\nimport { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postRequestFailed } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nclass FetchClient {\n  /**\n   * Fetch Client for REST endpoints - Get request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  sendGetRequestAsync(url, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let response;\n      try {\n        response = yield fetch(url, {\n          method: HTTP_REQUEST_TYPE.GET,\n          headers: _this.getFetchHeaders(options)\n        });\n      } catch (e) {\n        if (window.navigator.onLine) {\n          throw createBrowserAuthError(getRequestFailed);\n        } else {\n          throw createBrowserAuthError(noNetworkConnectivity);\n        }\n      }\n      try {\n        return {\n          headers: _this.getHeaderDict(response.headers),\n          body: yield response.json(),\n          status: response.status\n        };\n      } catch (e) {\n        throw createBrowserAuthError(failedToParseResponse);\n      }\n    })();\n  }\n  /**\n   * Fetch Client for REST endpoints - Post request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  sendPostRequestAsync(url, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const reqBody = options && options.body || Constants.EMPTY_STRING;\n      let response;\n      try {\n        response = yield fetch(url, {\n          method: HTTP_REQUEST_TYPE.POST,\n          headers: _this2.getFetchHeaders(options),\n          body: reqBody\n        });\n      } catch (e) {\n        if (window.navigator.onLine) {\n          throw createBrowserAuthError(postRequestFailed);\n        } else {\n          throw createBrowserAuthError(noNetworkConnectivity);\n        }\n      }\n      try {\n        return {\n          headers: _this2.getHeaderDict(response.headers),\n          body: yield response.json(),\n          status: response.status\n        };\n      } catch (e) {\n        throw createBrowserAuthError(failedToParseResponse);\n      }\n    })();\n  }\n  /**\n   * Get Fetch API Headers object from string map\n   * @param inputHeaders\n   */\n  getFetchHeaders(options) {\n    const headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    const optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(key => {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  }\n  getHeaderDict(headers) {\n    const headerDict = {};\n    headers.forEach((value, key) => {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  }\n}\nexport { FetchClient };","map":{"version":3,"names":["_asyncToGenerator","Constants","createBrowserAuthError","HTTP_REQUEST_TYPE","getRequestFailed","noNetworkConnectivity","failedToParseResponse","postRequestFailed","FetchClient","sendGetRequestAsync","url","options","_this","response","fetch","method","GET","headers","getFetchHeaders","e","window","navigator","onLine","getHeaderDict","body","json","status","sendPostRequestAsync","_this2","reqBody","EMPTY_STRING","POST","Headers","optionsHeaders","Object","keys","forEach","key","append","headerDict","value"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/network/FetchClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\nimport { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postRequestFailed } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nclass FetchClient {\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendGetRequestAsync(url, options) {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options),\n            });\n        }\n        catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(getRequestFailed);\n            }\n            else {\n                throw createBrowserAuthError(noNetworkConnectivity);\n            }\n        }\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()),\n                status: response.status,\n            };\n        }\n        catch (e) {\n            throw createBrowserAuthError(failedToParseResponse);\n        }\n    }\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendPostRequestAsync(url, options) {\n        const reqBody = (options && options.body) || Constants.EMPTY_STRING;\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody,\n            });\n        }\n        catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(postRequestFailed);\n            }\n            else {\n                throw createBrowserAuthError(noNetworkConnectivity);\n            }\n        }\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()),\n                status: response.status,\n            };\n        }\n        catch (e) {\n            throw createBrowserAuthError(failedToParseResponse);\n        }\n    }\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders\n     */\n    getFetchHeaders(options) {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n    getHeaderDict(headers) {\n        const headerDict = {};\n        headers.forEach((value, key) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n\nexport { FetchClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}