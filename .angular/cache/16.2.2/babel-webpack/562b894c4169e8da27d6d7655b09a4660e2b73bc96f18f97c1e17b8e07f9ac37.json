{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nconst InteractionRequiredServerErrorMessage = [\"interaction_required\", \"consent_required\", \"login_required\"];\nconst InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\"];\n/**\n * Interaction required errors defined by the SDK\n */\nconst InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No refresh token found in the cache. Please sign-in.\"\n  },\n  native_account_unavailable: {\n    code: \"native_account_unavailable\",\n    desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\"\n  }\n};\n/**\n * Error thrown when user interaction is required.\n */\nclass InteractionRequiredAuthError extends AuthError {\n  constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {\n    super(errorCode, errorMessage, subError);\n    Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    this.timestamp = timestamp || Constants.EMPTY_STRING;\n    this.traceId = traceId || Constants.EMPTY_STRING;\n    this.correlationId = correlationId || Constants.EMPTY_STRING;\n    this.claims = claims || Constants.EMPTY_STRING;\n    this.name = \"InteractionRequiredAuthError\";\n  }\n  /**\n   * Helper function used to determine if an error thrown by the server requires interaction to resolve\n   * @param errorCode\n   * @param errorString\n   * @param subError\n   */\n  static isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(irErrorCode => {\n      return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n  }\n  /**\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\n   */\n  static createNoTokensFoundError() {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n  }\n  /**\n   * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\n   * @returns\n   */\n  static createNativeAccountUnavailableError() {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);\n  }\n}\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage };","map":{"version":3,"names":["Constants","AuthError","InteractionRequiredServerErrorMessage","InteractionRequiredAuthSubErrorMessage","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","desc","native_account_unavailable","InteractionRequiredAuthError","constructor","errorCode","errorMessage","subError","timestamp","traceId","correlationId","claims","Object","setPrototypeOf","prototype","EMPTY_STRING","name","isInteractionRequiredError","errorString","isInteractionRequiredErrorCode","indexOf","isInteractionRequiredSubError","isInteractionRequiredErrorDesc","some","irErrorCode","createNoTokensFoundError","createNativeAccountUnavailableError"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nconst InteractionRequiredServerErrorMessage = [\n    \"interaction_required\",\n    \"consent_required\",\n    \"login_required\",\n];\nconst InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n];\n/**\n * Interaction required errors defined by the SDK\n */\nconst InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No refresh token found in the cache. Please sign-in.\",\n    },\n    native_account_unavailable: {\n        code: \"native_account_unavailable\",\n        desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    },\n};\n/**\n * Error thrown when user interaction is required.\n */\nclass InteractionRequiredAuthError extends AuthError {\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\n        this.traceId = traceId || Constants.EMPTY_STRING;\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\n        this.claims = claims || Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n    }\n    /**\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\n     * @param errorCode\n     * @param errorString\n     * @param subError\n     */\n    static isInteractionRequiredError(errorCode, errorString, subError) {\n        const isInteractionRequiredErrorCode = !!errorCode &&\n            InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n        const isInteractionRequiredSubError = !!subError &&\n            InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n        const isInteractionRequiredErrorDesc = !!errorString &&\n            InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n                return errorString.indexOf(irErrorCode) > -1;\n            });\n        return (isInteractionRequiredErrorCode ||\n            isInteractionRequiredErrorDesc ||\n            isInteractionRequiredSubError);\n    }\n    /**\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\n     */\n    static createNoTokensFoundError() {\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n    }\n    /**\n     * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\n     * @returns\n     */\n    static createNativeAccountUnavailableError() {\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);\n    }\n}\n\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qCAAqC,GAAG,CAC1C,sBAAsB,EACtB,kBAAkB,EAClB,gBAAgB,CACnB;AACD,MAAMC,sCAAsC,GAAG,CAC3C,cAAc,EACd,mBAAmB,EACnB,cAAc,EACd,uBAAuB,EACvB,kBAAkB,CACrB;AACD;AACA;AACA;AACA,MAAMC,mCAAmC,GAAG;EACxCC,kBAAkB,EAAE;IAChBC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;EACV,CAAC;EACDC,0BAA0B,EAAE;IACxBF,IAAI,EAAE,4BAA4B;IAClCC,IAAI,EAAE;EACV;AACJ,CAAC;AACD;AACA;AACA;AACA,MAAME,4BAA4B,SAASR,SAAS,CAAC;EACjDS,WAAWA,CAACC,SAAS,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,aAAa,EAAEC,MAAM,EAAE;IACtF,KAAK,CAACN,SAAS,EAAEC,YAAY,EAAEC,QAAQ,CAAC;IACxCK,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEV,4BAA4B,CAACW,SAAS,CAAC;IACnE,IAAI,CAACN,SAAS,GAAGA,SAAS,IAAId,SAAS,CAACqB,YAAY;IACpD,IAAI,CAACN,OAAO,GAAGA,OAAO,IAAIf,SAAS,CAACqB,YAAY;IAChD,IAAI,CAACL,aAAa,GAAGA,aAAa,IAAIhB,SAAS,CAACqB,YAAY;IAC5D,IAAI,CAACJ,MAAM,GAAGA,MAAM,IAAIjB,SAAS,CAACqB,YAAY;IAC9C,IAAI,CAACC,IAAI,GAAG,8BAA8B;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,0BAA0BA,CAACZ,SAAS,EAAEa,WAAW,EAAEX,QAAQ,EAAE;IAChE,MAAMY,8BAA8B,GAAG,CAAC,CAACd,SAAS,IAC9CT,qCAAqC,CAACwB,OAAO,CAACf,SAAS,CAAC,GAAG,CAAC,CAAC;IACjE,MAAMgB,6BAA6B,GAAG,CAAC,CAACd,QAAQ,IAC5CV,sCAAsC,CAACuB,OAAO,CAACb,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjE,MAAMe,8BAA8B,GAAG,CAAC,CAACJ,WAAW,IAChDtB,qCAAqC,CAAC2B,IAAI,CAAEC,WAAW,IAAK;MACxD,OAAON,WAAW,CAACE,OAAO,CAACI,WAAW,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC,CAAC;IACN,OAAQL,8BAA8B,IAClCG,8BAA8B,IAC9BD,6BAA6B;EACrC;EACA;AACJ;AACA;EACI,OAAOI,wBAAwBA,CAAA,EAAG;IAC9B,OAAO,IAAItB,4BAA4B,CAACL,mCAAmC,CAACC,kBAAkB,CAACC,IAAI,EAAEF,mCAAmC,CAACC,kBAAkB,CAACE,IAAI,CAAC;EACrK;EACA;AACJ;AACA;AACA;EACI,OAAOyB,mCAAmCA,CAAA,EAAG;IACzC,OAAO,IAAIvB,4BAA4B,CAACL,mCAAmC,CAACI,0BAA0B,CAACF,IAAI,EAAEF,mCAAmC,CAACI,0BAA0B,CAACD,IAAI,CAAC;EACrL;AACJ;AAEA,SAASE,4BAA4B,EAAEL,mCAAmC,EAAED,sCAAsC,EAAED,qCAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}