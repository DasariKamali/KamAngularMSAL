{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { AuthToken, AccountEntity, CacheRecord, Authority, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { unableToLoadToken } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Token cache manager\n */\nclass TokenCache {\n  constructor(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\n   * API to load tokens to msal-browser cache.\n   * @param request\n   * @param response\n   * @param options\n   * @returns `AuthenticationResult` for the response that was loaded.\n   */\n  loadExternalTokens(request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n    if (!response.id_token) {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    const idTokenClaims = AuthToken.extractTokenClaims(response.id_token, base64Decode);\n    let cacheRecord;\n    let authority;\n    let cacheRecordAccount;\n    if (request.account) {\n      cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      const authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n      // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        cacheRecordAccount = this.loadAccount(idTokenClaims, authority, options.clientInfo);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        cacheRecordAccount = this.loadAccount(idTokenClaims, authority, response.client_info);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw createBrowserAuthError(unableToLoadToken);\n      }\n    } else {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    return this.generateAuthenticationResult(request, idTokenClaims, cacheRecord, cacheRecordAccount, authority);\n  }\n  /**\n   * Helper function to load account to msal-browser cache\n   * @param idToken\n   * @param environment\n   * @param clientInfo\n   * @param authorityType\n   * @param requestHomeAccountId\n   * @returns `AccountEntity`\n   */\n  loadAccount(idTokenClaims, authority, clientInfo, requestHomeAccountId) {\n    let homeAccountId;\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authority.authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n    }\n    if (!homeAccountId) {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    const accountEntity = AccountEntity.createAccount({\n      homeAccountId,\n      idTokenClaims: idTokenClaims,\n      clientInfo,\n      environment: authority.hostnameAndPort\n    }, authority);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n  }\n  /**\n   * Helper function to load id tokens to msal-browser cache\n   * @param idToken\n   * @param homeAccountId\n   * @param environment\n   * @param tenantId\n   * @returns `IdTokenEntity`\n   */\n  loadIdToken(idToken, homeAccountId, environment, tenantId) {\n    const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n  }\n  /**\n   * Helper function to load access tokens to msal-browser cache\n   * @param request\n   * @param response\n   * @param homeAccountId\n   * @param environment\n   * @param tenantId\n   * @returns `AccessTokenEntity`\n   */\n  loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n    if (!response.expires_in) {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    if (!options.extendedExpiresOn) {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    const scopes = new ScopeSet(request.scopes).printScopes();\n    const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    const extendedExpiresOn = options.extendedExpiresOn;\n    const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n  }\n  /**\n   * Helper function to load refresh tokens to msal-browser cache\n   * @param request\n   * @param response\n   * @param homeAccountId\n   * @param environment\n   * @returns `RefreshTokenEntity`\n   */\n  loadRefreshToken(request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n    const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n  }\n  /**\n   * Helper function to generate an `AuthenticationResult` for the result.\n   * @param request\n   * @param idTokenObj\n   * @param cacheRecord\n   * @param authority\n   * @returns `AuthenticationResult`\n   */\n  generateAuthenticationResult(request, idTokenClaims, cacheRecord, accountEntity, authority) {\n    let accessToken = Constants.EMPTY_STRING;\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    if (cacheRecord?.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    const uid = idTokenClaims.oid || idTokenClaims.sub || Constants.EMPTY_STRING;\n    const tid = idTokenClaims.tid || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountEntity.getAccountInfo(),\n      idToken: cacheRecord.idToken?.secret || \"\",\n      idTokenClaims: idTokenClaims || {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  }\n}\nexport { TokenCache };","map":{"version":3,"names":["AuthToken","AccountEntity","CacheRecord","Authority","IdTokenEntity","ScopeSet","AccessTokenEntity","RefreshTokenEntity","Constants","createBrowserAuthError","base64Decode","unableToLoadToken","TokenCache","constructor","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","loadExternalTokens","request","response","options","info","id_token","idTokenClaims","extractTokenClaims","cacheRecord","authority","cacheRecordAccount","account","createFromAccountInfo","loadIdToken","homeAccountId","environment","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","loadAccount","hostnameAndPort","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","authorityType","undefined","generateHomeAccountId","accountEntity","createAccount","verbose","setAccount","idToken","idTokenEntity","createIdTokenEntity","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","printScopes","expiresOn","Date","getTime","accessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","accessToken","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","fromCache","correlationId","requestId","familyId","tokenType","state","cloudGraphHostName","msGraphHost","code","fromNativeBroker"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { AuthToken, AccountEntity, CacheRecord, Authority, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { unableToLoadToken } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Token cache manager\n */\nclass TokenCache {\n    constructor(configuration, storage, logger, cryptoObj) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n    // Move getAllAccounts here and cache utility APIs\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     * @returns `AuthenticationResult` for the response that was loaded.\n     */\n    loadExternalTokens(request, response, options) {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n        if (!response.id_token) {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n        const idTokenClaims = AuthToken.extractTokenClaims(response.id_token, base64Decode);\n        let cacheRecord;\n        let authority;\n        let cacheRecordAccount;\n        if (request.account) {\n            cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\n            cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n        }\n        else if (request.authority) {\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n            const authorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata,\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\n            };\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                cacheRecordAccount = this.loadAccount(idTokenClaims, authority, options.clientInfo);\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n            }\n            else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                cacheRecordAccount = this.loadAccount(idTokenClaims, authority, response.client_info);\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(response.id_token, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n            }\n            else {\n                throw createBrowserAuthError(unableToLoadToken);\n            }\n        }\n        else {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n        return this.generateAuthenticationResult(request, idTokenClaims, cacheRecord, cacheRecordAccount, authority);\n    }\n    /**\n     * Helper function to load account to msal-browser cache\n     * @param idToken\n     * @param environment\n     * @param clientInfo\n     * @param authorityType\n     * @param requestHomeAccountId\n     * @returns `AccountEntity`\n     */\n    loadAccount(idTokenClaims, authority, clientInfo, requestHomeAccountId) {\n        let homeAccountId;\n        if (requestHomeAccountId) {\n            homeAccountId = requestHomeAccountId;\n        }\n        else if (authority.authorityType !== undefined && clientInfo) {\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        }\n        if (!homeAccountId) {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n        const accountEntity = AccountEntity.createAccount({\n            homeAccountId,\n            idTokenClaims: idTokenClaims,\n            clientInfo,\n            environment: authority.hostnameAndPort,\n        }, authority);\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading account\");\n            this.storage.setAccount(accountEntity);\n            return accountEntity;\n        }\n        else {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n    }\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `IdTokenEntity`\n     */\n    loadIdToken(idToken, homeAccountId, environment, tenantId) {\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setIdTokenCredential(idTokenEntity);\n            return idTokenEntity;\n        }\n        else {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n    }\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `AccessTokenEntity`\n     */\n    loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\n            return null;\n        }\n        if (!response.expires_in) {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n        if (!options.extendedExpiresOn) {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn = options.expiresOn ||\n            response.expires_in + new Date().getTime() / 1000;\n        const extendedExpiresOn = options.extendedExpiresOn;\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n            return accessTokenEntity;\n        }\n        else {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n    }\n    /**\n     * Helper function to load refresh tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @returns `RefreshTokenEntity`\n     */\n    loadRefreshToken(request, response, homeAccountId, environment) {\n        if (!response.refresh_token) {\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n            return null;\n        }\n        const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading refresh token\");\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\n            return refreshTokenEntity;\n        }\n        else {\n            throw createBrowserAuthError(unableToLoadToken);\n        }\n    }\n    /**\n     * Helper function to generate an `AuthenticationResult` for the result.\n     * @param request\n     * @param idTokenObj\n     * @param cacheRecord\n     * @param authority\n     * @returns `AuthenticationResult`\n     */\n    generateAuthenticationResult(request, idTokenClaims, cacheRecord, accountEntity, authority) {\n        let accessToken = Constants.EMPTY_STRING;\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        if (cacheRecord?.accessToken) {\n            accessToken = cacheRecord.accessToken.secret;\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n        const uid = idTokenClaims.oid || idTokenClaims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenClaims.tid || Constants.EMPTY_STRING;\n        return {\n            authority: authority\n                ? authority.canonicalAuthority\n                : Constants.EMPTY_STRING,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountEntity.getAccountInfo(),\n            idToken: cacheRecord.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: true,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\n            requestId: Constants.EMPTY_STRING,\n            extExpiresOn: extExpiresOn,\n            familyId: Constants.EMPTY_STRING,\n            tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: Constants.EMPTY_STRING,\n            cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n            code: undefined,\n            fromNativeBroker: false,\n        };\n    }\n}\n\nexport { TokenCache };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}