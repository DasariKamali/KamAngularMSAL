{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ID_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      realm: Full tenant or organizational identifier that the account belongs to\n * }\n */\nclass IdTokenEntity extends CredentialEntity {\n  /**\n   * Create IdTokenEntity\n   * @param homeAccountId\n   * @param authenticationResult\n   * @param clientId\n   * @param authority\n   */\n  static createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n    const idTokenEntity = new IdTokenEntity();\n    idTokenEntity.credentialType = CredentialType.ID_TOKEN;\n    idTokenEntity.homeAccountId = homeAccountId;\n    idTokenEntity.environment = environment;\n    idTokenEntity.clientId = clientId;\n    idTokenEntity.secret = idToken;\n    idTokenEntity.realm = tenantId;\n    return idTokenEntity;\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isIdTokenEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.ID_TOKEN;\n  }\n}\nexport { IdTokenEntity };","map":{"version":3,"names":["CredentialEntity","CredentialType","IdTokenEntity","createIdTokenEntity","homeAccountId","environment","idToken","clientId","tenantId","idTokenEntity","credentialType","ID_TOKEN","secret","realm","isIdTokenEntity","entity","hasOwnProperty"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType } from '../../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ID_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      realm: Full tenant or organizational identifier that the account belongs to\n * }\n */\nclass IdTokenEntity extends CredentialEntity {\n    /**\n     * Create IdTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n        const idTokenEntity = new IdTokenEntity();\n        idTokenEntity.credentialType = CredentialType.ID_TOKEN;\n        idTokenEntity.homeAccountId = homeAccountId;\n        idTokenEntity.environment = environment;\n        idTokenEntity.clientId = clientId;\n        idTokenEntity.secret = idToken;\n        idTokenEntity.realm = tenantId;\n        return idTokenEntity;\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isIdTokenEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.ID_TOKEN);\n    }\n}\n\nexport { IdTokenEntity };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,cAAc,QAAQ,2BAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASF,gBAAgB,CAAC;EACzC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,mBAAmBA,CAACC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IAChF,MAAMC,aAAa,GAAG,IAAIP,aAAa,CAAC,CAAC;IACzCO,aAAa,CAACC,cAAc,GAAGT,cAAc,CAACU,QAAQ;IACtDF,aAAa,CAACL,aAAa,GAAGA,aAAa;IAC3CK,aAAa,CAACJ,WAAW,GAAGA,WAAW;IACvCI,aAAa,CAACF,QAAQ,GAAGA,QAAQ;IACjCE,aAAa,CAACG,MAAM,GAAGN,OAAO;IAC9BG,aAAa,CAACI,KAAK,GAAGL,QAAQ;IAC9B,OAAOC,aAAa;EACxB;EACA;AACJ;AACA;AACA;EACI,OAAOK,eAAeA,CAACC,MAAM,EAAE;IAC3B,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IAChB;IACA,OAAQA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IAC1CD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,OAAO,CAAC,IAC9BD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,QAAQ,CAAC,IAC/BD,MAAM,CAAC,gBAAgB,CAAC,KAAKd,cAAc,CAACU,QAAQ;EAC5D;AACJ;AAEA,SAAST,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}