{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, AuthError, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\n   * Returns unexpired tokens from the cache, if available\n   * @param silentRequest\n   */\n  acquireToken(silentRequest) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const acquireTokenMeasurement = _this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n      // Telemetry manager only used to increment cacheHits here\n      const serverTelemetryManager = _this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n      const silentAuthClient = yield _this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n      _this.logger.verbose(\"Silent auth client created\");\n      try {\n        const cachedToken = yield silentAuthClient.acquireCachedToken(silentRequest);\n        acquireTokenMeasurement.end({\n          success: true,\n          fromCache: true\n        });\n        return cachedToken;\n      } catch (error) {\n        if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n          _this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n        }\n        acquireTokenMeasurement.end({\n          errorCode: error instanceof AuthError && error.errorCode || undefined,\n          subErrorCode: error instanceof AuthError && error.subError || undefined,\n          success: false\n        });\n        throw error;\n      }\n    })();\n  }\n  /**\n   * API to silenty clear the browser cache.\n   * @param logoutRequest\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest?.account);\n  }\n  /**\n   * Creates an Silent Flow Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Create auth module.\n      _this2.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this2.correlationId);\n      const clientConfig = yield _this2.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n      return new SilentFlowClient(clientConfig, _this2.performanceClient);\n    })();\n  }\n  initializeSilentRequest(request, account) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, _this3.correlationId);\n      _this3.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, _this3.correlationId);\n      return {\n        ...request,\n        ...(yield _this3.initializeBaseRequest(request, account)),\n        account: account,\n        forceRefresh: request.forceRefresh || false\n      };\n    })();\n  }\n}\nexport { SilentCacheClient };","map":{"version":3,"names":["_asyncToGenerator","StandardInteractionClient","PerformanceEvents","AuthError","SilentFlowClient","ApiId","BrowserAuthError","cryptoKeyNotFound","SilentCacheClient","acquireToken","silentRequest","_this","acquireTokenMeasurement","performanceClient","startMeasurement","SilentCacheClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","acquireTokenSilent_silentFlow","silentAuthClient","createSilentFlowClient","authority","azureCloudOptions","logger","verbose","cachedToken","acquireCachedToken","end","success","fromCache","error","errorCode","undefined","subErrorCode","subError","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","clearCacheOnLogout","account","authorityUrl","_this2","setPreQueueTime","StandardInteractionClientGetClientConfiguration","clientConfig","getClientConfiguration","initializeSilentRequest","request","_this3","addQueueMeasurement","InitializeSilentRequest","InitializeBaseRequest","initializeBaseRequest","forceRefresh"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, AuthError, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(silentRequest) {\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Silent auth client created\");\n        try {\n            const cachedToken = (await silentAuthClient.acquireCachedToken(silentRequest));\n            acquireTokenMeasurement.end({\n                success: true,\n                fromCache: true,\n            });\n            return cachedToken;\n        }\n        catch (error) {\n            if (error instanceof BrowserAuthError &&\n                error.errorCode === cryptoKeyNotFound) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            acquireTokenMeasurement.end({\n                errorCode: (error instanceof AuthError && error.errorCode) ||\n                    undefined,\n                subErrorCode: (error instanceof AuthError && error.subError) || undefined,\n                success: false,\n            });\n            throw error;\n        }\n    }\n    /**\n     * API to silenty clear the browser cache.\n     * @param logoutRequest\n     */\n    logout(logoutRequest) {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    async createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n        // Create auth module.\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new SilentFlowClient(clientConfig, this.performanceClient);\n    }\n    async initializeSilentRequest(request, account) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n        return {\n            ...request,\n            ...(await this.initializeBaseRequest(request, account)),\n            account: account,\n            forceRefresh: request.forceRefresh || false,\n        };\n    }\n}\n\nexport { SilentCacheClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}