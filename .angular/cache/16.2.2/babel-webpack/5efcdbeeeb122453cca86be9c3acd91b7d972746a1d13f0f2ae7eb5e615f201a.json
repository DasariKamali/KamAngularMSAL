{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { Separators, CacheAccountType, Constants } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      idTokenClaims: Object containing claims parsed from ID token\n *      nativeAccountId: Account identifier on the native device\n * }\n * @internal\n */\nclass AccountEntity {\n  /**\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n   */\n  generateAccountId() {\n    const accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n   */\n  generateAccountKey() {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  }\n  /**\n   * Returns the AccountInfo interface for this account.\n   */\n  getAccountInfo() {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId,\n      authorityType: this.authorityType\n    };\n  }\n  /**\n   * Generates account key from interface\n   * @param accountInterface\n   */\n  static generateAccountCacheKey(accountInterface) {\n    const accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n   * @param accountDetails\n   */\n  static createAccount(accountDetails, authority) {\n    const account = new AccountEntity();\n    if (authority.authorityType === AuthorityType.Adfs) {\n      account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n    } else if (authority.protocolMode === ProtocolMode.AAD) {\n      account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    } else {\n      account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    }\n    account.clientInfo = accountDetails.clientInfo;\n    account.homeAccountId = accountDetails.homeAccountId;\n    account.nativeAccountId = accountDetails.nativeAccountId;\n    const env = accountDetails.environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\n    account.idTokenClaims = accountDetails.idTokenClaims;\n    // How do you account for MSA CID here?\n    account.localAccountId = accountDetails.idTokenClaims.oid || accountDetails.idTokenClaims.sub || Constants.EMPTY_STRING;\n    /*\n     * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n     * In most cases it will contain a single email. This field should not be relied upon if a custom\n     * policy is configured to return more than 1 email.\n     */\n    const preferredUsername = accountDetails.idTokenClaims.preferred_username || accountDetails.idTokenClaims.upn;\n    const email = accountDetails.idTokenClaims.emails ? accountDetails.idTokenClaims.emails[0] : null;\n    account.username = preferredUsername || email || Constants.EMPTY_STRING;\n    account.name = accountDetails.idTokenClaims.name;\n    account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n    account.msGraphHost = accountDetails.msGraphHost;\n    return account;\n  }\n  /**\n   * Creates an AccountEntity object from AccountInfo\n   * @param accountInfo\n   * @param cloudGraphHostName\n   * @param msGraphHost\n   * @returns\n   */\n  static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n    const account = new AccountEntity();\n    account.authorityType = accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = accountInfo.homeAccountId;\n    account.localAccountId = accountInfo.localAccountId;\n    account.nativeAccountId = accountInfo.nativeAccountId;\n    account.realm = accountInfo.tenantId;\n    account.environment = accountInfo.environment;\n    account.username = accountInfo.username;\n    account.name = accountInfo.name;\n    account.idTokenClaims = accountInfo.idTokenClaims;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  }\n  /**\n   * Generate HomeAccountId from server response\n   * @param serverClientInfo\n   * @param authType\n   */\n  static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n    const accountId = idTokenClaims?.sub ? idTokenClaims.sub : Constants.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (clientInfo.uid && clientInfo.utid) {\n          return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isAccountEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  }\n  /**\n   * Helper function to determine whether 2 accountInfo objects represent the same account\n   * @param accountA\n   * @param accountB\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n   */\n  static accountInfoIsEqual(accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      const accountAClaims = accountA.idTokenClaims || {};\n      const accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  }\n}\nexport { AccountEntity };","map":{"version":3,"names":["Separators","CacheAccountType","Constants","buildClientInfo","ClientAuthError","AuthorityType","ProtocolMode","AccountEntity","generateAccountId","accountId","homeAccountId","environment","join","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","getAccountInfo","name","idTokenClaims","nativeAccountId","authorityType","accountInterface","accountKey","EMPTY_STRING","createAccount","accountDetails","authority","account","Adfs","ADFS_ACCOUNT_TYPE","protocolMode","AAD","MSSTS_ACCOUNT_TYPE","GENERIC_ACCOUNT_TYPE","clientInfo","env","getPreferredCache","createInvalidCacheEnvironmentError","tid","oid","sub","preferredUsername","preferred_username","upn","email","emails","cloudGraphHostName","msGraphHost","createFromAccountInfo","accountInfo","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { Separators, CacheAccountType, Constants } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      idTokenClaims: Object containing claims parsed from ID token\n *      nativeAccountId: Account identifier on the native device\n * }\n * @internal\n */\nclass AccountEntity {\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId() {\n        const accountId = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey() {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n        });\n    }\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo() {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n        };\n    }\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface) {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || Constants.EMPTY_STRING,\n            accountInterface.tenantId || Constants.EMPTY_STRING,\n        ];\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param accountDetails\n     */\n    static createAccount(accountDetails, authority) {\n        const account = new AccountEntity();\n        if (authority.authorityType === AuthorityType.Adfs) {\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n        }\n        else if (authority.protocolMode === ProtocolMode.AAD) {\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        }\n        else {\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n        const env = accountDetails.environment ||\n            (authority && authority.getPreferredCache());\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm =\n            accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\n        account.idTokenClaims = accountDetails.idTokenClaims;\n        // How do you account for MSA CID here?\n        account.localAccountId =\n            accountDetails.idTokenClaims.oid ||\n                accountDetails.idTokenClaims.sub ||\n                Constants.EMPTY_STRING;\n        /*\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\n         * policy is configured to return more than 1 email.\n         */\n        const preferredUsername = accountDetails.idTokenClaims.preferred_username ||\n            accountDetails.idTokenClaims.upn;\n        const email = accountDetails.idTokenClaims.emails\n            ? accountDetails.idTokenClaims.emails[0]\n            : null;\n        account.username = preferredUsername || email || Constants.EMPTY_STRING;\n        account.name = accountDetails.idTokenClaims.name;\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n        return account;\n    }\n    /**\n     * Creates an AccountEntity object from AccountInfo\n     * @param accountInfo\n     * @param cloudGraphHostName\n     * @param msGraphHost\n     * @returns\n     */\n    static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n        const account = new AccountEntity();\n        account.authorityType =\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n        account.idTokenClaims = accountInfo.idTokenClaims;\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        return account;\n    }\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n        const accountId = idTokenClaims?.sub\n            ? idTokenClaims.sub\n            : Constants.EMPTY_STRING;\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs ||\n            authType === AuthorityType.Dsts) {\n            return accountId;\n        }\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            try {\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n                if (clientInfo.uid && clientInfo.utid) {\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n                }\n            }\n            catch (e) { }\n        }\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\"));\n    }\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA\n     * @param accountB\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA, accountB, compareClaims) {\n        if (!accountA || !accountB) {\n            return false;\n        }\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims ||\n                {});\n            const accountBClaims = (accountB.idTokenClaims ||\n                {});\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch =\n                accountAClaims.iat === accountBClaims.iat &&\n                    accountAClaims.nonce === accountBClaims.nonce;\n        }\n        return (accountA.homeAccountId === accountB.homeAccountId &&\n            accountA.localAccountId === accountB.localAccountId &&\n            accountA.username === accountB.username &&\n            accountA.tenantId === accountB.tenantId &&\n            accountA.environment === accountB.environment &&\n            accountA.nativeAccountId === accountB.nativeAccountId &&\n            claimsMatch);\n    }\n}\n\nexport { AccountEntity };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}