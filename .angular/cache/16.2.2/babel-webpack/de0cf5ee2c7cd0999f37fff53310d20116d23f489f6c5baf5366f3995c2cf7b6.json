{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nclass TimeUtils {\n  /**\n   * return the current time in Unix time (seconds).\n   */\n  static nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  }\n  /**\n   * check if a token is expired based on given UTC time in seconds.\n   * @param expiresOn\n   */\n  static isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n  }\n  /**\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\n   * i.e. The system clock was turned back after acquiring the cached token\n   * @param cachedAt\n   * @param offset\n   */\n  static wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  }\n  /**\n   * Waits for t number of milliseconds\n   * @param t number\n   * @param value T\n   */\n  static delay(t, value) {\n    return new Promise(resolve => setTimeout(() => resolve(value), t));\n  }\n}\nexport { TimeUtils };","map":{"version":3,"names":["TimeUtils","nowSeconds","Math","round","Date","getTime","isTokenExpired","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","wasClockTurnedBack","cachedAt","cachedAtSec","delay","t","value","Promise","resolve","setTimeout"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nclass TimeUtils {\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds() {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn, offset) {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return offsetCurrentTimeSec > expirationSec;\n    }\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt\n     * @param offset\n     */\n    static wasClockTurnedBack(cachedAt) {\n        const cachedAtSec = Number(cachedAt);\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay(t, value) {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n\nexport { TimeUtils };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACZ;AACJ;AACA;EACI,OAAOC,UAAUA,CAAA,EAAG;IAChB;IACA,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACI,OAAOC,cAAcA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACrC;IACA,MAAMC,aAAa,GAAGC,MAAM,CAACH,SAAS,CAAC,IAAI,CAAC;IAC5C,MAAMI,oBAAoB,GAAGX,SAAS,CAACC,UAAU,CAAC,CAAC,GAAGO,MAAM;IAC5D;IACA,OAAOG,oBAAoB,GAAGF,aAAa;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOG,kBAAkBA,CAACC,QAAQ,EAAE;IAChC,MAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAQ,CAAC;IACpC,OAAOC,WAAW,GAAGd,SAAS,CAACC,UAAU,CAAC,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOc,KAAKA,CAACC,CAAC,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAACF,KAAK,CAAC,EAAED,CAAC,CAAC,CAAC;EACxE;AACJ;AAEA,SAAShB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}