{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PerformanceEvents, PromptValue, invokeAsync, Constants, AuthError, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { silentPromptValueError, silentLogoutUnsupported, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentIframeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n   * @param request\n   */\n  acquireToken(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n      // Check that we have some SSO data\n      if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n        _this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n      }\n      // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n      if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n        throw createBrowserAuthError(silentPromptValueError);\n      }\n      // Create silent request\n      const silentRequest = yield invokeAsync(_this.initializeAuthorizationRequest.bind(_this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, _this.logger, _this.performanceClient, request.correlationId)({\n        ...request,\n        prompt: request.prompt || PromptValue.NONE\n      }, InteractionType.Silent);\n      _this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n      const serverTelemetryManager = _this.initializeServerTelemetryManager(_this.apiId);\n      try {\n        // Initialize the client\n        const authClient = yield invokeAsync(_this.createAuthCodeClient.bind(_this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, _this.logger, _this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        return yield invokeAsync(_this.silentTokenHelper.bind(_this), PerformanceEvents.SilentIframeClientTokenHelper, _this.logger, _this.performanceClient, request.correlationId)(authClient, silentRequest);\n      } catch (e) {\n        if (e instanceof AuthError) {\n          e.setCorrelationId(_this.correlationId);\n          serverTelemetryManager.cacheFailedRequest(e);\n        }\n        _this.browserStorage.cleanRequestByState(silentRequest.state);\n        throw e;\n      }\n    })();\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n   * @param navigateUrl\n   * @param userRequestScopes\n   */\n  silentTokenHelper(authClient, silentRequest) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\n      // Create auth code request and generate PKCE params\n      const authCodeRequest = yield invokeAsync(_this2.initializeAuthorizationCodeRequest.bind(_this2), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, _this2.logger, _this2.performanceClient, silentRequest.correlationId)(silentRequest);\n      // Create authorize request url\n      const navigateUrl = yield invokeAsync(authClient.getAuthCodeUrl.bind(authClient), PerformanceEvents.GetAuthCodeUrl, _this2.logger, _this2.performanceClient, silentRequest.correlationId)({\n        ...silentRequest,\n        nativeBroker: NativeMessageHandler.isNativeAvailable(_this2.config, _this2.logger, _this2.nativeMessageHandler, silentRequest.authenticationScheme)\n      });\n      // Create silent handler\n      const silentHandler = new SilentHandler(authClient, _this2.browserStorage, authCodeRequest, _this2.logger, _this2.config.system, _this2.performanceClient);\n      // Get the frame handle for the silent request\n      const msalFrame = yield invokeAsync(silentHandler.initiateAuthRequest.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, _this2.logger, _this2.performanceClient, silentRequest.correlationId)(navigateUrl);\n      // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n      const hash = yield invokeAsync(silentHandler.monitorIframeForHash.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, _this2.logger, _this2.performanceClient, silentRequest.correlationId)(msalFrame, _this2.config.system.iframeHashTimeout);\n      // Deserialize hash fragment response parameters.\n      const serverParams = UrlString.getDeserializedHash(hash);\n      const state = _this2.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n      if (serverParams.accountId) {\n        _this2.logger.verbose(\"Account id found in hash, calling WAM for token\");\n        if (!_this2.nativeMessageHandler) {\n          throw createBrowserAuthError(nativeConnectionNotEstablished);\n        }\n        const nativeInteractionClient = new NativeInteractionClient(_this2.config, _this2.browserStorage, _this2.browserCrypto, _this2.logger, _this2.eventHandler, _this2.navigationClient, _this2.apiId, _this2.performanceClient, _this2.nativeMessageHandler, serverParams.accountId, _this2.browserStorage, _this2.correlationId);\n        const {\n          userRequestState\n        } = ProtocolUtils.parseRequestState(_this2.browserCrypto, state);\n        return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, _this2.logger, _this2.performanceClient, silentRequest.correlationId)({\n          ...silentRequest,\n          state: userRequestState,\n          prompt: silentRequest.prompt || PromptValue.NONE\n        }).finally(() => {\n          _this2.browserStorage.cleanRequestByState(state);\n        });\n      }\n      // Handle response from hash string\n      return invokeAsync(silentHandler.handleCodeResponseFromHash.bind(silentHandler), PerformanceEvents.HandleCodeResponseFromHash, _this2.logger, _this2.performanceClient, silentRequest.correlationId)(hash, state, authClient.authority, _this2.networkClient);\n    })();\n  }\n}\nexport { SilentIframeClient };","map":{"version":3,"names":["_asyncToGenerator","PerformanceEvents","PromptValue","invokeAsync","Constants","AuthError","UrlString","ProtocolUtils","StandardInteractionClient","createBrowserAuthError","InteractionType","SilentHandler","NativeMessageHandler","NativeInteractionClient","silentPromptValueError","silentLogoutUnsupported","nativeConnectionNotEstablished","SilentIframeClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","_this","addQueueMeasurement","SilentIframeClientAcquireToken","loginHint","sid","account","username","warning","prompt","NONE","NO_SESSION","silentRequest","initializeAuthorizationRequest","bind","StandardInteractionClientInitializeAuthorizationRequest","Silent","browserStorage","updateCacheEntries","state","nonce","authority","EMPTY_STRING","serverTelemetryManager","initializeServerTelemetryManager","authClient","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","azureCloudOptions","silentTokenHelper","SilentIframeClientTokenHelper","e","setCorrelationId","cacheFailedRequest","cleanRequestByState","logout","Promise","reject","_this2","authCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","navigateUrl","getAuthCodeUrl","GetAuthCodeUrl","nativeBroker","isNativeAvailable","authenticationScheme","silentHandler","system","msalFrame","initiateAuthRequest","SilentHandlerInitiateAuthRequest","hash","monitorIframeForHash","iframeHashTimeout","serverParams","getDeserializedHash","validateAndExtractStateFromHash","accountId","verbose","nativeInteractionClient","userRequestState","parseRequestState","NativeInteractionClientAcquireToken","finally","handleCodeResponseFromHash","HandleCodeResponseFromHash","networkClient"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { PerformanceEvents, PromptValue, invokeAsync, Constants, AuthError, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { silentPromptValueError, silentLogoutUnsupported, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentIframeClient extends StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n        // Check that we have some SSO data\n        if (!request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n        if (request.prompt &&\n            request.prompt !== PromptValue.NONE &&\n            request.prompt !== PromptValue.NO_SESSION) {\n            throw createBrowserAuthError(silentPromptValueError);\n        }\n        // Create silent request\n        const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)({\n            ...request,\n            prompt: request.prompt || PromptValue.NONE,\n        }, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        try {\n            // Initialize the client\n            const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n            return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n        }\n        catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n    /**\n     * Currently Unsupported\n     */\n    logout() {\n        // Synchronous so we must reject\n        return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n    }\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    async silentTokenHelper(authClient, silentRequest) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\n        // Create auth code request and generate PKCE params\n        const authCodeRequest = await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(authClient.getAuthCodeUrl.bind(authClient), PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, silentRequest.correlationId)({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme),\n        });\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(silentHandler.initiateAuthRequest.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, silentRequest.correlationId)(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await invokeAsync(silentHandler.monitorIframeForHash.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, silentRequest.correlationId)(msalFrame, this.config.system.iframeHashTimeout);\n        // Deserialize hash fragment response parameters.\n        const serverParams = UrlString.getDeserializedHash(hash);\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(nativeConnectionNotEstablished);\n            }\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, silentRequest.correlationId)({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE,\n            }).finally(() => {\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n        // Handle response from hash string\n        return invokeAsync(silentHandler.handleCodeResponseFromHash.bind(silentHandler), PerformanceEvents.HandleCodeResponseFromHash, this.logger, this.performanceClient, silentRequest.correlationId)(hash, state, authClient.authority, this.networkClient);\n    }\n}\n\nexport { SilentIframeClient };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,iBAAiB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,aAAa,QAAQ,oBAAoB;AAChI,SAASC,yBAAyB,QAAQ,iCAAiC;AAC3E,SAASC,sBAAsB,QAAQ,+BAA+B;AACtE,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,aAAa,QAAQ,0CAA0C;AACxE,SAASC,oBAAoB,QAAQ,iDAAiD;AACtF,SAASC,uBAAuB,QAAQ,+BAA+B;AACvE,SAASC,sBAAsB,EAAEC,uBAAuB,EAAEC,8BAA8B,QAAQ,oCAAoC;;AAEpI;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAAST,yBAAyB,CAAC;EACvDU,WAAWA,CAACC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,MAAM,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAEC,aAAa,EAAE;IACtK,KAAK,CAACV,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,MAAM,EAAEC,YAAY,EAAEC,gBAAgB,EAAEE,iBAAiB,EAAEE,oBAAoB,EAAEC,aAAa,CAAC;IACzI,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,aAAa,GAAGH,iBAAiB;EAC1C;EACA;AACJ;AACA;AACA;EACUI,YAAYA,CAACC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAjC,iBAAA;MACxBiC,KAAI,CAACP,iBAAiB,CAACQ,mBAAmB,CAACjC,iBAAiB,CAACkC,8BAA8B,EAAEH,OAAO,CAACH,aAAa,CAAC;MACnH;MACA,IAAI,CAACG,OAAO,CAACI,SAAS,IAClB,CAACJ,OAAO,CAACK,GAAG,KACX,CAACL,OAAO,CAACM,OAAO,IAAI,CAACN,OAAO,CAACM,OAAO,CAACC,QAAQ,CAAC,EAAE;QACjDN,KAAI,CAACX,MAAM,CAACkB,OAAO,CAAC,qGAAqG,CAAC;MAC9H;MACA;MACA,IAAIR,OAAO,CAACS,MAAM,IACdT,OAAO,CAACS,MAAM,KAAKvC,WAAW,CAACwC,IAAI,IACnCV,OAAO,CAACS,MAAM,KAAKvC,WAAW,CAACyC,UAAU,EAAE;QAC3C,MAAMlC,sBAAsB,CAACK,sBAAsB,CAAC;MACxD;MACA;MACA,MAAM8B,aAAa,SAASzC,WAAW,CAAC8B,KAAI,CAACY,8BAA8B,CAACC,IAAI,CAACb,KAAI,CAAC,EAAEhC,iBAAiB,CAAC8C,uDAAuD,EAAEd,KAAI,CAACX,MAAM,EAAEW,KAAI,CAACP,iBAAiB,EAAEM,OAAO,CAACH,aAAa,CAAC,CAAC;QAC3N,GAAGG,OAAO;QACVS,MAAM,EAAET,OAAO,CAACS,MAAM,IAAIvC,WAAW,CAACwC;MAC1C,CAAC,EAAEhC,eAAe,CAACsC,MAAM,CAAC;MAC1Bf,KAAI,CAACgB,cAAc,CAACC,kBAAkB,CAACN,aAAa,CAACO,KAAK,EAAEP,aAAa,CAACQ,KAAK,EAAER,aAAa,CAACS,SAAS,EAAET,aAAa,CAACR,SAAS,IAAIhC,SAAS,CAACkD,YAAY,EAAEV,aAAa,CAACN,OAAO,IAAI,IAAI,CAAC;MAC3L,MAAMiB,sBAAsB,GAAGtB,KAAI,CAACuB,gCAAgC,CAACvB,KAAI,CAACR,KAAK,CAAC;MAChF,IAAI;QACA;QACA,MAAMgC,UAAU,SAAStD,WAAW,CAAC8B,KAAI,CAACyB,oBAAoB,CAACZ,IAAI,CAACb,KAAI,CAAC,EAAEhC,iBAAiB,CAAC0D,6CAA6C,EAAE1B,KAAI,CAACX,MAAM,EAAEW,KAAI,CAACP,iBAAiB,EAAEM,OAAO,CAACH,aAAa,CAAC,CAAC0B,sBAAsB,EAAEX,aAAa,CAACS,SAAS,EAAET,aAAa,CAACgB,iBAAiB,CAAC;QACzR,aAAazD,WAAW,CAAC8B,KAAI,CAAC4B,iBAAiB,CAACf,IAAI,CAACb,KAAI,CAAC,EAAEhC,iBAAiB,CAAC6D,6BAA6B,EAAE7B,KAAI,CAACX,MAAM,EAAEW,KAAI,CAACP,iBAAiB,EAAEM,OAAO,CAACH,aAAa,CAAC,CAAC4B,UAAU,EAAEb,aAAa,CAAC;MACvM,CAAC,CACD,OAAOmB,CAAC,EAAE;QACN,IAAIA,CAAC,YAAY1D,SAAS,EAAE;UACxB0D,CAAC,CAACC,gBAAgB,CAAC/B,KAAI,CAACJ,aAAa,CAAC;UACtC0B,sBAAsB,CAACU,kBAAkB,CAACF,CAAC,CAAC;QAChD;QACA9B,KAAI,CAACgB,cAAc,CAACiB,mBAAmB,CAACtB,aAAa,CAACO,KAAK,CAAC;QAC5D,MAAMY,CAAC;MACX;IAAC;EACL;EACA;AACJ;AACA;EACII,MAAMA,CAAA,EAAG;IACL;IACA,OAAOC,OAAO,CAACC,MAAM,CAAC5D,sBAAsB,CAACM,uBAAuB,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;EACU8C,iBAAiBA,CAACJ,UAAU,EAAEb,aAAa,EAAE;IAAA,IAAA0B,MAAA;IAAA,OAAAtE,iBAAA;MAC/CsE,MAAI,CAAC5C,iBAAiB,CAACQ,mBAAmB,CAACjC,iBAAiB,CAAC6D,6BAA6B,EAAElB,aAAa,CAACf,aAAa,CAAC;MACxH;MACA,MAAM0C,eAAe,SAASpE,WAAW,CAACmE,MAAI,CAACE,kCAAkC,CAAC1B,IAAI,CAACwB,MAAI,CAAC,EAAErE,iBAAiB,CAACwE,2DAA2D,EAAEH,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAACe,aAAa,CAAC;MAC7P;MACA,MAAM8B,WAAW,SAASvE,WAAW,CAACsD,UAAU,CAACkB,cAAc,CAAC7B,IAAI,CAACW,UAAU,CAAC,EAAExD,iBAAiB,CAAC2E,cAAc,EAAEN,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAAC;QAClL,GAAGe,aAAa;QAChBiC,YAAY,EAAEjE,oBAAoB,CAACkE,iBAAiB,CAACR,MAAI,CAACnD,MAAM,EAAEmD,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC1C,oBAAoB,EAAEgB,aAAa,CAACmC,oBAAoB;MAChJ,CAAC,CAAC;MACF;MACA,MAAMC,aAAa,GAAG,IAAIrE,aAAa,CAAC8C,UAAU,EAAEa,MAAI,CAACrB,cAAc,EAAEsB,eAAe,EAAED,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAACnD,MAAM,CAAC8D,MAAM,EAAEX,MAAI,CAAC5C,iBAAiB,CAAC;MAClJ;MACA,MAAMwD,SAAS,SAAS/E,WAAW,CAAC6E,aAAa,CAACG,mBAAmB,CAACrC,IAAI,CAACkC,aAAa,CAAC,EAAE/E,iBAAiB,CAACmF,gCAAgC,EAAEd,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAAC6C,WAAW,CAAC;MAC7N;MACA,MAAMW,IAAI,SAASlF,WAAW,CAAC6E,aAAa,CAACM,oBAAoB,CAACxC,IAAI,CAACkC,aAAa,CAAC,EAAE/E,iBAAiB,CAACmF,gCAAgC,EAAEd,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAACqD,SAAS,EAAEZ,MAAI,CAACnD,MAAM,CAAC8D,MAAM,CAACM,iBAAiB,CAAC;MAC7P;MACA,MAAMC,YAAY,GAAGlF,SAAS,CAACmF,mBAAmB,CAACJ,IAAI,CAAC;MACxD,MAAMlC,KAAK,GAAGmB,MAAI,CAACoB,+BAA+B,CAACF,YAAY,EAAE9E,eAAe,CAACsC,MAAM,EAAEuB,eAAe,CAAC1C,aAAa,CAAC;MACvH,IAAI2D,YAAY,CAACG,SAAS,EAAE;QACxBrB,MAAI,CAAChD,MAAM,CAACsE,OAAO,CAAC,iDAAiD,CAAC;QACtE,IAAI,CAACtB,MAAI,CAAC1C,oBAAoB,EAAE;UAC5B,MAAMnB,sBAAsB,CAACO,8BAA8B,CAAC;QAChE;QACA,MAAM6E,uBAAuB,GAAG,IAAIhF,uBAAuB,CAACyD,MAAI,CAACnD,MAAM,EAAEmD,MAAI,CAACrB,cAAc,EAAEqB,MAAI,CAACjD,aAAa,EAAEiD,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC/C,YAAY,EAAE+C,MAAI,CAAC9C,gBAAgB,EAAE8C,MAAI,CAAC7C,KAAK,EAAE6C,MAAI,CAAC5C,iBAAiB,EAAE4C,MAAI,CAAC1C,oBAAoB,EAAE4D,YAAY,CAACG,SAAS,EAAErB,MAAI,CAACrB,cAAc,EAAEqB,MAAI,CAACzC,aAAa,CAAC;QACxS,MAAM;UAAEiE;QAAiB,CAAC,GAAGvF,aAAa,CAACwF,iBAAiB,CAACzB,MAAI,CAACjD,aAAa,EAAE8B,KAAK,CAAC;QACvF,OAAOhD,WAAW,CAAC0F,uBAAuB,CAAC9D,YAAY,CAACe,IAAI,CAAC+C,uBAAuB,CAAC,EAAE5F,iBAAiB,CAAC+F,mCAAmC,EAAE1B,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAAC;UAC5M,GAAGe,aAAa;UAChBO,KAAK,EAAE2C,gBAAgB;UACvBrD,MAAM,EAAEG,aAAa,CAACH,MAAM,IAAIvC,WAAW,CAACwC;QAChD,CAAC,CAAC,CAACuD,OAAO,CAAC,MAAM;UACb3B,MAAI,CAACrB,cAAc,CAACiB,mBAAmB,CAACf,KAAK,CAAC;QAClD,CAAC,CAAC;MACN;MACA;MACA,OAAOhD,WAAW,CAAC6E,aAAa,CAACkB,0BAA0B,CAACpD,IAAI,CAACkC,aAAa,CAAC,EAAE/E,iBAAiB,CAACkG,0BAA0B,EAAE7B,MAAI,CAAChD,MAAM,EAAEgD,MAAI,CAAC5C,iBAAiB,EAAEkB,aAAa,CAACf,aAAa,CAAC,CAACwD,IAAI,EAAElC,KAAK,EAAEM,UAAU,CAACJ,SAAS,EAAEiB,MAAI,CAAC8B,aAAa,CAAC;IAAC;EAC5P;AACJ;AAEA,SAASnF,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}