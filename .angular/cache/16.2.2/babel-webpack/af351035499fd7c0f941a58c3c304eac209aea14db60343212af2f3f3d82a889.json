{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class for browser specific functions\n */\nclass BrowserUtils {\n  // #region Window Navigation and URL management\n  /**\n   * Clears hash from window url.\n   */\n  static clearHash(contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n    }\n  }\n  /**\n   * Replaces current hash with hash from provided url\n   */\n  static replaceHash(url) {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n  }\n  /**\n   * Returns boolean of whether the current window is in an iframe or not.\n   */\n  static isInIframe() {\n    return window.parent !== window;\n  }\n  /**\n   * Returns boolean of whether or not the current window is a popup opened by msal\n   */\n  static isInPopup() {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n  }\n  // #endregion\n  /**\n   * Returns current window URL as redirect uri\n   */\n  static getCurrentUri() {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  }\n  /**\n   * Gets the homepage url for the current window location.\n   */\n  static getHomepage() {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n  }\n  /**\n   * Throws error if we have completed an auth and are\n   * attempting another auth request inside an iframe.\n   */\n  static blockReloadInHiddenIframes() {\n    const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw createBrowserAuthError(blockIframeReload);\n    }\n  }\n  /**\n   * Block redirect operations in iframes unless explicitly allowed\n   * @param interactionType Interaction type for the request\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n   */\n  static blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n    const isIframedApp = BrowserUtils.isInIframe();\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw createBrowserAuthError(redirectInIframe);\n    }\n  }\n  /**\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\n   */\n  static blockAcquireTokenInPopups() {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw createBrowserAuthError(blockNestedPopups);\n    }\n  }\n  /**\n   * Throws error if token requests are made in non-browser environment\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\n   */\n  static blockNonBrowserEnvironment(isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw createBrowserAuthError(nonBrowserEnvironment);\n    }\n  }\n  /**\n   * Throws error if initialize hasn't been called\n   * @param initialized\n   */\n  static blockAPICallsBeforeInitialize(initialized) {\n    if (!initialized) {\n      throw createBrowserAuthError(uninitializedPublicClientApplication);\n    }\n  }\n}\nexport { BrowserUtils };","map":{"version":3,"names":["Constants","UrlString","createBrowserAuthError","BrowserConstants","InteractionType","blockIframeReload","redirectInIframe","blockNestedPopups","nonBrowserEnvironment","uninitializedPublicClientApplication","BrowserUtils","clearHash","contentWindow","location","hash","EMPTY_STRING","history","replaceState","origin","pathname","search","replaceHash","url","urlParts","split","shift","window","length","join","isInIframe","parent","isInPopup","opener","name","indexOf","POPUP_NAME_PREFIX","getCurrentUri","href","getHomepage","currentUrl","urlComponents","getUrlComponents","Protocol","HostNameAndPort","blockReloadInHiddenIframes","isResponseHash","hashContainsKnownProperties","blockRedirectInIframe","interactionType","allowRedirectInIframe","isIframedApp","Redirect","blockAcquireTokenInPopups","blockNonBrowserEnvironment","isBrowserEnvironment","blockAPICallsBeforeInitialize","initialized"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class for browser specific functions\n */\nclass BrowserUtils {\n    // #region Window Navigation and URL management\n    /**\n     * Clears hash from window url.\n     */\n    static clearHash(contentWindow) {\n        // Office.js sets history.replaceState to null\n        contentWindow.location.hash = Constants.EMPTY_STRING;\n        if (typeof contentWindow.history.replaceState === \"function\") {\n            // Full removes \"#\" from url\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n        }\n    }\n    /**\n     * Replaces current hash with hash from provided url\n     */\n    static replaceHash(url) {\n        const urlParts = url.split(\"#\");\n        urlParts.shift(); // Remove part before the hash\n        window.location.hash =\n            urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n    }\n    /**\n     * Returns boolean of whether the current window is in an iframe or not.\n     */\n    static isInIframe() {\n        return window.parent !== window;\n    }\n    /**\n     * Returns boolean of whether or not the current window is a popup opened by msal\n     */\n    static isInPopup() {\n        return (typeof window !== \"undefined\" &&\n            !!window.opener &&\n            window.opener !== window &&\n            typeof window.name === \"string\" &&\n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0);\n    }\n    // #endregion\n    /**\n     * Returns current window URL as redirect uri\n     */\n    static getCurrentUri() {\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\n    }\n    /**\n     * Gets the homepage url for the current window location.\n     */\n    static getHomepage() {\n        const currentUrl = new UrlString(window.location.href);\n        const urlComponents = currentUrl.getUrlComponents();\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n    }\n    /**\n     * Throws error if we have completed an auth and are\n     * attempting another auth request inside an iframe.\n     */\n    static blockReloadInHiddenIframes() {\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n        // return an error if called from the hidden iframe created by the msal js silent calls\n        if (isResponseHash && BrowserUtils.isInIframe()) {\n            throw createBrowserAuthError(blockIframeReload);\n        }\n    }\n    /**\n     * Block redirect operations in iframes unless explicitly allowed\n     * @param interactionType Interaction type for the request\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n     */\n    static blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n        const isIframedApp = BrowserUtils.isInIframe();\n        if (interactionType === InteractionType.Redirect &&\n            isIframedApp &&\n            !allowRedirectInIframe) {\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n            throw createBrowserAuthError(redirectInIframe);\n        }\n    }\n    /**\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\n     */\n    static blockAcquireTokenInPopups() {\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n        if (BrowserUtils.isInPopup()) {\n            throw createBrowserAuthError(blockNestedPopups);\n        }\n    }\n    /**\n     * Throws error if token requests are made in non-browser environment\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\n     */\n    static blockNonBrowserEnvironment(isBrowserEnvironment) {\n        if (!isBrowserEnvironment) {\n            throw createBrowserAuthError(nonBrowserEnvironment);\n        }\n    }\n    /**\n     * Throws error if initialize hasn't been called\n     * @param initialized\n     */\n    static blockAPICallsBeforeInitialize(initialized) {\n        if (!initialized) {\n            throw createBrowserAuthError(uninitializedPublicClientApplication);\n        }\n    }\n}\n\nexport { BrowserUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}