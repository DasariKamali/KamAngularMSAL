{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CryptoOps } from './CryptoOps.mjs';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SignedHttpRequest {\n  constructor(shrParameters, shrOptions) {\n    const loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\n   * Generates and caches a keypair for the given request options.\n   * @returns Public key digest, which should be sent to the token issuer.\n   */\n  generatePublicKeyThumbprint() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        kid\n      } = yield _this.popTokenGenerator.generateKid(_this.shrParameters);\n      return kid;\n    })();\n  }\n  /**\n   * Generates a signed http request for the given payload with the given key.\n   * @param payload Payload to sign (e.g. access token)\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @param claims Additional claims to include/override in the signed JWT\n   * @returns Pop token signed with the corresponding private key\n   */\n  signRequest(payload, publicKeyThumbprint, claims) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.popTokenGenerator.signPayload(payload, publicKeyThumbprint, _this2.shrParameters, claims);\n    })();\n  }\n  /**\n   * Removes cached keys from browser for given public key thumbprint\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @returns If keys are properly deleted\n   */\n  removeKeys(publicKeyThumbprint) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this3.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    })();\n  }\n}\nexport { SignedHttpRequest };","map":{"version":3,"names":["_asyncToGenerator","CryptoOps","Logger","PopTokenGenerator","name","version","SignedHttpRequest","constructor","shrParameters","shrOptions","loggerOptions","logger","cryptoOps","popTokenGenerator","generatePublicKeyThumbprint","_this","kid","generateKid","signRequest","payload","publicKeyThumbprint","claims","_this2","signPayload","removeKeys","_this3","removeTokenBindingKey"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/crypto/SignedHttpRequest.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { CryptoOps } from './CryptoOps.mjs';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SignedHttpRequest {\n    constructor(shrParameters, shrOptions) {\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\n        this.logger = new Logger(loggerOptions, name, version);\n        this.cryptoOps = new CryptoOps(this.logger);\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n        this.shrParameters = shrParameters;\n    }\n    /**\n     * Generates and caches a keypair for the given request options.\n     * @returns Public key digest, which should be sent to the token issuer.\n     */\n    async generatePublicKeyThumbprint() {\n        const { kid } = await this.popTokenGenerator.generateKid(this.shrParameters);\n        return kid;\n    }\n    /**\n     * Generates a signed http request for the given payload with the given key.\n     * @param payload Payload to sign (e.g. access token)\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @param claims Additional claims to include/override in the signed JWT\n     * @returns Pop token signed with the corresponding private key\n     */\n    async signRequest(payload, publicKeyThumbprint, claims) {\n        return this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims);\n    }\n    /**\n     * Removes cached keys from browser for given public key thumbprint\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @returns If keys are properly deleted\n     */\n    async removeKeys(publicKeyThumbprint) {\n        return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    }\n}\n\nexport { SignedHttpRequest };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,MAAM,EAAEC,iBAAiB,QAAQ,oBAAoB;AAC9D,SAASC,IAAI,EAAEC,OAAO,QAAQ,wBAAwB;;AAEtD;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpBC,WAAWA,CAACC,aAAa,EAAEC,UAAU,EAAE;IACnC,MAAMC,aAAa,GAAID,UAAU,IAAIA,UAAU,CAACC,aAAa,IAAK,CAAC,CAAC;IACpE,IAAI,CAACC,MAAM,GAAG,IAAIT,MAAM,CAACQ,aAAa,EAAEN,IAAI,EAAEC,OAAO,CAAC;IACtD,IAAI,CAACO,SAAS,GAAG,IAAIX,SAAS,CAAC,IAAI,CAACU,MAAM,CAAC;IAC3C,IAAI,CAACE,iBAAiB,GAAG,IAAIV,iBAAiB,CAAC,IAAI,CAACS,SAAS,CAAC;IAC9D,IAAI,CAACJ,aAAa,GAAGA,aAAa;EACtC;EACA;AACJ;AACA;AACA;EACUM,2BAA2BA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAf,iBAAA;MAChC,MAAM;QAAEgB;MAAI,CAAC,SAASD,KAAI,CAACF,iBAAiB,CAACI,WAAW,CAACF,KAAI,CAACP,aAAa,CAAC;MAC5E,OAAOQ,GAAG;IAAC;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUE,WAAWA,CAACC,OAAO,EAAEC,mBAAmB,EAAEC,MAAM,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAAtB,iBAAA;MACpD,OAAOsB,MAAI,CAACT,iBAAiB,CAACU,WAAW,CAACJ,OAAO,EAAEC,mBAAmB,EAAEE,MAAI,CAACd,aAAa,EAAEa,MAAM,CAAC;IAAC;EACxG;EACA;AACJ;AACA;AACA;AACA;EACUG,UAAUA,CAACJ,mBAAmB,EAAE;IAAA,IAAAK,MAAA;IAAA,OAAAzB,iBAAA;MAClC,aAAayB,MAAI,CAACb,SAAS,CAACc,qBAAqB,CAACN,mBAAmB,CAAC;IAAC;EAC3E;AACJ;AAEA,SAASd,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}