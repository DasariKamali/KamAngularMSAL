{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PerformanceEvents, Constants, UrlString, AuthorizationCodeClient, Authority, AuthorityFactory, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\nimport { noStateInHash, unableToParseState, stateInteractionTypeMismatch } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n  /**\n   * Generates an auth code request tied to the url request.\n   * @param request\n   */\n  initializeAuthorizationCodeRequest(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n      _this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n      const generatedPkceParams = yield _this.browserCrypto.generatePkceCodes();\n      const authCodeRequest = {\n        ...request,\n        redirectUri: request.redirectUri,\n        code: Constants.EMPTY_STRING,\n        codeVerifier: generatedPkceParams.verifier\n      };\n      request.codeChallenge = generatedPkceParams.challenge;\n      request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n      return authCodeRequest;\n    })();\n  }\n  /**\n   * Initializer for the logout request.\n   * @param logoutRequest\n   */\n  initializeLogoutRequest(logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n    const validLogoutRequest = {\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid(),\n      ...logoutRequest\n    };\n    /**\n     * Set logout_hint to be login_hint from ID Token Claims if present\n     * and logoutHint attribute wasn't manually set in logout request\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n     * Otherwise, use passed uri, config, or current page.\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  }\n  /**\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n   * logout_hint in end session request.\n   * @param account\n   */\n  getLogoutHintFromIdTokenClaims(account) {\n    const idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  }\n  /**\n   * Creates an Authorization Code Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, _this2.correlationId);\n      // Create auth module.\n      _this2.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this2.correlationId);\n      const clientConfig = yield _this2.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n      return new AuthorizationCodeClient(clientConfig, _this2.performanceClient);\n    })();\n  }\n  /**\n   * Creates a Client Configuration object with the given request authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, _this3.correlationId);\n      _this3.logger.verbose(\"getClientConfiguration called\", _this3.correlationId);\n      _this3.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, _this3.correlationId);\n      const discoveredAuthority = yield _this3.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\n      const logger = _this3.config.system.loggerOptions;\n      return {\n        authOptions: {\n          clientId: _this3.config.auth.clientId,\n          authority: discoveredAuthority,\n          clientCapabilities: _this3.config.auth.clientCapabilities\n        },\n        systemOptions: {\n          tokenRenewalOffsetSeconds: _this3.config.system.tokenRenewalOffsetSeconds,\n          preventCorsPreflight: true\n        },\n        loggerOptions: {\n          loggerCallback: logger.loggerCallback,\n          piiLoggingEnabled: logger.piiLoggingEnabled,\n          logLevel: logger.logLevel,\n          correlationId: _this3.correlationId\n        },\n        cacheOptions: {\n          claimsBasedCachingEnabled: _this3.config.cache.claimsBasedCachingEnabled\n        },\n        cryptoInterface: _this3.browserCrypto,\n        networkInterface: _this3.networkClient,\n        storageInterface: _this3.browserStorage,\n        serverTelemetryManager: serverTelemetryManager,\n        libraryInfo: {\n          sku: BrowserConstants.MSAL_SKU,\n          version: version,\n          cpu: Constants.EMPTY_STRING,\n          os: Constants.EMPTY_STRING\n        },\n        telemetry: _this3.config.telemetry\n      };\n    })();\n  }\n  /**\n   * @param hash\n   * @param interactionType\n   */\n  validateAndExtractStateFromHash(serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n    if (!serverParams.state) {\n      throw createBrowserAuthError(noStateInHash);\n    }\n    const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n    if (!platformStateObj) {\n      throw createBrowserAuthError(unableToParseState);\n    }\n    if (platformStateObj.interactionType !== interactionType) {\n      throw createBrowserAuthError(stateInteractionTypeMismatch);\n    }\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  }\n  /**\n   * Used to get a discovered version of the default authority.\n   * @param requestAuthority\n   * @param requestCorrelationId\n   */\n  getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, _this4.correlationId);\n      _this4.logger.verbose(\"getDiscoveredAuthority called\", _this4.correlationId);\n      const getAuthorityMeasurement = _this4.performanceClient?.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, _this4.correlationId);\n      const authorityOptions = {\n        protocolMode: _this4.config.auth.protocolMode,\n        OIDCOptions: _this4.config.auth.OIDCOptions,\n        knownAuthorities: _this4.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: _this4.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: _this4.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: _this4.config.auth.skipAuthorityMetadataCache\n      };\n      // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n      const userAuthority = requestAuthority ? requestAuthority : _this4.config.auth.authority;\n      // fall back to the authority from config\n      const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || _this4.config.auth.azureCloudOptions);\n      _this4.logger.verbose(\"Creating discovered authority with configured authority\", _this4.correlationId);\n      _this4.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, _this4.correlationId);\n      return yield AuthorityFactory.createDiscoveredInstance(builtAuthority, _this4.config.system.networkClient, _this4.browserStorage, authorityOptions, _this4.logger, _this4.performanceClient, _this4.correlationId).then(result => {\n        getAuthorityMeasurement.end({\n          success: true\n        });\n        return result;\n      }).catch(error => {\n        getAuthorityMeasurement.end({\n          errorCode: error.errorCode,\n          subErrorCode: error.subError,\n          success: false\n        });\n        throw error;\n      });\n    })();\n  }\n  /**\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n   * @param request\n   * @param interactionType\n   */\n  initializeAuthorizationRequest(request, interactionType) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, _this5.correlationId);\n      _this5.logger.verbose(\"initializeAuthorizationRequest called\", _this5.correlationId);\n      const redirectUri = _this5.getRedirectUri(request.redirectUri);\n      const browserState = {\n        interactionType: interactionType\n      };\n      const state = ProtocolUtils.setRequestState(_this5.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n      _this5.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, _this5.correlationId);\n      const validatedRequest = {\n        ...(yield _this5.initializeBaseRequest(request)),\n        redirectUri: redirectUri,\n        state: state,\n        nonce: request.nonce || _this5.browserCrypto.createNewGuid(),\n        responseMode: _this5.config.auth.OIDCOptions.serverResponseType\n      };\n      const account = request.account || _this5.browserStorage.getActiveAccount();\n      if (account) {\n        _this5.logger.verbose(\"Setting validated request account\", _this5.correlationId);\n        _this5.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, _this5.correlationId);\n        validatedRequest.account = account;\n      }\n      // Check for ADAL/MSAL v1 SSO\n      if (!validatedRequest.loginHint && !account) {\n        const legacyLoginHint = _this5.browserStorage.getLegacyLoginHint();\n        if (legacyLoginHint) {\n          validatedRequest.loginHint = legacyLoginHint;\n        }\n      }\n      return validatedRequest;\n    })();\n  }\n}\nexport { StandardInteractionClient };","map":{"version":3,"names":["_asyncToGenerator","PerformanceEvents","Constants","UrlString","AuthorizationCodeClient","Authority","AuthorityFactory","ProtocolUtils","BaseInteractionClient","BrowserConstants","version","createBrowserAuthError","BrowserProtocolUtils","BrowserUtils","noStateInHash","unableToParseState","stateInteractionTypeMismatch","StandardInteractionClient","initializeAuthorizationCodeRequest","request","_this","performanceClient","addQueueMeasurement","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","logger","verbose","generatedPkceParams","browserCrypto","generatePkceCodes","authCodeRequest","redirectUri","code","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","getAbsoluteUrl","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","_this2","StandardInteractionClientCreateAuthCodeClient","setPreQueueTime","StandardInteractionClientGetClientConfiguration","clientConfig","getClientConfiguration","requestAuthority","_this3","StandardInteractionClientGetDiscoveredAuthority","discoveredAuthority","getDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cacheOptions","claimsBasedCachingEnabled","cache","cryptoInterface","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","MSAL_SKU","cpu","os","telemetry","validateAndExtractStateFromHash","serverParams","interactionType","requestCorrelationId","state","platformStateObj","extractBrowserRequestState","_this4","getAuthorityMeasurement","startMeasurement","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","userAuthority","builtAuthority","generateAuthority","azureCloudOptions","AuthorityFactoryCreateDiscoveredInstance","createDiscoveredInstance","then","result","end","success","catch","error","errorCode","subErrorCode","subError","initializeAuthorizationRequest","_this5","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","browserState","setRequestState","InitializeBaseRequest","validatedRequest","initializeBaseRequest","nonce","responseMode","serverResponseType","getActiveAccount","verbosePii","homeAccountId","loginHint","legacyLoginHint","getLegacyLoginHint"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { PerformanceEvents, Constants, UrlString, AuthorizationCodeClient, Authority, AuthorityFactory, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\nimport { noStateInHash, unableToParseState, stateInteractionTypeMismatch } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    async initializeAuthorizationCodeRequest(request) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n        const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\n        const authCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier,\n        };\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n        return authCodeRequest;\n    }\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    initializeLogoutRequest(logoutRequest) {\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n        const validLogoutRequest = {\n            correlationId: this.correlationId || this.browserCrypto.createNewGuid(),\n            ...logoutRequest,\n        };\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n                    if (logoutHint) {\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                }\n                else {\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n                }\n            }\n            else {\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n            }\n        }\n        else {\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n        }\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            }\n            else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n            }\n            else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            }\n            else {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n            }\n        }\n        else {\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n        }\n        return validLogoutRequest;\n    }\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    getLogoutHintFromIdTokenClaims(account) {\n        const idTokenClaims = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            }\n            else {\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n            }\n        }\n        else {\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n        }\n        return null;\n    }\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    async createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n        // Create auth module.\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n        return new AuthorizationCodeClient(clientConfig, this.performanceClient);\n    }\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    async getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n        this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n        const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\n        const logger = this.config.system.loggerOptions;\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true,\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId,\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled,\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING,\n            },\n            telemetry: this.config.telemetry,\n        };\n    }\n    /**\n     * @param hash\n     * @param interactionType\n     */\n    validateAndExtractStateFromHash(serverParams, interactionType, requestCorrelationId) {\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n        if (!serverParams.state) {\n            throw createBrowserAuthError(noStateInHash);\n        }\n        const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n        if (!platformStateObj) {\n            throw createBrowserAuthError(unableToParseState);\n        }\n        if (platformStateObj.interactionType !== interactionType) {\n            throw createBrowserAuthError(stateInteractionTypeMismatch);\n        }\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n        return serverParams.state;\n    }\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    async getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n        this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n        const getAuthorityMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\n        };\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority\n            ? requestAuthority\n            : this.config.auth.authority;\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n        this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n        return await AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)\n            .then((result) => {\n            getAuthorityMeasurement.end({\n                success: true,\n            });\n            return result;\n        })\n            .catch((error) => {\n            getAuthorityMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        });\n    }\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    async initializeAuthorizationRequest(request, interactionType) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n        this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState = {\n            interactionType: interactionType,\n        };\n        const state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || Constants.EMPTY_STRING, browserState);\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n        const validatedRequest = {\n            ...(await this.initializeBaseRequest(request)),\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || this.browserCrypto.createNewGuid(),\n            responseMode: this.config.auth.OIDCOptions\n                .serverResponseType,\n        };\n        const account = request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\"Setting validated request account\", this.correlationId);\n            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\n            validatedRequest.account = account;\n        }\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n        return validatedRequest;\n    }\n}\n\nexport { StandardInteractionClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}