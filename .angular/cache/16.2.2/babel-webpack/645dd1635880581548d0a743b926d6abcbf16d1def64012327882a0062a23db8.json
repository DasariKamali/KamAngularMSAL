{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { PerformanceClient, Constants, Logger } from '@azure/msal-common';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceClient extends PerformanceClient {\n  constructor(configuration, intFields) {\n    super(configuration.auth.clientId, configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`, new Logger(configuration.system?.loggerOptions || {}, name, version), name, version, configuration.telemetry?.application || {\n      appName: \"\",\n      appVersion: \"\"\n    }, intFields);\n  }\n  startPerformanceMeasurement(measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  }\n  generateId() {\n    return window.crypto.randomUUID();\n  }\n  getPageVisibility() {\n    return document.visibilityState?.toString() || null;\n  }\n  deleteIncompleteSubMeasurements(inProgressEvent) {\n    const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    const incompleteMeasurements = [];\n    if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n      rootEvent.incompleteSubMeasurements.forEach(subMeasurement => {\n        incompleteMeasurements.push({\n          ...subMeasurement\n        });\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  }\n  supportsBrowserPerformanceNow() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  }\n  /**\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n   * Also captures browser page visibilityState.\n   *\n   * @param {PerformanceEvents} measureName\n   * @param {?string} [correlationId]\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n   */\n  startMeasurement(measureName, correlationId) {\n    // Capture page visibilityState and then invoke start/end measurement\n    const startPageVisibility = this.getPageVisibility();\n    const inProgressEvent = super.startMeasurement(measureName, correlationId);\n    return {\n      ...inProgressEvent,\n      end: event => {\n        const res = inProgressEvent.end({\n          startPageVisibility,\n          endPageVisibility: this.getPageVisibility(),\n          ...event\n        });\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discard: () => {\n        inProgressEvent.discard();\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    };\n  }\n  /**\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @returns\n   */\n  setPreQueueTime(eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\n      return;\n    }\n    const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n     */\n    if (preQueueEvent) {\n      this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  }\n  /**\n   * Calculates and adds queue time measurement for given performance event.\n   *\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @param {?number} queueTime\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n   * @returns\n   */\n  addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\n      return;\n    }\n    const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    const currentTime = window.performance.now();\n    const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n    return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\n  }\n}\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["PerformanceClient","Constants","Logger","BrowserPerformanceMeasurement","name","version","BrowserPerformanceClient","constructor","configuration","intFields","auth","clientId","authority","DEFAULT_AUTHORITY","system","loggerOptions","telemetry","application","appName","appVersion","startPerformanceMeasurement","measureName","correlationId","generateId","window","crypto","randomUUID","getPageVisibility","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","supportsBrowserPerformanceNow","performance","now","startMeasurement","startPageVisibility","end","res","endPageVisibility","discard","measurement","flushMeasurement","setPreQueueTime","eventName","logger","trace","preQueueEvent","preQueueTimeByCorrelationId","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/telemetry/BrowserPerformanceClient.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { PerformanceClient, Constants, Logger } from '@azure/msal-common';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceClient extends PerformanceClient {\n    constructor(configuration, intFields) {\n        super(configuration.auth.clientId, configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`, new Logger(configuration.system?.loggerOptions || {}, name, version), name, version, configuration.telemetry?.application || {\n            appName: \"\",\n            appVersion: \"\",\n        }, intFields);\n    }\n    startPerformanceMeasurement(measureName, correlationId) {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n    generateId() {\n        return window.crypto.randomUUID();\n    }\n    getPageVisibility() {\n        return document.visibilityState?.toString() || null;\n    }\n    deleteIncompleteSubMeasurements(inProgressEvent) {\n        const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n        const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n        const incompleteMeasurements = [];\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\n                incompleteMeasurements.push({ ...subMeasurement });\n            });\n        }\n        // Clean up remaining marks for incomplete sub-measurements\n        if (incompleteMeasurements.length > 0) {\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n        }\n    }\n    supportsBrowserPerformanceNow() {\n        return (typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.now === \"function\");\n    }\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(measureName, correlationId) {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\n        return {\n            ...inProgressEvent,\n            end: (event) => {\n                const res = inProgressEvent.end({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event,\n                });\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n                return res;\n            },\n            discard: () => {\n                inProgressEvent.discard();\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n                inProgressEvent.measurement.flushMeasurement();\n            },\n        };\n    }\n    /**\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @returns\n     */\n    setPreQueueTime(eventName, correlationId) {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\n            return;\n        }\n        if (!correlationId) {\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\n            return;\n        }\n        const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n        /**\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n         */\n        if (preQueueEvent) {\n            this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n        }\n        this.preQueueTimeByCorrelationId.set(correlationId, {\n            name: eventName,\n            time: window.performance.now(),\n        });\n    }\n    /**\n     * Calculates and adds queue time measurement for given performance event.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\n            return;\n        }\n        if (!correlationId) {\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\n            return;\n        }\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n        if (!preQueueTime) {\n            return;\n        }\n        const currentTime = window.performance.now();\n        const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n        return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\n    }\n}\n\nexport { BrowserPerformanceClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}