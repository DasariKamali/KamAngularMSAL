{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StandardOperatingContext extends BaseOperatingContext {\n  /**\n   * Return the module name.  Intended for use with import() to enable dynamic import\n   * of the implementation associated with this operating context\n   * @returns\n   */\n  getModuleName() {\n    return StandardOperatingContext.MODULE_NAME;\n  }\n  /**\n   * Returns the unique identifier for this operating context\n   * @returns string\n   */\n  getId() {\n    return StandardOperatingContext.ID;\n  }\n  /**\n   * Checks whether the operating context is available.\n   * Confirms that the code is running a browser rather.  This is required.\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.available = typeof window !== \"undefined\";\n      return _this.available;\n      /*\n       * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\n       * We can move the current contents of the initialize method to here and verify that the WAM extension is available\n       */\n    })();\n  }\n}\n/*\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n * containing the implementation for this operating context\n */\nStandardOperatingContext.MODULE_NAME = \"\";\n/**\n * Unique identifier for the operating context\n */\nStandardOperatingContext.ID = \"StandardOperatingContext\";\nexport { StandardOperatingContext };","map":{"version":3,"names":["_asyncToGenerator","BaseOperatingContext","StandardOperatingContext","getModuleName","MODULE_NAME","getId","ID","initialize","_this","available","window"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StandardOperatingContext extends BaseOperatingContext {\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName() {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId() {\n        return StandardOperatingContext.ID;\n    }\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize() {\n        this.available = typeof window !== \"undefined\";\n        return this.available;\n        /*\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\n         */\n    }\n}\n/*\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n * containing the implementation for this operating context\n */\nStandardOperatingContext.MODULE_NAME = \"\";\n/**\n * Unique identifier for the operating context\n */\nStandardOperatingContext.ID = \"StandardOperatingContext\";\n\nexport { StandardOperatingContext };\n"],"mappings":"AAAA;AACA,YAAY;;AAAC,OAAAA,iBAAA;AACb,SAASC,oBAAoB,QAAQ,4BAA4B;;AAEjE;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,SAASD,oBAAoB,CAAC;EACxD;AACJ;AACA;AACA;AACA;EACIE,aAAaA,CAAA,EAAG;IACZ,OAAOD,wBAAwB,CAACE,WAAW;EAC/C;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,OAAOH,wBAAwB,CAACI,EAAE;EACtC;EACA;AACJ;AACA;AACA;AACA;EACUC,UAAUA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAR,iBAAA;MACfQ,KAAI,CAACC,SAAS,GAAG,OAAOC,MAAM,KAAK,WAAW;MAC9C,OAAOF,KAAI,CAACC,SAAS;MACrB;AACR;AACA;AACA;IAHQ;EAIJ;AACJ;AACA;AACA;AACA;AACA;AACAP,wBAAwB,CAACE,WAAW,GAAG,EAAE;AACzC;AACA;AACA;AACAF,wBAAwB,CAACI,EAAE,GAAG,0BAA0B;AAExD,SAASJ,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}