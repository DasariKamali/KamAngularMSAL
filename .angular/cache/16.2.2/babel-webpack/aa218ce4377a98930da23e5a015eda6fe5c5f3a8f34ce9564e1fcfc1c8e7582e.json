{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ServerTelemetryManager {\n  constructor(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\n   * API to add MSER Telemetry to request\n   */\n  generateCurrentRequestHeaderValue() {\n    const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n    const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const regionDiscoveryFields = this.getRegionDiscoveryFields();\n    const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to add MSER Telemetry for the last failed request\n   */\n  generateLastRequestHeaderValue() {\n    const lastRequests = this.getLastRequests();\n    const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to cache token failures for MSER data capture\n   * @param error\n   */\n  cacheFailedRequest(error) {\n    const lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (error instanceof Error && !!error && error.toString()) {\n      if (error instanceof AuthError) {\n        if (error.subError) {\n          lastRequests.errors.push(error.subError);\n        } else if (error.errorCode) {\n          lastRequests.errors.push(error.errorCode);\n        } else {\n          lastRequests.errors.push(error.toString());\n        }\n      } else {\n        lastRequests.errors.push(error.toString());\n      }\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  }\n  /**\n   * Update server telemetry cache entry by incrementing cache hit counter\n   */\n  incrementCacheHits() {\n    const lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  }\n  /**\n   * Get the server telemetry entity from cache or initialize a new one\n   */\n  getLastRequests() {\n    const initialValue = new ServerTelemetryEntity();\n    const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  }\n  /**\n   * Remove server telemetry cache entry\n   */\n  clearTelemetryCache() {\n    const lastRequests = this.getLastRequests();\n    const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      const serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  }\n  /**\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\n   * @param serverTelemetryEntity\n   */\n  static maxErrorsToSend(serverTelemetryEntity) {\n    let i;\n    let maxErrors = 0;\n    let dataSize = 0;\n    const errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      const apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  }\n  /**\n   * Get the region discovery fields\n   *\n   * @returns string\n   */\n  getRegionDiscoveryFields() {\n    const regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  }\n  /**\n   * Update the region discovery metadata\n   *\n   * @param regionDiscoveryMetadata\n   * @returns void\n   */\n  updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  }\n  /**\n   * Set cache outcome\n   */\n  setCacheOutcome(cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  }\n}\nexport { ServerTelemetryManager };","map":{"version":3,"names":["CacheOutcome","Constants","SERVER_TELEM_CONSTANTS","Separators","AuthError","ServerTelemetryEntity","ServerTelemetryManager","constructor","telemetryRequest","cacheManager","cacheOutcome","NO_CACHE_HIT","apiId","correlationId","wrapperSKU","EMPTY_STRING","wrapperVer","telemetryCacheKey","CACHE_KEY","CACHE_KEY_SEPARATOR","clientId","generateCurrentRequestHeaderValue","request","VALUE_SEPARATOR","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","cacheFailedRequest","error","MAX_CACHED_ERRORS","shift","push","Error","toString","subError","errorCode","UNKNOWN_ERROR","setServerTelemetry","incrementCacheHits","initialValue","getServerTelemetry","clearTelemetryCache","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","region_used","region_source","region_outcome","setCacheOutcome"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs"],"sourcesContent":["/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ServerTelemetryManager {\n    constructor(telemetryRequest, cacheManager) {\n        this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n        this.telemetryCacheKey =\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\n                Separators.CACHE_KEY_SEPARATOR +\n                telemetryRequest.clientId;\n    }\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue() {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields,\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue() {\n        const lastRequests = this.getLastRequests();\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests\n            .slice(0, 2 * maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors\n            .slice(0, maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount\n            ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\n            : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error) {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >=\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                }\n                else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                }\n                else {\n                    lastRequests.errors.push(error.toString());\n                }\n            }\n            else {\n                lastRequests.errors.push(error.toString());\n            }\n        }\n        else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return;\n    }\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits() {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests() {\n        const initialValue = new ServerTelemetryEntity();\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n        return lastRequests || initialValue;\n    }\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache() {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        }\n        else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = new ServerTelemetryEntity();\n            serverTelemEntity.failedRequests =\n                lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n            serverTelemEntity.errors =\n                lastRequests.errors.slice(numErrorsFlushed);\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(serverTelemetryEntity) {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] ||\n                Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] ||\n                Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize +=\n                apiId.toString().length +\n                    correlationId.toString().length +\n                    errorCode.length +\n                    3;\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            }\n            else {\n                break;\n            }\n        }\n        return maxErrors;\n    }\n    /**\n     * Get the region discovery fields\n     *\n     * @returns string\n     */\n    getRegionDiscoveryFields() {\n        const regionDiscoveryFields = [];\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n        return regionDiscoveryFields.join(\",\");\n    }\n    /**\n     * Update the region discovery metadata\n     *\n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n    /**\n     * Set cache outcome\n     */\n    setCacheOutcome(cacheOutcome) {\n        this.cacheOutcome = cacheOutcome;\n    }\n}\n\nexport { ServerTelemetryManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}