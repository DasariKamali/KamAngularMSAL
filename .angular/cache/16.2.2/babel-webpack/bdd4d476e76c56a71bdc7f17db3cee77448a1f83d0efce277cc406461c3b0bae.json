{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport _asyncToGenerator from \"C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ClientAuthError, ServerError } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.mjs';\nimport { InteractionHandler } from './InteractionHandler.mjs';\nimport { emptyNavigateUri, hashEmptyError, userCancelled } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass RedirectHandler extends InteractionHandler {\n  constructor(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {\n    super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\n    this.browserCrypto = browserCrypto;\n  }\n  /**\n   * Redirects window to given URL.\n   * @param urlNavigate\n   */\n  initiateAuthRequest(requestUrl, params) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n      // Navigate if valid URL\n      if (requestUrl) {\n        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n        if (params.redirectStartPage) {\n          _this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n          _this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n        }\n        // Set interaction status in the library.\n        _this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, _this.authCodeRequest.correlationId, true);\n        _this.browserStorage.cacheCodeRequest(_this.authCodeRequest);\n        _this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n        const navigationOptions = {\n          apiId: ApiId.acquireTokenRedirect,\n          timeout: params.redirectTimeout,\n          noHistory: false\n        };\n        // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n        if (typeof params.onRedirectNavigate === \"function\") {\n          _this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n          const navigate = params.onRedirectNavigate(requestUrl);\n          // Returning false from onRedirectNavigate will stop navigation\n          if (navigate !== false) {\n            _this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            yield params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n            return;\n          } else {\n            _this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return;\n          }\n        } else {\n          // Navigate window to request URL\n          _this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n          yield params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n          return;\n        }\n      } else {\n        // Throw error if request URL is empty.\n        _this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n        throw createBrowserAuthError(emptyNavigateUri);\n      }\n    })();\n  }\n  /**\n   * Handle authorization code response in the window.\n   * @param hash\n   */\n  handleCodeResponseFromHash(locationHash, state, authority, networkModule) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n      // Check that location hash isn't empty.\n      if (!locationHash) {\n        throw createBrowserAuthError(hashEmptyError);\n      }\n      // Interaction is completed - remove interaction status.\n      _this2.browserStorage.setInteractionInProgress(false);\n      // Handle code response.\n      const stateKey = _this2.browserStorage.generateStateKey(state);\n      const requestState = _this2.browserStorage.getTemporaryCache(stateKey);\n      if (!requestState) {\n        throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n      }\n      let authCodeResponse;\n      try {\n        authCodeResponse = _this2.authModule.handleFragmentResponse(locationHash, requestState);\n      } catch (e) {\n        if (e instanceof ServerError && e.subError === userCancelled) {\n          // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n          throw createBrowserAuthError(userCancelled);\n        } else {\n          throw e;\n        }\n      }\n      // Get cached items\n      const nonceKey = _this2.browserStorage.generateNonceKey(requestState);\n      const cachedNonce = _this2.browserStorage.getTemporaryCache(nonceKey);\n      // Assign code to request\n      _this2.authCodeRequest.code = authCodeResponse.code;\n      // Check for new cloud instance\n      if (authCodeResponse.cloud_instance_host_name) {\n        yield _this2.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n      }\n      authCodeResponse.nonce = cachedNonce || undefined;\n      authCodeResponse.state = requestState;\n      // Add CCS parameters if available\n      if (authCodeResponse.client_info) {\n        _this2.authCodeRequest.clientInfo = authCodeResponse.client_info;\n      } else {\n        const cachedCcsCred = _this2.checkCcsCredentials();\n        if (cachedCcsCred) {\n          _this2.authCodeRequest.ccsCredential = cachedCcsCred;\n        }\n      }\n      // Acquire token with retrieved code.\n      const tokenResponse = yield _this2.authModule.acquireToken(_this2.authCodeRequest, authCodeResponse);\n      _this2.browserStorage.cleanRequestByState(state);\n      return tokenResponse;\n    })();\n  }\n}\nexport { RedirectHandler };","map":{"version":3,"names":["_asyncToGenerator","ClientAuthError","ServerError","createBrowserAuthError","TemporaryCacheKeys","ApiId","InteractionHandler","emptyNavigateUri","hashEmptyError","userCancelled","RedirectHandler","constructor","authCodeModule","storageImpl","authCodeRequest","logger","browserCrypto","performanceClient","initiateAuthRequest","requestUrl","params","_this","verbose","redirectStartPage","browserStorage","setTemporaryCache","ORIGIN_URI","CORRELATION_ID","correlationId","cacheCodeRequest","infoPii","navigationOptions","apiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","info","handleCodeResponseFromHash","locationHash","state","authority","networkModule","_this2","setInteractionInProgress","stateKey","generateStateKey","requestState","getTemporaryCache","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","e","subError","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","tokenResponse","acquireToken","cleanRequestByState"],"sources":["C:/Users/v-dkamali/Documents/AngularMSALAD/microsoft-login/node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\nimport { ClientAuthError, ServerError } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.mjs';\nimport { InteractionHandler } from './InteractionHandler.mjs';\nimport { emptyNavigateUri, hashEmptyError, userCancelled } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass RedirectHandler extends InteractionHandler {\n    constructor(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {\n        super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\n        this.browserCrypto = browserCrypto;\n    }\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl, params) {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (requestUrl) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest);\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false,\n            };\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                }\n                else {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            }\n            else {\n                // Navigate window to request URL\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        }\n        else {\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw createBrowserAuthError(emptyNavigateUri);\n        }\n    }\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponseFromHash(locationHash, state, authority, networkModule) {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (!locationHash) {\n            throw createBrowserAuthError(hashEmptyError);\n        }\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        }\n        catch (e) {\n            if (e instanceof ServerError &&\n                e.subError === userCancelled) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw createBrowserAuthError(userCancelled);\n            }\n            else {\n                throw e;\n            }\n        }\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        }\n        else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n        // Acquire token with retrieved code.\n        const tokenResponse = (await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse));\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n\nexport { RedirectHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}