/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Injectable, Inject } from '@angular/core';
import { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, } from '@azure/msal-browser';
import { of } from 'rxjs';
import { concatMap, catchError, map } from 'rxjs/operators';
import { MSAL_GUARD_CONFIG } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "./msal.broadcast.service";
import * as i2 from "./msal.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
export class MsalGuard {
    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {
        this.msalGuardConfig = msalGuardConfig;
        this.msalBroadcastService = msalBroadcastService;
        this.authService = authService;
        this.location = location;
        this.router = router;
        // Subscribing so events in MsalGuard will set inProgress$ observable
        this.msalBroadcastService.inProgress$.subscribe();
    }
    /**
     * Parses url string to UrlTree
     * @param url
     */
    parseUrl(url) {
        return this.router.parseUrl(url);
    }
    /**
     * Builds the absolute url for the destination page
     * @param path Relative path of requested page
     * @returns Full destination url
     */
    getDestinationUrl(path) {
        this.authService.getLogger().verbose('Guard - getting destination url');
        // Absolute base url for the application (default to origin if base element not present)
        const baseElements = document.getElementsByTagName('base');
        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);
        // Path of page (including hash, if using hash routing)
        const pathUrl = this.location.prepareExternalUrl(path);
        // Hash location strategy
        if (pathUrl.startsWith('#')) {
            this.authService
                .getLogger()
                .verbose('Guard - destination by hash routing');
            return `${baseUrl}/${pathUrl}`;
        }
        /*
         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).
         * Since baseUrl also includes /base, can just concatentate baseUrl + path
         */
        return `${baseUrl}${path}`;
    }
    /**
     * Interactively prompt the user to login
     * @param url Path of the requested page
     */
    loginInteractively(state) {
        const authRequest = typeof this.msalGuardConfig.authRequest === 'function'
            ? this.msalGuardConfig.authRequest(this.authService, state)
            : { ...this.msalGuardConfig.authRequest };
        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {
            this.authService.getLogger().verbose('Guard - logging in by popup');
            return this.authService.loginPopup(authRequest).pipe(map((response) => {
                this.authService
                    .getLogger()
                    .verbose('Guard - login by popup successful, can activate, setting active account');
                this.authService.instance.setActiveAccount(response.account);
                return true;
            }));
        }
        this.authService.getLogger().verbose('Guard - logging in by redirect');
        const redirectStartPage = this.getDestinationUrl(state.url);
        return this.authService
            .loginRedirect({
            redirectStartPage,
            ...authRequest,
        })
            .pipe(map(() => false));
    }
    /**
     * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable
     * @param state
     */
    activateHelper(state) {
        if (this.msalGuardConfig.interactionType !== InteractionType.Popup &&
            this.msalGuardConfig.interactionType !== InteractionType.Redirect) {
            throw new BrowserConfigurationAuthError('invalid_interaction_type', 'Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration');
        }
        this.authService.getLogger().verbose('MSAL Guard activated');
        /*
         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,
         * short-circuit to prevent redirecting or popups.
         */
        if (typeof window !== 'undefined') {
            if (UrlString.hashContainsKnownProperties(window.location.hash) &&
                BrowserUtils.isInIframe() &&
                !this.authService.instance.getConfiguration().system
                    .allowRedirectInIframe) {
                this.authService
                    .getLogger()
                    .warning('Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.');
                return of(false);
            }
        }
        else {
            this.authService
                .getLogger()
                .info('Guard - window is undefined, MSAL does not support server-side token acquisition');
            return of(true);
        }
        /**
         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute
         */
        if (this.msalGuardConfig.loginFailedRoute) {
            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);
        }
        // Capture current path before it gets changed by handleRedirectObservable
        const currentPath = this.location.path(true);
        return this.authService.initialize().pipe(concatMap(() => {
            return this.authService.handleRedirectObservable();
        }), concatMap(() => {
            if (!this.authService.instance.getAllAccounts().length) {
                if (state) {
                    this.authService
                        .getLogger()
                        .verbose('Guard - no accounts retrieved, log in required to activate');
                    return this.loginInteractively(state);
                }
                this.authService
                    .getLogger()
                    .verbose('Guard - no accounts retrieved, no state, cannot load');
                return of(false);
            }
            this.authService
                .getLogger()
                .verbose('Guard - at least 1 account exists, can activate or load');
            // Prevent navigating the app to /#code= or /code=
            if (state) {
                /*
                 * Path routing:
                 * state.url: /#code=...
                 * state.root.fragment: code=...
                 */
                /*
                 * Hash routing:
                 * state.url: /code
                 * state.root.fragment: null
                 */
                const urlContainsCode = this.includesCode(state.url);
                const fragmentContainsCode = !!state.root &&
                    !!state.root.fragment &&
                    this.includesCode(`#${state.root.fragment}`);
                const hashRouting = this.location.prepareExternalUrl(state.url).indexOf('#') === 0;
                // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used
                if (urlContainsCode && (fragmentContainsCode || hashRouting)) {
                    this.authService
                        .getLogger()
                        .info('Guard - Hash contains known code response, stopping navigation.');
                    // Path routing (navigate to current path without hash)
                    if (currentPath.indexOf('#') > -1) {
                        return of(this.parseUrl(this.location.path()));
                    }
                    // Hash routing (navigate to root path)
                    return of(this.parseUrl(''));
                }
            }
            return of(true);
        }), catchError((error) => {
            this.authService
                .getLogger()
                .error('Guard - error while logging in, unable to activate');
            this.authService
                .getLogger()
                .errorPii(`Guard - error: ${error.message}`);
            /**
             * If a loginFailedRoute is set, checks to see if state is passed before returning route
             */
            if (this.loginFailedRoute && state) {
                this.authService
                    .getLogger()
                    .verbose('Guard - loginFailedRoute set, redirecting');
                return of(this.loginFailedRoute);
            }
            return of(false);
        }));
    }
    includesCode(path) {
        return ((path.lastIndexOf('/code') > -1 &&
            path.lastIndexOf('/code') === path.length - '/code'.length) || // path.endsWith("/code")
            path.indexOf('#code=') > -1 ||
            path.indexOf('&code=') > -1);
    }
    canActivate(route, state) {
        this.authService.getLogger().verbose('Guard - canActivate');
        return this.activateHelper(state);
    }
    canActivateChild(route, state) {
        this.authService.getLogger().verbose('Guard - canActivateChild');
        return this.activateHelper(state);
    }
    canMatch() {
        this.authService.getLogger().verbose('Guard - canLoad');
        return this.activateHelper();
    }
}
MsalGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MsalGuard, deps: [{ token: MSAL_GUARD_CONFIG }, { token: i1.MsalBroadcastService }, { token: i2.MsalService }, { token: i3.Location }, { token: i4.Router }], target: i0.ɵɵFactoryTarget.Injectable });
MsalGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MsalGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MsalGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MSAL_GUARD_CONFIG]
                }] }, { type: i1.MsalBroadcastService }, { type: i2.MsalService }, { type: i3.Location }, { type: i4.Router }]; } });
//# sourceMappingURL=data:application/json;base64,