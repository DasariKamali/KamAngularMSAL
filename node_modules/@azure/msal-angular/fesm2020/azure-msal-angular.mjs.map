{"version":3,"file":"azure-msal-angular.mjs","sources":["../../src/packageMetadata.ts","../../src/constants.ts","../../src/msal.service.ts","../../src/msal.broadcast.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.redirect.component.ts","../../src/msal.module.ts","../../src/msal.navigation.client.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"sourcesContent":["/* eslint-disable header/header */\nexport const name = '@azure/msal-angular';\nexport const version = '3.0.4';\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InjectionToken } from '@angular/core';\n\nexport const MSAL_INSTANCE = new InjectionToken<string>('MSAL_INSTANCE');\n\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\n  'MSAL_GUARD_CONFIG'\n);\n\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\n  'MSAL_INTERCEPTOR_CONFIG'\n);\n\nexport const MSAL_BROADCAST_CONFIG = new InjectionToken<string>(\n  'MSAL_BROADCAST_CONFIG'\n);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n  IPublicClientApplication,\n  EndSessionRequest,\n  EndSessionPopupRequest,\n  AuthenticationResult,\n  RedirectRequest,\n  SilentRequest,\n  PopupRequest,\n  SsoSilentRequest,\n  Logger,\n  WrapperSKU,\n} from '@azure/msal-browser';\nimport { Observable, from } from 'rxjs';\nimport { IMsalService } from './IMsalService';\nimport { name, version } from './packageMetadata';\nimport { MSAL_INSTANCE } from './constants';\n\n@Injectable()\nexport class MsalService implements IMsalService {\n  private redirectHash: string;\n  private logger: Logger;\n\n  constructor(\n    @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\n    private location: Location\n  ) {\n    const hash = this.location.path(true).split('#').pop();\n    if (hash) {\n      this.redirectHash = `#${hash}`;\n    }\n    this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n  }\n\n  initialize(): Observable<void> {\n    return from(this.instance.initialize());\n  }\n  acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\n    return from(this.instance.acquireTokenPopup(request));\n  }\n  acquireTokenRedirect(request: RedirectRequest): Observable<void> {\n    return from(this.instance.acquireTokenRedirect(request));\n  }\n  acquireTokenSilent(\n    silentRequest: SilentRequest\n  ): Observable<AuthenticationResult> {\n    return from(this.instance.acquireTokenSilent(silentRequest));\n  }\n  handleRedirectObservable(hash?: string): Observable<AuthenticationResult> {\n    return from(\n      this.instance\n        .initialize()\n        .then(() =>\n          this.instance.handleRedirectPromise(hash || this.redirectHash)\n        )\n    );\n  }\n  loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\n    return from(this.instance.loginPopup(request));\n  }\n  loginRedirect(request?: RedirectRequest): Observable<void> {\n    return from(this.instance.loginRedirect(request));\n  }\n  logout(logoutRequest?: EndSessionRequest): Observable<void> {\n    return from(this.instance.logout(logoutRequest));\n  }\n  logoutRedirect(logoutRequest?: EndSessionRequest): Observable<void> {\n    return from(this.instance.logoutRedirect(logoutRequest));\n  }\n  logoutPopup(logoutRequest?: EndSessionPopupRequest): Observable<void> {\n    return from(this.instance.logoutPopup(logoutRequest));\n  }\n  ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\n    return from(this.instance.ssoSilent(request));\n  }\n  /**\n   * Gets logger for msal-angular.\n   * If no logger set, returns logger instance created with same options as msal-browser\n   */\n  getLogger(): Logger {\n    if (!this.logger) {\n      this.logger = this.instance.getLogger().clone(name, version);\n    }\n    return this.logger;\n  }\n  // Create a logger instance for msal-angular with the same options as msal-browser\n  setLogger(logger: Logger): void {\n    this.logger = logger.clone(name, version);\n    this.instance.setLogger(logger);\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  EventMessage,\n  EventMessageUtils,\n  IPublicClientApplication,\n  InteractionStatus,\n} from '@azure/msal-browser';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { MsalService } from './msal.service';\nimport { MsalBroadcastConfiguration } from './msal.broadcast.config';\nimport { MSAL_BROADCAST_CONFIG, MSAL_INSTANCE } from './constants';\n\n@Injectable()\nexport class MsalBroadcastService {\n  private _msalSubject: Subject<EventMessage>;\n  public msalSubject$: Observable<EventMessage>;\n  private _inProgress: BehaviorSubject<InteractionStatus>;\n  public inProgress$: Observable<InteractionStatus>;\n\n  constructor(\n    @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication,\n    private authService: MsalService,\n    @Optional()\n    @Inject(MSAL_BROADCAST_CONFIG)\n    private msalBroadcastConfig?: MsalBroadcastConfiguration\n  ) {\n    // Make _msalSubject a ReplaySubject if configured to replay past events\n    if (\n      this.msalBroadcastConfig &&\n      this.msalBroadcastConfig.eventsToReplay > 0\n    ) {\n      this.authService\n        .getLogger()\n        .verbose(\n          `BroadcastService - eventsToReplay set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`\n        );\n      this._msalSubject = new ReplaySubject<EventMessage>(\n        this.msalBroadcastConfig.eventsToReplay\n      );\n    } else {\n      // Defaults to _msalSubject being a Subject\n      this._msalSubject = new Subject<EventMessage>();\n    }\n\n    this.msalSubject$ = this._msalSubject.asObservable();\n\n    // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n    this._inProgress = new BehaviorSubject<InteractionStatus>(\n      InteractionStatus.Startup\n    );\n    this.inProgress$ = this._inProgress.asObservable();\n\n    this.msalInstance.addEventCallback((message: EventMessage) => {\n      this._msalSubject.next(message);\n      const status = EventMessageUtils.getInteractionStatusFromEvent(\n        message,\n        this._inProgress.value\n      );\n      if (status !== null) {\n        this.authService\n          .getLogger()\n          .verbose(\n            `BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`\n          );\n        this._inProgress.next(status);\n      }\n    });\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Injectable, Inject } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport {\n  InteractionType,\n  BrowserConfigurationAuthError,\n  BrowserUtils,\n  UrlString,\n  PopupRequest,\n  RedirectRequest,\n  AuthenticationResult,\n} from '@azure/msal-browser';\nimport { Observable, of } from 'rxjs';\nimport { concatMap, catchError, map } from 'rxjs/operators';\nimport { MsalService } from './msal.service';\nimport { MsalGuardConfiguration } from './msal.guard.config';\nimport { MsalBroadcastService } from './msal.broadcast.service';\nimport { MSAL_GUARD_CONFIG } from './constants';\n\n@Injectable()\nexport class MsalGuard {\n  private loginFailedRoute?: UrlTree;\n\n  constructor(\n    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\n    private msalBroadcastService: MsalBroadcastService,\n    private authService: MsalService,\n    private location: Location,\n    private router: Router\n  ) {\n    // Subscribing so events in MsalGuard will set inProgress$ observable\n    this.msalBroadcastService.inProgress$.subscribe();\n  }\n\n  /**\n   * Parses url string to UrlTree\n   * @param url\n   */\n  parseUrl(url: string): UrlTree {\n    return this.router.parseUrl(url);\n  }\n\n  /**\n   * Builds the absolute url for the destination page\n   * @param path Relative path of requested page\n   * @returns Full destination url\n   */\n  getDestinationUrl(path: string): string {\n    this.authService.getLogger().verbose('Guard - getting destination url');\n    // Absolute base url for the application (default to origin if base element not present)\n    const baseElements = document.getElementsByTagName('base');\n    const baseUrl = this.location.normalize(\n      baseElements.length ? baseElements[0].href : window.location.origin\n    );\n\n    // Path of page (including hash, if using hash routing)\n    const pathUrl = this.location.prepareExternalUrl(path);\n\n    // Hash location strategy\n    if (pathUrl.startsWith('#')) {\n      this.authService\n        .getLogger()\n        .verbose('Guard - destination by hash routing');\n      return `${baseUrl}/${pathUrl}`;\n    }\n\n    /*\n     * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\n     * Since baseUrl also includes /base, can just concatentate baseUrl + path\n     */\n    return `${baseUrl}${path}`;\n  }\n\n  /**\n   * Interactively prompt the user to login\n   * @param url Path of the requested page\n   */\n  private loginInteractively(state: RouterStateSnapshot): Observable<boolean> {\n    const authRequest =\n      typeof this.msalGuardConfig.authRequest === 'function'\n        ? this.msalGuardConfig.authRequest(this.authService, state)\n        : { ...this.msalGuardConfig.authRequest };\n    if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose('Guard - logging in by popup');\n      return this.authService.loginPopup(authRequest as PopupRequest).pipe(\n        map((response: AuthenticationResult) => {\n          this.authService\n            .getLogger()\n            .verbose(\n              'Guard - login by popup successful, can activate, setting active account'\n            );\n          this.authService.instance.setActiveAccount(response.account);\n          return true;\n        })\n      );\n    }\n\n    this.authService.getLogger().verbose('Guard - logging in by redirect');\n    const redirectStartPage = this.getDestinationUrl(state.url);\n    return this.authService\n      .loginRedirect({\n        redirectStartPage,\n        ...authRequest,\n      } as RedirectRequest)\n      .pipe(map(() => false));\n  }\n\n  /**\n   * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable\n   * @param state\n   */\n  private activateHelper(\n    state?: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    if (\n      this.msalGuardConfig.interactionType !== InteractionType.Popup &&\n      this.msalGuardConfig.interactionType !== InteractionType.Redirect\n    ) {\n      throw new BrowserConfigurationAuthError(\n        'invalid_interaction_type',\n        'Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration'\n      );\n    }\n    this.authService.getLogger().verbose('MSAL Guard activated');\n\n    /*\n     * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\n     * short-circuit to prevent redirecting or popups.\n     */\n    if (typeof window !== 'undefined') {\n      if (\n        UrlString.hashContainsKnownProperties(window.location.hash) &&\n        BrowserUtils.isInIframe() &&\n        !this.authService.instance.getConfiguration().system\n          .allowRedirectInIframe\n      ) {\n        this.authService\n          .getLogger()\n          .warning(\n            'Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.'\n          );\n        return of(false);\n      }\n    } else {\n      this.authService\n        .getLogger()\n        .info(\n          'Guard - window is undefined, MSAL does not support server-side token acquisition'\n        );\n      return of(true);\n    }\n\n    /**\n     * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\n     */\n    if (this.msalGuardConfig.loginFailedRoute) {\n      this.loginFailedRoute = this.parseUrl(\n        this.msalGuardConfig.loginFailedRoute\n      );\n    }\n\n    // Capture current path before it gets changed by handleRedirectObservable\n    const currentPath = this.location.path(true);\n\n    return this.authService.initialize().pipe(\n      concatMap(() => {\n        return this.authService.handleRedirectObservable();\n      }),\n      concatMap(() => {\n        if (!this.authService.instance.getAllAccounts().length) {\n          if (state) {\n            this.authService\n              .getLogger()\n              .verbose(\n                'Guard - no accounts retrieved, log in required to activate'\n              );\n            return this.loginInteractively(state);\n          }\n          this.authService\n            .getLogger()\n            .verbose('Guard - no accounts retrieved, no state, cannot load');\n          return of(false);\n        }\n\n        this.authService\n          .getLogger()\n          .verbose('Guard - at least 1 account exists, can activate or load');\n\n        // Prevent navigating the app to /#code= or /code=\n        if (state) {\n          /*\n           * Path routing:\n           * state.url: /#code=...\n           * state.root.fragment: code=...\n           */\n\n          /*\n           * Hash routing:\n           * state.url: /code\n           * state.root.fragment: null\n           */\n          const urlContainsCode: boolean = this.includesCode(state.url);\n          const fragmentContainsCode: boolean =\n            !!state.root &&\n            !!state.root.fragment &&\n            this.includesCode(`#${state.root.fragment}`);\n          const hashRouting: boolean =\n            this.location.prepareExternalUrl(state.url).indexOf('#') === 0;\n\n          // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\n          if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\n            this.authService\n              .getLogger()\n              .info(\n                'Guard - Hash contains known code response, stopping navigation.'\n              );\n\n            // Path routing (navigate to current path without hash)\n            if (currentPath.indexOf('#') > -1) {\n              return of(this.parseUrl(this.location.path()));\n            }\n\n            // Hash routing (navigate to root path)\n            return of(this.parseUrl(''));\n          }\n        }\n\n        return of(true);\n      }),\n      catchError((error: Error) => {\n        this.authService\n          .getLogger()\n          .error('Guard - error while logging in, unable to activate');\n        this.authService\n          .getLogger()\n          .errorPii(`Guard - error: ${error.message}`);\n        /**\n         * If a loginFailedRoute is set, checks to see if state is passed before returning route\n         */\n        if (this.loginFailedRoute && state) {\n          this.authService\n            .getLogger()\n            .verbose('Guard - loginFailedRoute set, redirecting');\n          return of(this.loginFailedRoute);\n        }\n        return of(false);\n      })\n    );\n  }\n\n  includesCode(path: string): boolean {\n    return (\n      (path.lastIndexOf('/code') > -1 &&\n        path.lastIndexOf('/code') === path.length - '/code'.length) || // path.endsWith(\"/code\")\n      path.indexOf('#code=') > -1 ||\n      path.indexOf('&code=') > -1\n    );\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    this.authService.getLogger().verbose('Guard - canActivate');\n    return this.activateHelper(state);\n  }\n\n  canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    this.authService.getLogger().verbose('Guard - canActivateChild');\n    return this.activateHelper(state);\n  }\n\n  canMatch(): Observable<boolean | UrlTree> {\n    this.authService.getLogger().verbose('Guard - canLoad');\n    return this.activateHelper();\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Injectable, Inject } from '@angular/core';\nimport { Location, DOCUMENT } from '@angular/common';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http'; // eslint-disable-line import/no-unresolved\nimport {\n  AccountInfo,\n  AuthenticationResult,\n  BrowserConfigurationAuthError,\n  InteractionStatus,\n  InteractionType,\n  StringUtils,\n  UrlString,\n} from '@azure/msal-browser';\nimport { Observable, EMPTY, of } from 'rxjs';\nimport { switchMap, catchError, take, filter } from 'rxjs/operators';\nimport { MsalService } from './msal.service';\nimport {\n  MsalInterceptorAuthRequest,\n  MsalInterceptorConfiguration,\n  ProtectedResourceScopes,\n  MatchingResources,\n} from './msal.interceptor.config';\nimport { MsalBroadcastService } from './msal.broadcast.service';\nimport { MSAL_INTERCEPTOR_CONFIG } from './constants';\n\n@Injectable()\nexport class MsalInterceptor implements HttpInterceptor {\n  private _document?: Document;\n\n  constructor(\n    @Inject(MSAL_INTERCEPTOR_CONFIG)\n    private msalInterceptorConfig: MsalInterceptorConfiguration,\n    private authService: MsalService,\n    private location: Location,\n    private msalBroadcastService: MsalBroadcastService,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    @Inject(DOCUMENT) document?: any\n  ) {\n    this._document = document as Document;\n  }\n\n  intercept(\n    req: HttpRequest<any>, // eslint-disable-line @typescript-eslint/no-explicit-any\n    next: HttpHandler\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Observable<HttpEvent<any>> {\n    if (\n      this.msalInterceptorConfig.interactionType !== InteractionType.Popup &&\n      this.msalInterceptorConfig.interactionType !== InteractionType.Redirect\n    ) {\n      throw new BrowserConfigurationAuthError(\n        'invalid_interaction_type',\n        'Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration'\n      );\n    }\n\n    this.authService.getLogger().verbose('MSAL Interceptor activated');\n    const scopes = this.getScopesForEndpoint(req.url, req.method);\n\n    // If no scopes for endpoint, does not acquire token\n    if (!scopes || scopes.length === 0) {\n      this.authService\n        .getLogger()\n        .verbose('Interceptor - no scopes for endpoint');\n      return next.handle(req);\n    }\n\n    // Sets account as active account or first account\n    let account: AccountInfo;\n    if (!!this.authService.instance.getActiveAccount()) {\n      this.authService\n        .getLogger()\n        .verbose('Interceptor - active account selected');\n      account = this.authService.instance.getActiveAccount();\n    } else {\n      this.authService\n        .getLogger()\n        .verbose('Interceptor - no active account, fallback to first account');\n      account = this.authService.instance.getAllAccounts()[0];\n    }\n\n    const authRequest =\n      typeof this.msalInterceptorConfig.authRequest === 'function'\n        ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n            account: account,\n          })\n        : { ...this.msalInterceptorConfig.authRequest, account };\n\n    this.authService\n      .getLogger()\n      .info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n    this.authService\n      .getLogger()\n      .infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\n\n    return this.acquireToken(authRequest, scopes, account).pipe(\n      switchMap((result: AuthenticationResult) => {\n        this.authService\n          .getLogger()\n          .verbose('Interceptor - setting authorization headers');\n        const headers = req.headers.set(\n          'Authorization',\n          `Bearer ${result.accessToken}`\n        );\n\n        const requestClone = req.clone({ headers });\n        return next.handle(requestClone);\n      })\n    );\n  }\n\n  /**\n   * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\n   * @param authRequest Request\n   * @param scopes Array of scopes for the request\n   * @param account Account\n   * @returns Authentication result\n   */\n  private acquireToken(\n    authRequest: MsalInterceptorAuthRequest,\n    scopes: string[],\n    account: AccountInfo\n  ): Observable<AuthenticationResult> {\n    // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n    return this.authService\n      .acquireTokenSilent({ ...authRequest, scopes, account })\n      .pipe(\n        catchError(() => {\n          this.authService\n            .getLogger()\n            .error(\n              'Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.'\n            );\n          return this.msalBroadcastService.inProgress$.pipe(\n            take(1),\n            switchMap((status: InteractionStatus) => {\n              if (status === InteractionStatus.None) {\n                return this.acquireTokenInteractively(authRequest, scopes);\n              }\n\n              return this.msalBroadcastService.inProgress$.pipe(\n                filter(\n                  (status: InteractionStatus) =>\n                    status === InteractionStatus.None\n                ),\n                take(1),\n                switchMap(() => this.acquireToken(authRequest, scopes, account))\n              );\n            })\n          );\n        }),\n        switchMap((result: AuthenticationResult) => {\n          if (!result.accessToken) {\n            this.authService\n              .getLogger()\n              .error(\n                'Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.'\n              );\n            return this.msalBroadcastService.inProgress$.pipe(\n              filter(\n                (status: InteractionStatus) => status === InteractionStatus.None\n              ),\n              take(1),\n              switchMap(() =>\n                this.acquireTokenInteractively(authRequest, scopes)\n              )\n            );\n          }\n          return of(result);\n        })\n      );\n  }\n\n  /**\n   * Invoke interaction for the given set of scopes\n   * @param authRequest Request\n   * @param scopes Array of scopes for the request\n   * @returns Result from the interactive request\n   */\n  private acquireTokenInteractively(\n    authRequest: MsalInterceptorAuthRequest,\n    scopes: string[]\n  ): Observable<AuthenticationResult> {\n    if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n      this.authService\n        .getLogger()\n        .verbose(\n          'Interceptor - error acquiring token silently, acquiring by popup'\n        );\n      return this.authService.acquireTokenPopup({ ...authRequest, scopes });\n    }\n    this.authService\n      .getLogger()\n      .verbose(\n        'Interceptor - error acquiring token silently, acquiring by redirect'\n      );\n    const redirectStartPage = window.location.href;\n    this.authService.acquireTokenRedirect({\n      ...authRequest,\n      scopes,\n      redirectStartPage,\n    });\n    return EMPTY;\n  }\n\n  /**\n   * Looks up the scopes for the given endpoint from the protectedResourceMap\n   * @param endpoint Url of the request\n   * @param httpMethod Http method of the request\n   * @returns Array of scopes, or null if not found\n   *\n   */\n  private getScopesForEndpoint(\n    endpoint: string,\n    httpMethod: string\n  ): Array<string> | null {\n    this.authService\n      .getLogger()\n      .verbose('Interceptor - getting scopes for endpoint');\n\n    // Ensures endpoints and protected resources compared are normalized\n    const normalizedEndpoint = this.location.normalize(endpoint);\n\n    const protectedResourcesArray = Array.from(\n      this.msalInterceptorConfig.protectedResourceMap.keys()\n    );\n\n    const matchingProtectedResources = this.matchResourcesToEndpoint(\n      protectedResourcesArray,\n      normalizedEndpoint\n    );\n\n    // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n    if (matchingProtectedResources.absoluteResources.length > 0) {\n      return this.matchScopesToEndpoint(\n        this.msalInterceptorConfig.protectedResourceMap,\n        matchingProtectedResources.absoluteResources,\n        httpMethod\n      );\n    } else if (matchingProtectedResources.relativeResources.length > 0) {\n      return this.matchScopesToEndpoint(\n        this.msalInterceptorConfig.protectedResourceMap,\n        matchingProtectedResources.relativeResources,\n        httpMethod\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Finds resource endpoints that match request endpoint\n   * @param protectedResourcesEndpoints\n   * @param endpoint\n   * @returns\n   */\n  private matchResourcesToEndpoint(\n    protectedResourcesEndpoints: string[],\n    endpoint: string\n  ): MatchingResources {\n    const matchingResources: MatchingResources = {\n      absoluteResources: [],\n      relativeResources: [],\n    };\n\n    protectedResourcesEndpoints.forEach((key) => {\n      // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n      const normalizedKey = this.location.normalize(key);\n      if (StringUtils.matchPattern(normalizedKey, endpoint)) {\n        matchingResources.absoluteResources.push(key);\n      }\n\n      // Get url components for relative urls\n      const absoluteKey = this.getAbsoluteUrl(key);\n      const keyComponents = new UrlString(absoluteKey).getUrlComponents();\n      const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n      const endpointComponents = new UrlString(\n        absoluteEndpoint\n      ).getUrlComponents();\n\n      // Normalized key should include query strings if applicable\n      const relativeNormalizedKey = keyComponents.QueryString\n        ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}`\n        : this.location.normalize(keyComponents.AbsolutePath);\n\n      // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n      if (\n        keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort &&\n        StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) &&\n        relativeNormalizedKey !== '' &&\n        relativeNormalizedKey !== '/*'\n      ) {\n        matchingResources.relativeResources.push(key);\n      }\n    });\n\n    return matchingResources;\n  }\n\n  /**\n   * Transforms relative urls to absolute urls\n   * @param url\n   * @returns\n   */\n  private getAbsoluteUrl(url: string): string {\n    const link = this._document.createElement('a');\n    link.href = url;\n    return link.href;\n  }\n\n  /**\n   * Finds scopes from first matching endpoint with HTTP method that matches request\n   * @param protectedResourceMap Protected resource map\n   * @param endpointArray Array of resources that match request endpoint\n   * @param httpMethod Http method of the request\n   * @returns\n   */\n  private matchScopesToEndpoint(\n    protectedResourceMap: Map<\n      string,\n      Array<string | ProtectedResourceScopes> | null\n    >,\n    endpointArray: string[],\n    httpMethod: string\n  ): Array<string> | null {\n    const allMatchedScopes = [];\n\n    // Check each matched endpoint for matching HttpMethod and scopes\n    endpointArray.forEach((matchedEndpoint) => {\n      const scopesForEndpoint = [];\n      const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\n\n      // Return if resource is unprotected\n      if (methodAndScopesArray === null) {\n        allMatchedScopes.push(null);\n        return;\n      }\n\n      methodAndScopesArray.forEach((entry) => {\n        // Entry is either array of scopes or ProtectedResourceScopes object\n        if (typeof entry === 'string') {\n          scopesForEndpoint.push(entry);\n        } else {\n          // Ensure methods being compared are normalized\n          const normalizedRequestMethod = httpMethod.toLowerCase();\n          const normalizedResourceMethod = entry.httpMethod.toLowerCase();\n          // Method in protectedResourceMap matches request http method\n          if (normalizedResourceMethod === normalizedRequestMethod) {\n            // Validate if scopes comes null to unprotect the resource in a certain http method\n            if (entry.scopes === null) {\n              allMatchedScopes.push(null);\n            } else {\n              entry.scopes.forEach((scope) => {\n                scopesForEndpoint.push(scope);\n              });\n            }\n          }\n        }\n      });\n\n      // Only add to all scopes if scopes for endpoint and method is found\n      if (scopesForEndpoint.length > 0) {\n        allMatchedScopes.push(scopesForEndpoint);\n      }\n    });\n\n    if (allMatchedScopes.length > 0) {\n      if (allMatchedScopes.length > 1) {\n        this.authService\n          .getLogger()\n          .warning(\n            'Interceptor - More than 1 matching scopes for endpoint found.'\n          );\n      }\n      // Returns scopes for first matching endpoint\n      return allMatchedScopes[0];\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * This is a dedicated redirect component to be added to Angular apps to\n * handle redirects when using @azure/msal-angular.\n * Import this component to use redirects in your app.\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { MsalService } from './msal.service';\n\n@Component({\n  selector: 'app-redirect',\n  template: '',\n})\nexport class MsalRedirectComponent implements OnInit {\n  constructor(private authService: MsalService) {}\n\n  ngOnInit(): void {\n    this.authService.getLogger().verbose('MsalRedirectComponent activated');\n    this.authService.handleRedirectObservable().subscribe();\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IPublicClientApplication } from '@azure/msal-browser';\nimport { MsalBroadcastService } from './msal.broadcast.service';\nimport { MsalGuard } from './msal.guard';\nimport { MsalGuardConfiguration } from './msal.guard.config';\nimport { MsalInterceptorConfiguration } from './msal.interceptor.config';\nimport { MsalRedirectComponent } from './msal.redirect.component';\nimport { MsalService } from './msal.service';\nimport {\n  MSAL_INSTANCE,\n  MSAL_GUARD_CONFIG,\n  MSAL_INTERCEPTOR_CONFIG,\n} from './constants';\n\n@NgModule({\n  declarations: [MsalRedirectComponent],\n  imports: [CommonModule],\n  providers: [MsalGuard, MsalBroadcastService],\n})\nexport class MsalModule {\n  static forRoot(\n    msalInstance: IPublicClientApplication,\n    guardConfig: MsalGuardConfiguration,\n    interceptorConfig: MsalInterceptorConfiguration\n  ): ModuleWithProviders<MsalModule> {\n    return {\n      ngModule: MsalModule,\n      providers: [\n        {\n          provide: MSAL_INSTANCE,\n          useValue: msalInstance,\n        },\n        {\n          provide: MSAL_GUARD_CONFIG,\n          useValue: guardConfig,\n        },\n        {\n          provide: MSAL_INTERCEPTOR_CONFIG,\n          useValue: interceptorConfig,\n        },\n        MsalService,\n      ],\n    };\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\nimport {\n  NavigationClient,\n  NavigationOptions,\n  UrlString,\n} from '@azure/msal-browser';\nimport { MsalService } from './msal.service';\n\n/**\n * Custom navigation used for Angular client-side navigation.\n * See performance doc for details:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/performance.md\n */\n@Injectable()\nexport class MsalCustomNavigationClient extends NavigationClient {\n  constructor(\n    private authService: MsalService,\n    private router: Router,\n    private location: Location\n  ) {\n    super();\n  }\n\n  async navigateInternal(\n    url: string,\n    options: NavigationOptions\n  ): Promise<boolean> {\n    this.authService.getLogger().trace('MsalCustomNavigationClient called');\n\n    this.authService\n      .getLogger()\n      .verbose('MsalCustomNavigationClient - navigating');\n    this.authService\n      .getLogger()\n      .verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\n\n    // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n    if (options.noHistory) {\n      return super.navigateInternal(url, options);\n    } else {\n      // Normalizing newUrl if no query string\n      const urlComponents = new UrlString(url).getUrlComponents();\n      const newUrl = urlComponents.QueryString\n        ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}`\n        : this.location.normalize(urlComponents.AbsolutePath);\n      await this.router.navigateByUrl(newUrl, {\n        replaceUrl: options.noHistory,\n      });\n    }\n    return Promise.resolve(options.noHistory);\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * @packageDocumentation\n * @module @azure/msal-angular\n */\n\nexport { MsalService } from './msal.service';\nexport { IMsalService } from './IMsalService';\nexport { MsalGuard } from './msal.guard';\nexport {\n  MsalGuardConfiguration,\n  MsalGuardAuthRequest,\n} from './msal.guard.config';\nexport { MsalInterceptor } from './msal.interceptor';\nexport {\n  MsalInterceptorConfiguration,\n  MsalInterceptorAuthRequest,\n  ProtectedResourceScopes,\n} from './msal.interceptor.config';\nexport {\n  MSAL_INSTANCE,\n  MSAL_GUARD_CONFIG,\n  MSAL_INTERCEPTOR_CONFIG,\n  MSAL_BROADCAST_CONFIG,\n} from './constants';\nexport { MsalBroadcastService } from './msal.broadcast.service';\nexport { MsalBroadcastConfiguration } from './msal.broadcast.config';\nexport { MsalModule } from './msal.module';\nexport { MsalRedirectComponent } from './msal.redirect.component';\nexport { MsalCustomNavigationClient } from './msal.navigation.client';\nexport { version } from './packageMetadata';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i1.MsalService","i1.MsalBroadcastService","i2.MsalService","i2","i3.MsalBroadcastService"],"mappings":"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"}